initSidebarItems({"enum":[["ConnectedPoint","The endpoint roles associated with a peer-to-peer connection."],["ConnectionError","Errors that can occur in the context of an established `Connection`."],["ConnectionHandlerEvent","Event produced by a handler."],["Endpoint","The endpoint roles associated with a peer-to-peer communication channel."],["Event","Event generated by a [`Connection`]."],["ListenersEvent","Event that can happen on the `ListenersStream`."],["PendingConnectionError","Errors that can occur in the context of a pending `Connection`."],["SubstreamEndpoint","Endpoint for a received substream."]],"struct":[["Close","Future that signals the remote that we have closed the connection."],["Connected","Information about a successfully established connection."],["Connection","A multiplexed connection to a peer with an associated `ConnectionHandler`."],["ConnectionId","Connection identifier."],["ConnectionLimit","Information about a connection limit."],["EstablishedConnection","An established connection in a [`Pool`]."],["EstablishedConnectionIter","An iterator over established connections in a [`Pool`]."],["IncomingInfo","Borrowed information about an incoming connection currently being negotiated."],["ListenerId","The ID of a single listener."],["ListenersStream","Implementation of `futures::Stream` that allows listening on multiaddresses."],["OutgoingInfo","Borrowed information about an outgoing connection currently being negotiated."],["PendingConnection","A pending connection in a [`Pool`]."]],"trait":[["ConnectionHandler","The interface of a connection handler."],["ConnectionInfo","Information about a connection."],["IntoConnectionHandler","Prototype for a `ConnectionHandler`."]],"type":[["Substream","A successfully opened substream."]]});