initSidebarItems({"enum":[["MachTerminator","Describes a block terminator (not call) in the vcode, when its branches have not yet been finalized (so a branch may have two targets)."],["UnwindInfoKind","Expected unwind info type."]],"mod":[["abi","ABI definitions."],["abi_impl","Implementation of a vanilla ABI, shared between several machines. The implementation here assumes that arguments will be passed in registers first, then additional args on the stack; that the stack grows downward, contains a standard frame (return address and frame pointer), and the compiler is otherwise free to allocate space below that with its choice of layout; and that the machine has some notion of caller- and callee-save registers. Most modern machines, e.g. x86-64 and AArch64, should fit this mold and thus both of these backends use this shared implementation."],["adapter","Adapter for a `MachBackend` to implement the `TargetIsa` trait."],["blockorder","Computation of basic block order in emitted code."],["buffer","In-memory representation of compiled machine code, with labels and fixups to refer to those labels. Handles constant-pool island insertion and also veneer insertion for out-of-range jumps."],["compile","Compilation backend pipeline: optimized IR to VCode / binemit."],["helpers","Miscellaneous helpers for machine backends."],["inst_common","A place to park MachInst::Inst fragments which are common across multiple architectures."],["lower","This module implements lowering (instruction selection) from Cranelift IR to machine instructions with virtual registers. This is almost the final machine code, except for register allocation."],["valueregs","Data structure for tracking the (possibly multiple) registers that hold one SSA `Value`."],["vcode","This implements the VCode container: a CFG of Insts that have been lowered."]],"struct":[["MachCompileResult","The result of a `MachBackend::compile_function()` call. Contains machine code (as bytes) and a disassembly, if requested."],["UnwindInfoContext","Input data for UnwindInfoGenerator."]],"trait":[["MachBackend","Top-level machine backend trait, which wraps all monomorphized code and allows a virtual call from the machine-independent `Function::compile()`."],["MachInst","A machine instruction."],["MachInstEmit","A trait describing the ability to encode a MachInst into binary machine code."],["MachInstEmitInfo","Constant information used to emit an instruction."],["MachInstEmitState","A trait describing the emission state carried between MachInsts when emitting a function body."],["MachInstLabelUse","A descriptor of a label reference (use) in an instruction set."],["UnwindInfoGenerator","UnwindInfo generator/helper."]]});