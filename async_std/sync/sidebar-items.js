initSidebarItems({"enum":[["TryRecvError","An error returned from the `try_recv` method."],["TrySendError","An error returned from the `try_send` method."]],"fn":[["channel","Creates a bounded multi-producer multi-consumer channel."]],"struct":[["Arc","A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'."],["Barrier","A barrier enables multiple tasks to synchronize the beginning of some computation."],["BarrierWaitResult","A `BarrierWaitResult` is returned by `wait` when all threads in the `Barrier` have rendezvoused."],["Condvar","A Condition Variable"],["Mutex","An async mutex."],["MutexGuard","A guard that releases the mutex when dropped."],["Receiver","The receiving side of a channel."],["RecvError","An error returned from the `recv` method."],["RwLock","A reader-writer lock for protecting shared data."],["RwLockReadGuard","A guard that releases the read lock when dropped."],["RwLockWriteGuard","A guard that releases the write lock when dropped."],["Sender","The sending side of a channel."],["Weak","`Weak` is a version of [`Arc`] that holds a non-owning reference to the managed allocation. The allocation is accessed by calling `upgrade` on the `Weak` pointer, which returns an [`Option`]`<`[`Arc`]`<T>>`."]]});