initSidebarItems({"fn":[["verify_batch","Verify a batch of `signatures` on `messages` with their respective `public_keys`."],["verify_batch_deterministic","Verify a batch of `signatures` on `messages` with their respective `public_keys`."],["verify_batch_rng","Verify a batch of `signatures` on `messages` with their respective `public_keys`."]],"mod":[["cert","Elliptic curve Qu-Vanstone implicit certificate scheme (ECQV) for RistrettoImplicit certificates provide an extremely space efficent public key certificate scheme."],["context","Schnorr signature contexts and configuration, adaptable to most Schnorr signature schemes."],["derive","Implementation of \"hierarchical deterministic key derivation\" (HDKD) for Schnorr signatures on RistrettoWarning  We warn that our VRF construction in vrf.rs supports malleable VRF outputs via the `Malleable` type, which becomes insecure when used in conjunction with our hierarchical key derivation methods here. Attackers could translate malleable VRF outputs from one soft subkey  to another soft subkey, gaining early knowledge of the VRF output. We think most VRF applicaitons for which HDKH sounds suitable benefit from using implicit certificates insead of HDKD anyways, which should also be secure in combination with HDKH. We always use non-malleable VRF inputs in our convenience methods. We suggest using implicit certificates instead of HDKD when  using VRFs."],["errors","Errors which may occur when parsing keys and/or signatures to or from wire formats."],["keys","Schnorr signatures on the 2-torsion free subgroup of ed25519, as provided by the Ristretto point compression."],["musig","Implementation for Ristretto Schnorr signatures of \"Simple Schnorr Multi-Signatures with Applications to Bitcoin\" by Gregory Maxwell, Andrew Poelstra, Yannick Seurin, and Pieter Wuille https://eprint.iacr.org/2018/068"],["points","Ristretto point toolingWe provide a `RistrettoBoth` type that contains both an uncompressed `RistrettoPoint` along side its matching `CompressedRistretto`,  which helps several protocols avoid duplicate ristretto compressions and/or decompressions.  "],["sign","Schnorr signature creation and verification, including batch verification."],["vrf","Implementation of a Verifiable Random Function (VRF) using Ristretto points and Schnorr DLEQ proofs.Warning  We warn that our VRF construction supports malleable outputs via the `*malleable*` methods.  These are insecure when used in  conjunction with our HDKD provided in dervie.rs. Attackers could translate malleable VRF outputs from one soft subkey  to another soft subkey, gaining early knowledge of the VRF output. We suggest using either non-malleable VRFs or using implicit certificates instead of HDKD when using VRFs."]]});