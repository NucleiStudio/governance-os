initSidebarItems({"enum":[["NewBlockState","State of a new block."]],"fn":[["apply_aux","Helper function to apply auxiliary data insertion into an operation."],["changes_tries_state_at_block","Return changes tries state at given block."]],"struct":[["ClientImportOperation","Import operation wrapper"],["ImportSummary","Import operation summary."],["KeyIterator","An `Iterator` that iterates keys in a given block under a prefix."]],"trait":[["AuxStore","Provides access to an auxiliary database."],["Backend","Client backend."],["BlockImportOperation","Block insertion operation."],["Finalizer","Finalize Facilities"],["LocalBackend","Mark for all Backend implementations, that are making use of state data, stored locally."],["LockImportRun","Interface for performing operations on the backend."],["ProvideChtRoots","Provide CHT roots. These are stored on a light client and generated dynamically on a full client."],["PrunableStateChangesTrieStorage","Changes trie storage that supports pruning."],["RemoteBackend","Mark for all Backend implementations, that are fetching required state data from remote nodes."],["StateBackend","A state backend is used to read state data and can have changes committed to it."],["StorageProvider","Provides acess to storage primitives"]],"type":[["StateBackendFor","Extracts the state backend type for the given backend."],["TransactionFor","Extracts the transaction for the given backend."],["TransactionForSB","Extracts the transaction for the given state backend."]]});