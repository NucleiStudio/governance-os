(function() {var implementors = {};
implementors["finality_grandpa"] = [{"text":"impl&lt;H, N&gt; Encode for State&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;(H, N)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;(H, N)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;(H, N)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;(H, N)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;(H, N)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;(H, N)&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N&gt; Encode for Prevote&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N&gt; Encode for Precommit&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N&gt; Encode for PrimaryPropose&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Id, V, S&gt; Encode for Equivocation&lt;Id, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;(V, S): Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;(V, S): Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N&gt; Encode for Message&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Prevote&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Prevote&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Precommit&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Precommit&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PrimaryPropose&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PrimaryPropose&lt;H, N&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Encode for SignedMessage&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Message&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Message&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Encode for Commit&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;SignedPrecommit&lt;H, N, S, Id&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;SignedPrecommit&lt;H, N, S, Id&gt;&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Encode for SignedPrevote&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Prevote&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Prevote&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Encode for SignedPrecommit&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Precommit&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Precommit&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Encode for CompactCommit&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Precommit&lt;H, N&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Precommit&lt;H, N&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;MultiAuthData&lt;S, Id&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;MultiAuthData&lt;S, Id&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Encode for CatchUp&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;SignedPrevote&lt;H, N, S, Id&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;SignedPrevote&lt;H, N, S, Id&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;SignedPrecommit&lt;H, N, S, Id&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;SignedPrecommit&lt;H, N, S, Id&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Encode for HistoricalVotes&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;SignedMessage&lt;H, N, S, Id&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;SignedMessage&lt;H, N, S, Id&gt;&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["fork_tree"] = [{"text":"impl&lt;H, N, V&gt; Encode for ForkTree&lt;H, N, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Node&lt;H, N, V&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Node&lt;H, N, V&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;N&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["frame_benchmarking"] = [{"text":"impl Encode for BenchmarkParameter","synthetic":false,"types":[]},{"text":"impl Encode for BenchmarkBatch","synthetic":false,"types":[]},{"text":"impl Encode for BenchmarkResults","synthetic":false,"types":[]},{"text":"impl Encode for BenchmarkConfig","synthetic":false,"types":[]}];
implementors["frame_metadata"] = [{"text":"impl&lt;B, O&gt; Encode for DecodeDifferent&lt;B, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Encode + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Encode + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for FunctionMetadata","synthetic":false,"types":[]},{"text":"impl Encode for FunctionArgumentMetadata","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Encode&gt; Encode for FnEncode&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Encode for OuterEventMetadata","synthetic":false,"types":[]},{"text":"impl Encode for EventMetadata","synthetic":false,"types":[]},{"text":"impl Encode for StorageEntryMetadata","synthetic":false,"types":[]},{"text":"impl Encode for ModuleConstantMetadata","synthetic":false,"types":[]},{"text":"impl Encode for ErrorMetadata","synthetic":false,"types":[]},{"text":"impl Encode for DefaultByteGetter","synthetic":false,"types":[]},{"text":"impl Encode for StorageHasher","synthetic":false,"types":[]},{"text":"impl Encode for StorageEntryType","synthetic":false,"types":[]},{"text":"impl Encode for StorageEntryModifier","synthetic":false,"types":[]},{"text":"impl Encode for StorageMetadata","synthetic":false,"types":[]},{"text":"impl Encode for RuntimeMetadataPrefixed","synthetic":false,"types":[]},{"text":"impl Encode for ExtrinsicMetadata","synthetic":false,"types":[]},{"text":"impl Encode for RuntimeMetadata","synthetic":false,"types":[]},{"text":"impl Encode for RuntimeMetadataDeprecated","synthetic":false,"types":[]},{"text":"impl Encode for RuntimeMetadataV12","synthetic":false,"types":[]},{"text":"impl Encode for ModuleMetadata","synthetic":false,"types":[]}];
implementors["frame_system"] = [{"text":"impl&lt;T:&nbsp;Trait + Send + Sync&gt; Encode for CheckGenesis&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait + Send + Sync&gt; Encode for CheckMortality&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for CheckNonce&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Index: HasCompact,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait + Send + Sync&gt; Encode for CheckSpecVersion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait + Send + Sync&gt; Encode for CheckTxVersion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait + Send + Sync&gt; Encode for CheckWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for Phase","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Parameter + Member, T&gt; Encode for EventRecord&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; Encode for RawOrigin&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Index, AccountData&gt; Encode for AccountInfo&lt;Index, AccountData&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Index: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Index: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountData: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountData: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for LastRuntimeUpgradeInfo","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; Encode for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["governance_os_pallet_bylaws"] = [{"text":"impl&lt;AccountId, Role&gt; Encode for RawEvent&lt;AccountId, Role&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Role: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Role: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Role: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Role: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;&lt;T::Lookup as StaticLookup&gt;::Source&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;&lt;T::Lookup as StaticLookup&gt;::Source&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Role: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Role: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;&lt;T::Lookup as StaticLookup&gt;::Source&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;&lt;T::Lookup as StaticLookup&gt;::Source&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Role: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Role: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["governance_os_pallet_coin_voting"] = [{"text":"impl&lt;BlockNumber, CurrencyId&gt; Encode for VotingParameters&lt;BlockNumber, CurrencyId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for VoteCountingStrategy","synthetic":false,"types":[]},{"text":"impl&lt;Balance&gt; Encode for VoteData&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["governance_os_pallet_compat"] = [{"text":"impl Encode for Event","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["governance_os_pallet_organizations"] = [{"text":"impl&lt;AccountId, VotingSystem&gt; Encode for OrganizationDetails&lt;AccountId, VotingSystem&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;VotingSystem: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;VotingSystem: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Call, OrganizationId, VotingSystem&gt; Encode for Proposal&lt;Call, OrganizationId, VotingSystem&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OrganizationId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;OrganizationId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;VotingSystem: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;VotingSystem: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, OrganizationDetails, ProposalId, VoteData&gt; Encode for RawEvent&lt;AccountId, OrganizationDetails, ProposalId, VoteData&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;OrganizationDetails: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;OrganizationDetails: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;OrganizationDetails: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;OrganizationDetails: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;OrganizationDetails: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;OrganizationDetails: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;ProposalId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;ProposalId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;ProposalId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;ProposalId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;ProposalId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;ProposalId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;VoteData: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;VoteData: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;ProposalId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;ProposalId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;ProposalId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;ProposalId: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OrganizationDetails&lt;&lt;T as Trait&gt;::AccountId, (&lt;&lt;T as Trait&gt;::VotingRouter as VotingRouter&gt;::VotingSystemId, &lt;&lt;T as Trait&gt;::VotingRouter as VotingRouter&gt;::Parameters)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;OrganizationDetails&lt;&lt;T as Trait&gt;::AccountId, (&lt;&lt;T as Trait&gt;::VotingRouter as VotingRouter&gt;::VotingSystemId, &lt;&lt;T as Trait&gt;::VotingRouter as VotingRouter&gt;::Parameters)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;OrganizationDetails&lt;&lt;T as Trait&gt;::AccountId, (&lt;&lt;T as Trait&gt;::VotingRouter as VotingRouter&gt;::VotingSystemId, &lt;&lt;T as Trait&gt;::VotingRouter as VotingRouter&gt;::Parameters)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;OrganizationDetails&lt;&lt;T as Trait&gt;::AccountId, (&lt;&lt;T as Trait&gt;::VotingRouter as VotingRouter&gt;::VotingSystemId, &lt;&lt;T as Trait&gt;::VotingRouter as VotingRouter&gt;::Parameters)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::VotingRouter as VotingRouter&gt;::VoteData: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::VotingRouter as VotingRouter&gt;::VoteData: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Hash: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["governance_os_pallet_plcr_voting"] = [{"text":"impl&lt;BlockNumber, CurrencyId&gt; Encode for VotingParameters&lt;BlockNumber, CurrencyId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Balance, Hash&gt; Encode for VoteData&lt;Balance, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Hash, AccountId&gt; Encode for RawEvent&lt;Hash, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["governance_os_pallet_tokens"] = [{"text":"impl&lt;Balance&gt; Encode for AccountCurrencyData&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; Encode for CurrencyDetails&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance, CurrencyId, CurrencyDetails&gt; Encode for RawEvent&lt;AccountId, Balance, CurrencyId, CurrencyDetails&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyDetails: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyDetails: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyDetails: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyDetails: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyDetails&lt;T::AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyDetails&lt;T::AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Balance: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["governance_os_primitives"] = [{"text":"impl Encode for CurrencyId","synthetic":false,"types":[]},{"text":"impl Encode for Role","synthetic":false,"types":[]}];
implementors["governance_os_runtime"] = [{"text":"impl Encode for SessionKeys","synthetic":false,"types":[]},{"text":"impl Encode for RuntimeVotingParameters","synthetic":false,"types":[]},{"text":"impl Encode for RuntimeVotingSystemId","synthetic":false,"types":[]},{"text":"impl Encode for Event","synthetic":false,"types":[]},{"text":"impl Encode for OriginCaller","synthetic":false,"types":[]},{"text":"impl Encode for Call","synthetic":false,"types":[]}];
implementors["governance_os_support"] = [{"text":"impl Encode for ProposalResult","synthetic":false,"types":[]}];
implementors["pallet_aura"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_authorship"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::Header&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::Header&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_finality_tracker"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: HasCompact,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_grandpa"] = [{"text":"impl Encode for GrandpaTimeSlot","synthetic":false,"types":[]},{"text":"impl&lt;N&gt; Encode for OldStoredPendingChange&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N&gt; Encode for StoredPendingChange&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;N&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N&gt; Encode for StoredState&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for Event","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;EquivocationProof&lt;T::Hash, T::BlockNumber&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;EquivocationProof&lt;T::Hash, T::BlockNumber&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::KeyOwnerProof: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::KeyOwnerProof: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;EquivocationProof&lt;T::Hash, T::BlockNumber&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;EquivocationProof&lt;T::Hash, T::BlockNumber&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::KeyOwnerProof: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::KeyOwnerProof: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_randomness_collective_flip"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_session"] = [{"text":"impl Encode for Event","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Keys: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Keys: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_timestamp"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Moment: HasCompact,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_transaction_payment"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait + Send + Sync&gt; Encode for ChargeTransactionPayment&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Balance: HasCompact,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_transaction_payment_rpc_runtime_api"] = [{"text":"impl&lt;Balance&gt; Encode for RuntimeDispatchInfo&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["primitive_types"] = [{"text":"impl Encode for U128","synthetic":false,"types":[]},{"text":"impl Encode for U256","synthetic":false,"types":[]},{"text":"impl Encode for U512","synthetic":false,"types":[]},{"text":"impl Encode for H128","synthetic":false,"types":[]},{"text":"impl Encode for H160","synthetic":false,"types":[]},{"text":"impl Encode for H256","synthetic":false,"types":[]},{"text":"impl Encode for H512","synthetic":false,"types":[]}];
implementors["sc_consensus_slots"] = [{"text":"impl&lt;T&gt; Encode for SlotDuration&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sc_finality_grandpa"] = [{"text":"impl&lt;Header:&nbsp;HeaderT&gt; Encode for FinalityProofFragment&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Header&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Header&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Block:&nbsp;BlockT&gt; Encode for GrandpaJustification&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Commit&lt;Block&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Commit&lt;Block&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Block::Header&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Block::Header&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sp_api"] = [{"text":"impl Encode for OldRuntimeVersion","synthetic":false,"types":[]}];
implementors["sp_application_crypto"] = [{"text":"impl Encode for Public","synthetic":false,"types":[]},{"text":"impl Encode for Signature","synthetic":false,"types":[]},{"text":"impl Encode for Public","synthetic":false,"types":[]},{"text":"impl Encode for Signature","synthetic":false,"types":[]},{"text":"impl Encode for Public","synthetic":false,"types":[]},{"text":"impl Encode for Signature","synthetic":false,"types":[]}];
implementors["sp_arithmetic"] = [{"text":"impl Encode for Percent","synthetic":false,"types":[]},{"text":"impl Encode for PerU16","synthetic":false,"types":[]},{"text":"impl Encode for Permill","synthetic":false,"types":[]},{"text":"impl Encode for Perbill","synthetic":false,"types":[]},{"text":"impl Encode for Perquintill","synthetic":false,"types":[]},{"text":"impl Encode for FixedI64","synthetic":false,"types":[]},{"text":"impl Encode for FixedI128","synthetic":false,"types":[]},{"text":"impl Encode for FixedU128","synthetic":false,"types":[]}];
implementors["sp_authorship"] = [{"text":"impl Encode for InherentError","synthetic":false,"types":[]}];
implementors["sp_consensus_aura"] = [{"text":"impl&lt;AuthorityId:&nbsp;Codec&gt; Encode for ConsensusLog&lt;AuthorityId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AuthorityId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AuthorityId&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sp_consensus_slots"] = [{"text":"impl&lt;Header, Id&gt; Encode for EquivocationProof&lt;Header, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sp_core"] = [{"text":"impl Encode for DeriveJunction","synthetic":false,"types":[]},{"text":"impl Encode for AccountId32","synthetic":false,"types":[]},{"text":"impl Encode for KeyTypeId","synthetic":false,"types":[]},{"text":"impl Encode for CryptoTypeId","synthetic":false,"types":[]},{"text":"impl Encode for CryptoTypePublicPair","synthetic":false,"types":[]},{"text":"impl Encode for Public","synthetic":false,"types":[]},{"text":"impl Encode for Signature","synthetic":false,"types":[]},{"text":"impl Encode for LocalizedSignature","synthetic":false,"types":[]},{"text":"impl Encode for Public","synthetic":false,"types":[]},{"text":"impl Encode for Signature","synthetic":false,"types":[]},{"text":"impl Encode for Public","synthetic":false,"types":[]},{"text":"impl Encode for Signature","synthetic":false,"types":[]},{"text":"impl Encode for StorageKind","synthetic":false,"types":[]},{"text":"impl Encode for HttpRequestId","synthetic":false,"types":[]},{"text":"impl Encode for HttpError","synthetic":false,"types":[]},{"text":"impl Encode for HttpRequestStatus","synthetic":false,"types":[]},{"text":"impl Encode for OpaqueNetworkState","synthetic":false,"types":[]},{"text":"impl Encode for OpaqueMultiaddr","synthetic":false,"types":[]},{"text":"impl Encode for Timestamp","synthetic":false,"types":[]},{"text":"impl Encode for Duration","synthetic":false,"types":[]},{"text":"impl Encode for HostError","synthetic":false,"types":[]},{"text":"impl Encode for ExternEntity","synthetic":false,"types":[]},{"text":"impl Encode for Entry","synthetic":false,"types":[]},{"text":"impl Encode for EnvironmentDefinition","synthetic":false,"types":[]},{"text":"impl Encode for ChangesTrieConfiguration","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Encode for VRFTranscriptValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Encode for VRFTranscriptData&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Encode for OpaqueMetadata","synthetic":false,"types":[]},{"text":"impl Encode for OpaquePeerId","synthetic":false,"types":[]},{"text":"impl Encode for NeverNativeValue","synthetic":false,"types":[]},{"text":"impl Encode for LogLevel","synthetic":false,"types":[]},{"text":"impl Encode for Void","synthetic":false,"types":[]}];
implementors["sp_finality_grandpa"] = [{"text":"impl&lt;N&gt; Encode for ScheduledChange&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Codec&gt; Encode for ConsensusLog&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ScheduledChange&lt;N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;ScheduledChange&lt;N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;ScheduledChange&lt;N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;ScheduledChange&lt;N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N&gt; Encode for EquivocationProof&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Equivocation&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Equivocation&lt;H, N&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N&gt; Encode for Equivocation&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Equivocation&lt;AuthorityId, Prevote&lt;H, N&gt;, AuthoritySignature&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Equivocation&lt;AuthorityId, Prevote&lt;H, N&gt;, AuthoritySignature&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Equivocation&lt;AuthorityId, Precommit&lt;H, N&gt;, AuthoritySignature&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Equivocation&lt;AuthorityId, Precommit&lt;H, N&gt;, AuthoritySignature&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Encode for VersionedAuthorityList&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Encode for OpaqueKeyOwnershipProof","synthetic":false,"types":[]}];
implementors["sp_inherents"] = [{"text":"impl Encode for Error","synthetic":false,"types":[]},{"text":"impl Encode for InherentData","synthetic":false,"types":[]},{"text":"impl Encode for CheckInherentsResult","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Encode&gt; Encode for MakeFatalError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sp_io"] = [{"text":"impl Encode for EcdsaVerifyError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Encode + Decode&gt; Encode for Crossing&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sp_runtime"] = [{"text":"impl&lt;Call, Extra&gt; Encode for SignedPayload&lt;Call, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: SignedExtension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Address, Call, Signature, Extra&gt; Encode for UncheckedExtrinsic&lt;Address, Call, Signature, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Address: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Signature: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: SignedExtension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for Era","synthetic":false,"types":[]},{"text":"impl&lt;Number, Hash&gt; Encode for Header&lt;Number, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: HasCompact + Copy + Into&lt;U256&gt; + TryFrom&lt;U256&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: HashT,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash::Output: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Header, Extrinsic:&nbsp;MaybeSerialize&gt; Encode for Block&lt;Header, Extrinsic&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Extrinsic&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Extrinsic&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Block&gt; Encode for SignedBlock&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Hash&gt; Encode for Digest&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;DigestItem&lt;Hash&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;DigestItem&lt;Hash&gt;&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for ChangesTrieSignal","synthetic":false,"types":[]},{"text":"impl&lt;Hash:&nbsp;Encode&gt; Encode for DigestItem&lt;Hash&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, Hash:&nbsp;Encode&gt; Encode for DigestItemRef&lt;'a, Hash&gt;","synthetic":false,"types":[]},{"text":"impl Encode for Time","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;BlockNumberProvider&gt; Encode for BlockAndTimeDeadline&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as BlockNumberProvider&gt;::BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as BlockNumberProvider&gt;::BlockNumber: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for UintAuthorityId","synthetic":false,"types":[]},{"text":"impl Encode for TestSignature","synthetic":false,"types":[]},{"text":"impl&lt;Xt&gt; Encode for ExtrinsicWrapper&lt;Xt&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Xt: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Xt: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Xt&gt; Encode for Block&lt;Xt&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Xt&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Xt&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Call, Extra&gt; Encode for TestXt&lt;Call, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;(u64, Extra)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;(u64, Extra)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for BadOrigin","synthetic":false,"types":[]},{"text":"impl Encode for LookupError","synthetic":false,"types":[]},{"text":"impl Encode for InvalidTransaction","synthetic":false,"types":[]},{"text":"impl Encode for UnknownTransaction","synthetic":false,"types":[]},{"text":"impl Encode for TransactionValidityError","synthetic":false,"types":[]},{"text":"impl Encode for TransactionSource","synthetic":false,"types":[]},{"text":"impl Encode for ValidTransaction","synthetic":false,"types":[]},{"text":"impl&lt;Hashing:&nbsp;Hash&gt; Encode for RandomNumberGenerator&lt;Hashing&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hashing::Output: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hashing::Output: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for RuntimeString","synthetic":false,"types":[]},{"text":"impl Encode for ModuleId","synthetic":false,"types":[]},{"text":"impl Encode for MultiSignature","synthetic":false,"types":[]},{"text":"impl Encode for MultiSigner","synthetic":false,"types":[]},{"text":"impl Encode for AnySignature","synthetic":false,"types":[]},{"text":"impl Encode for DispatchError","synthetic":false,"types":[]},{"text":"impl&lt;Info&gt; Encode for DispatchErrorWithPostInfo&lt;Info&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Info: Eq + PartialEq + Clone + Copy + Encode + Decode + Printable,<br>&nbsp;&nbsp;&nbsp;&nbsp;Info: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Info: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for OpaqueExtrinsic","synthetic":false,"types":[]}];
implementors["sp_session"] = [{"text":"impl Encode for MembershipProof","synthetic":false,"types":[]}];
implementors["sp_staking"] = [{"text":"impl&lt;Reporter, Offender&gt; Encode for OffenceDetails&lt;Reporter, Offender&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offender: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offender: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Reporter&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Reporter&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sp_storage"] = [{"text":"impl Encode for TrackedStorageKey","synthetic":false,"types":[]}];
implementors["sp_timestamp"] = [{"text":"impl Encode for InherentError","synthetic":false,"types":[]}];
implementors["sp_tracing"] = [{"text":"impl Encode for WasmLevel","synthetic":false,"types":[]},{"text":"impl Encode for WasmValue","synthetic":false,"types":[]},{"text":"impl Encode for WasmFieldName","synthetic":false,"types":[]},{"text":"impl Encode for WasmFields","synthetic":false,"types":[]},{"text":"impl Encode for WasmValuesSet","synthetic":false,"types":[]},{"text":"impl Encode for WasmMetadata","synthetic":false,"types":[]},{"text":"impl Encode for WasmEntryAttributes","synthetic":false,"types":[]}];
implementors["sp_trie"] = [{"text":"impl Encode for StorageProof","synthetic":false,"types":[]}];
implementors["sp_version"] = [{"text":"impl Encode for RuntimeVersion","synthetic":false,"types":[]}];
implementors["sp_wasm_interface"] = [{"text":"impl Encode for Value","synthetic":false,"types":[]},{"text":"impl Encode for ReturnValue","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()