(function() {var implementors = {};
implementors["finality_grandpa"] = [{"text":"impl&lt;H, N&gt; EncodeLike&lt;State&lt;H, N&gt;&gt; for State&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;(H, N)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;(H, N)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;(H, N)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;(H, N)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;(H, N)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;(H, N)&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N&gt; EncodeLike&lt;Prevote&lt;H, N&gt;&gt; for Prevote&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N&gt; EncodeLike&lt;Precommit&lt;H, N&gt;&gt; for Precommit&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N&gt; EncodeLike&lt;PrimaryPropose&lt;H, N&gt;&gt; for PrimaryPropose&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Id, V, S&gt; EncodeLike&lt;Equivocation&lt;Id, V, S&gt;&gt; for Equivocation&lt;Id, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;(V, S): Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;(V, S): Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N&gt; EncodeLike&lt;Message&lt;H, N&gt;&gt; for Message&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Prevote&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Prevote&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Precommit&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Precommit&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PrimaryPropose&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PrimaryPropose&lt;H, N&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; EncodeLike&lt;SignedMessage&lt;H, N, S, Id&gt;&gt; for SignedMessage&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Message&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Message&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; EncodeLike&lt;Commit&lt;H, N, S, Id&gt;&gt; for Commit&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;SignedPrecommit&lt;H, N, S, Id&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;SignedPrecommit&lt;H, N, S, Id&gt;&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; EncodeLike&lt;SignedPrevote&lt;H, N, S, Id&gt;&gt; for SignedPrevote&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Prevote&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Prevote&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; EncodeLike&lt;SignedPrecommit&lt;H, N, S, Id&gt;&gt; for SignedPrecommit&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Precommit&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Precommit&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; EncodeLike&lt;CompactCommit&lt;H, N, S, Id&gt;&gt; for CompactCommit&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Precommit&lt;H, N&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Precommit&lt;H, N&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;MultiAuthData&lt;S, Id&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;MultiAuthData&lt;S, Id&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; EncodeLike&lt;CatchUp&lt;H, N, S, Id&gt;&gt; for CatchUp&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;SignedPrevote&lt;H, N, S, Id&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;SignedPrevote&lt;H, N, S, Id&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;SignedPrecommit&lt;H, N, S, Id&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;SignedPrecommit&lt;H, N, S, Id&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; EncodeLike&lt;HistoricalVotes&lt;H, N, S, Id&gt;&gt; for HistoricalVotes&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;SignedMessage&lt;H, N, S, Id&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;SignedMessage&lt;H, N, S, Id&gt;&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["fork_tree"] = [{"text":"impl&lt;H, N, V&gt; EncodeLike&lt;ForkTree&lt;H, N, V&gt;&gt; for ForkTree&lt;H, N, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Node&lt;H, N, V&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Node&lt;H, N, V&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;N&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["frame_benchmarking"] = [{"text":"impl EncodeLike&lt;BenchmarkParameter&gt; for BenchmarkParameter","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;BenchmarkBatch&gt; for BenchmarkBatch","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;BenchmarkResults&gt; for BenchmarkResults","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;BenchmarkConfig&gt; for BenchmarkConfig","synthetic":false,"types":[]}];
implementors["frame_metadata"] = [{"text":"impl&lt;B, O&gt; EncodeLike&lt;DecodeDifferent&lt;B, O&gt;&gt; for DecodeDifferent&lt;B, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Encode + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Encode + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;FunctionMetadata&gt; for FunctionMetadata","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;FunctionArgumentMetadata&gt; for FunctionArgumentMetadata","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Encode&gt; EncodeLike&lt;FnEncode&lt;E&gt;&gt; for FnEncode&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;OuterEventMetadata&gt; for OuterEventMetadata","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;EventMetadata&gt; for EventMetadata","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;StorageEntryMetadata&gt; for StorageEntryMetadata","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;ModuleConstantMetadata&gt; for ModuleConstantMetadata","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;ErrorMetadata&gt; for ErrorMetadata","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;DefaultByteGetter&gt; for DefaultByteGetter","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;StorageHasher&gt; for StorageHasher","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;StorageEntryType&gt; for StorageEntryType","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;StorageEntryModifier&gt; for StorageEntryModifier","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;StorageMetadata&gt; for StorageMetadata","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;RuntimeMetadataPrefixed&gt; for RuntimeMetadataPrefixed","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;ExtrinsicMetadata&gt; for ExtrinsicMetadata","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;RuntimeMetadata&gt; for RuntimeMetadata","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;RuntimeMetadataDeprecated&gt; for RuntimeMetadataDeprecated","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;RuntimeMetadataV12&gt; for RuntimeMetadataV12","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;ModuleMetadata&gt; for ModuleMetadata","synthetic":false,"types":[]}];
implementors["frame_system"] = [{"text":"impl&lt;T:&nbsp;Trait + Send + Sync&gt; EncodeLike&lt;CheckGenesis&lt;T&gt;&gt; for CheckGenesis&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait + Send + Sync&gt; EncodeLike&lt;CheckMortality&lt;T&gt;&gt; for CheckMortality&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; EncodeLike&lt;CheckNonce&lt;T&gt;&gt; for CheckNonce&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Index: HasCompact,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait + Send + Sync&gt; EncodeLike&lt;CheckSpecVersion&lt;T&gt;&gt; for CheckSpecVersion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait + Send + Sync&gt; EncodeLike&lt;CheckTxVersion&lt;T&gt;&gt; for CheckTxVersion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait + Send + Sync&gt; EncodeLike&lt;CheckWeight&lt;T&gt;&gt; for CheckWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PhantomData&lt;T&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Phase&gt; for Phase","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Parameter + Member, T&gt; EncodeLike&lt;EventRecord&lt;E, T&gt;&gt; for EventRecord&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; EncodeLike&lt;RawOrigin&lt;AccountId&gt;&gt; for RawOrigin&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Index, AccountData&gt; EncodeLike&lt;AccountInfo&lt;Index, AccountData&gt;&gt; for AccountInfo&lt;Index, AccountData&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Index: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Index: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountData: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountData: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;LastRuntimeUpgradeInfo&gt; for LastRuntimeUpgradeInfo","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; EncodeLike&lt;RawEvent&lt;AccountId&gt;&gt; for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; EncodeLike&lt;Call&lt;T&gt;&gt; for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["governance_os_pallet_bylaws"] = [{"text":"impl&lt;AccountId, Role&gt; EncodeLike&lt;RawEvent&lt;AccountId, Role&gt;&gt; for RawEvent&lt;AccountId, Role&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Role: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Role: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Role: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Role: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; EncodeLike&lt;Call&lt;T&gt;&gt; for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;&lt;T::Lookup as StaticLookup&gt;::Source&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;&lt;T::Lookup as StaticLookup&gt;::Source&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Role: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Role: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;&lt;T::Lookup as StaticLookup&gt;::Source&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;&lt;T::Lookup as StaticLookup&gt;::Source&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Role: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Role: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["governance_os_pallet_compat"] = [{"text":"impl EncodeLike&lt;Event&gt; for Event","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; EncodeLike&lt;Call&lt;T&gt;&gt; for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["governance_os_pallet_tokens"] = [{"text":"impl&lt;Balance&gt; EncodeLike&lt;AccountCurrencyData&lt;Balance&gt;&gt; for AccountCurrencyData&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; EncodeLike&lt;CurrencyDetails&lt;AccountId&gt;&gt; for CurrencyDetails&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance, CurrencyId, CurrencyDetails&gt; EncodeLike&lt;RawEvent&lt;AccountId, Balance, CurrencyId, CurrencyDetails&gt;&gt; for RawEvent&lt;AccountId, Balance, CurrencyId, CurrencyDetails&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyDetails: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyDetails: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyDetails: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyDetails: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; EncodeLike&lt;Call&lt;T&gt;&gt; for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyDetails&lt;T::AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyDetails&lt;T::AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::CurrencyId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Balance: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["governance_os_primitives"] = [{"text":"impl EncodeLike&lt;CurrencyId&gt; for CurrencyId","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Role&gt; for Role","synthetic":false,"types":[]}];
implementors["governance_os_runtime"] = [{"text":"impl EncodeLike&lt;SessionKeys&gt; for SessionKeys","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Event&gt; for Event","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;OriginCaller&gt; for OriginCaller","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Call&gt; for Call","synthetic":false,"types":[]}];
implementors["pallet_aura"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; EncodeLike&lt;Call&lt;T&gt;&gt; for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_authorship"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; EncodeLike&lt;Call&lt;T&gt;&gt; for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::Header&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::Header&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_finality_tracker"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; EncodeLike&lt;Call&lt;T&gt;&gt; for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: HasCompact,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_grandpa"] = [{"text":"impl EncodeLike&lt;GrandpaTimeSlot&gt; for GrandpaTimeSlot","synthetic":false,"types":[]},{"text":"impl&lt;N&gt; EncodeLike&lt;OldStoredPendingChange&lt;N&gt;&gt; for OldStoredPendingChange&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N&gt; EncodeLike&lt;StoredPendingChange&lt;N&gt;&gt; for StoredPendingChange&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;N&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N&gt; EncodeLike&lt;StoredState&lt;N&gt;&gt; for StoredState&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Event&gt; for Event","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; EncodeLike&lt;Call&lt;T&gt;&gt; for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;EquivocationProof&lt;T::Hash, T::BlockNumber&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;EquivocationProof&lt;T::Hash, T::BlockNumber&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::KeyOwnerProof: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::KeyOwnerProof: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;EquivocationProof&lt;T::Hash, T::BlockNumber&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;EquivocationProof&lt;T::Hash, T::BlockNumber&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::KeyOwnerProof: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::KeyOwnerProof: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_randomness_collective_flip"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; EncodeLike&lt;Call&lt;T&gt;&gt; for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_session"] = [{"text":"impl EncodeLike&lt;Event&gt; for Event","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; EncodeLike&lt;Call&lt;T&gt;&gt; for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Keys: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Keys: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_timestamp"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; EncodeLike&lt;Call&lt;T&gt;&gt; for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Moment: HasCompact,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_transaction_payment"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; EncodeLike&lt;Call&lt;T&gt;&gt; for Call&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait + Send + Sync&gt; EncodeLike&lt;ChargeTransactionPayment&lt;T&gt;&gt; for ChargeTransactionPayment&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Balance: HasCompact,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_transaction_payment_rpc_runtime_api"] = [{"text":"impl&lt;Balance&gt; EncodeLike&lt;RuntimeDispatchInfo&lt;Balance&gt;&gt; for RuntimeDispatchInfo&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["primitive_types"] = [{"text":"impl EncodeLike&lt;U128&gt; for U128","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;U256&gt; for U256","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;U512&gt; for U512","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;H160&gt; for H160","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;H256&gt; for H256","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;H512&gt; for H512","synthetic":false,"types":[]}];
implementors["sc_consensus_slots"] = [{"text":"impl&lt;T&gt; EncodeLike&lt;SlotDuration&lt;T&gt;&gt; for SlotDuration&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sc_finality_grandpa"] = [{"text":"impl&lt;Header:&nbsp;HeaderT&gt; EncodeLike&lt;FinalityProofFragment&lt;Header&gt;&gt; for FinalityProofFragment&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Header&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Header&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Block:&nbsp;BlockT&gt; EncodeLike&lt;GrandpaJustification&lt;Block&gt;&gt; for GrandpaJustification&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Commit&lt;Block&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Commit&lt;Block&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Block::Header&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Block::Header&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sp_api"] = [{"text":"impl EncodeLike&lt;OldRuntimeVersion&gt; for OldRuntimeVersion","synthetic":false,"types":[]}];
implementors["sp_application_crypto"] = [{"text":"impl EncodeLike&lt;Public&gt; for Public","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Signature&gt; for Signature","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Public&gt; for Public","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Signature&gt; for Signature","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Public&gt; for Public","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Signature&gt; for Signature","synthetic":false,"types":[]}];
implementors["sp_arithmetic"] = [{"text":"impl EncodeLike&lt;Percent&gt; for Percent","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;PerU16&gt; for PerU16","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Permill&gt; for Permill","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Perbill&gt; for Perbill","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Perquintill&gt; for Perquintill","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;FixedI64&gt; for FixedI64","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;FixedI128&gt; for FixedI128","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;FixedU128&gt; for FixedU128","synthetic":false,"types":[]}];
implementors["sp_authorship"] = [{"text":"impl EncodeLike&lt;InherentError&gt; for InherentError","synthetic":false,"types":[]}];
implementors["sp_consensus_aura"] = [{"text":"impl&lt;AuthorityId:&nbsp;Codec&gt; EncodeLike&lt;ConsensusLog&lt;AuthorityId&gt;&gt; for ConsensusLog&lt;AuthorityId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AuthorityId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AuthorityId&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sp_consensus_slots"] = [{"text":"impl&lt;Header, Id&gt; EncodeLike&lt;EquivocationProof&lt;Header, Id&gt;&gt; for EquivocationProof&lt;Header, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sp_core"] = [{"text":"impl EncodeLike&lt;DeriveJunction&gt; for DeriveJunction","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;AccountId32&gt; for AccountId32","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;KeyTypeId&gt; for KeyTypeId","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;CryptoTypeId&gt; for CryptoTypeId","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;CryptoTypePublicPair&gt; for CryptoTypePublicPair","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Public&gt; for Public","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Signature&gt; for Signature","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;LocalizedSignature&gt; for LocalizedSignature","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Public&gt; for Public","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Signature&gt; for Signature","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Public&gt; for Public","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Signature&gt; for Signature","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;StorageKind&gt; for StorageKind","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;HttpRequestId&gt; for HttpRequestId","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;HttpError&gt; for HttpError","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;HttpRequestStatus&gt; for HttpRequestStatus","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;OpaqueNetworkState&gt; for OpaqueNetworkState","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;OpaqueMultiaddr&gt; for OpaqueMultiaddr","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Timestamp&gt; for Timestamp","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Duration&gt; for Duration","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;HostError&gt; for HostError","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;ExternEntity&gt; for ExternEntity","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Entry&gt; for Entry","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;EnvironmentDefinition&gt; for EnvironmentDefinition","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;ChangesTrieConfiguration&gt; for ChangesTrieConfiguration","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; EncodeLike&lt;VRFTranscriptValue&lt;'a&gt;&gt; for VRFTranscriptValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; EncodeLike&lt;VRFTranscriptData&lt;'a&gt;&gt; for VRFTranscriptData&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;OpaqueMetadata&gt; for OpaqueMetadata","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;OpaquePeerId&gt; for OpaquePeerId","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;NeverNativeValue&gt; for NeverNativeValue","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;LogLevel&gt; for LogLevel","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Void&gt; for Void","synthetic":false,"types":[]}];
implementors["sp_finality_grandpa"] = [{"text":"impl&lt;N&gt; EncodeLike&lt;ScheduledChange&lt;N&gt;&gt; for ScheduledChange&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Codec&gt; EncodeLike&lt;ConsensusLog&lt;N&gt;&gt; for ConsensusLog&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ScheduledChange&lt;N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;ScheduledChange&lt;N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;ScheduledChange&lt;N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;ScheduledChange&lt;N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N&gt; EncodeLike&lt;EquivocationProof&lt;H, N&gt;&gt; for EquivocationProof&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Equivocation&lt;H, N&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Equivocation&lt;H, N&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H, N&gt; EncodeLike&lt;Equivocation&lt;H, N&gt;&gt; for Equivocation&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Equivocation&lt;AuthorityId, Prevote&lt;H, N&gt;, AuthoritySignature&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Equivocation&lt;AuthorityId, Prevote&lt;H, N&gt;, AuthoritySignature&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Equivocation&lt;AuthorityId, Precommit&lt;H, N&gt;, AuthoritySignature&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Equivocation&lt;AuthorityId, Precommit&lt;H, N&gt;, AuthoritySignature&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;OpaqueKeyOwnershipProof&gt; for OpaqueKeyOwnershipProof","synthetic":false,"types":[]}];
implementors["sp_inherents"] = [{"text":"impl EncodeLike&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;InherentData&gt; for InherentData","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;CheckInherentsResult&gt; for CheckInherentsResult","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Encode&gt; EncodeLike&lt;MakeFatalError&lt;E&gt;&gt; for MakeFatalError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sp_io"] = [{"text":"impl EncodeLike&lt;EcdsaVerifyError&gt; for EcdsaVerifyError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Encode + Decode&gt; EncodeLike&lt;Crossing&lt;T&gt;&gt; for Crossing&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sp_runtime"] = [{"text":"impl&lt;Call, Extra&gt; EncodeLike&lt;SignedPayload&lt;Call, Extra&gt;&gt; for SignedPayload&lt;Call, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: SignedExtension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Address, Call, Signature, Extra&gt; EncodeLike&lt;UncheckedExtrinsic&lt;Address, Call, Signature, Extra&gt;&gt; for UncheckedExtrinsic&lt;Address, Call, Signature, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Address: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Signature: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: SignedExtension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Era&gt; for Era","synthetic":false,"types":[]},{"text":"impl&lt;Number, Hash&gt; EncodeLike&lt;Header&lt;Number, Hash&gt;&gt; for Header&lt;Number, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: HasCompact + Copy + Into&lt;U256&gt; + TryFrom&lt;U256&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: HashT,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash::Output: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Header, Extrinsic:&nbsp;MaybeSerialize&gt; EncodeLike&lt;Block&lt;Header, Extrinsic&gt;&gt; for Block&lt;Header, Extrinsic&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Extrinsic&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Extrinsic&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Block&gt; EncodeLike&lt;SignedBlock&lt;Block&gt;&gt; for SignedBlock&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Hash&gt; EncodeLike&lt;Digest&lt;Hash&gt;&gt; for Digest&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;DigestItem&lt;Hash&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;DigestItem&lt;Hash&gt;&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;ChangesTrieSignal&gt; for ChangesTrieSignal","synthetic":false,"types":[]},{"text":"impl&lt;Hash:&nbsp;Encode&gt; EncodeLike&lt;DigestItem&lt;Hash&gt;&gt; for DigestItem&lt;Hash&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, Hash:&nbsp;Encode&gt; EncodeLike&lt;DigestItemRef&lt;'a, Hash&gt;&gt; for DigestItemRef&lt;'a, Hash&gt;","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;Time&gt; for Time","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;BlockNumberProvider&gt; EncodeLike&lt;BlockAndTimeDeadline&lt;B&gt;&gt; for BlockAndTimeDeadline&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as BlockNumberProvider&gt;::BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as BlockNumberProvider&gt;::BlockNumber: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;UintAuthorityId&gt; for UintAuthorityId","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;TestSignature&gt; for TestSignature","synthetic":false,"types":[]},{"text":"impl&lt;Xt&gt; EncodeLike&lt;ExtrinsicWrapper&lt;Xt&gt;&gt; for ExtrinsicWrapper&lt;Xt&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Xt: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Xt: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Xt&gt; EncodeLike&lt;Block&lt;Xt&gt;&gt; for Block&lt;Xt&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Xt&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Xt&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Call, Extra&gt; EncodeLike&lt;TestXt&lt;Call, Extra&gt;&gt; for TestXt&lt;Call, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;(u64, Extra)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;(u64, Extra)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;BadOrigin&gt; for BadOrigin","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;LookupError&gt; for LookupError","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;InvalidTransaction&gt; for InvalidTransaction","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;UnknownTransaction&gt; for UnknownTransaction","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;TransactionValidityError&gt; for TransactionValidityError","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;TransactionSource&gt; for TransactionSource","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;ValidTransaction&gt; for ValidTransaction","synthetic":false,"types":[]},{"text":"impl&lt;Hashing:&nbsp;Hash&gt; EncodeLike&lt;RandomNumberGenerator&lt;Hashing&gt;&gt; for RandomNumberGenerator&lt;Hashing&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hashing::Output: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hashing::Output: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;ModuleId&gt; for ModuleId","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;MultiSignature&gt; for MultiSignature","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;MultiSigner&gt; for MultiSigner","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;AnySignature&gt; for AnySignature","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;DispatchError&gt; for DispatchError","synthetic":false,"types":[]},{"text":"impl&lt;Info&gt; EncodeLike&lt;DispatchErrorWithPostInfo&lt;Info&gt;&gt; for DispatchErrorWithPostInfo&lt;Info&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Info: Eq + PartialEq + Clone + Copy + Encode + Decode + Printable,<br>&nbsp;&nbsp;&nbsp;&nbsp;Info: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Info: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;OpaqueExtrinsic&gt; for OpaqueExtrinsic","synthetic":false,"types":[]}];
implementors["sp_session"] = [{"text":"impl EncodeLike&lt;MembershipProof&gt; for MembershipProof","synthetic":false,"types":[]}];
implementors["sp_staking"] = [{"text":"impl&lt;Reporter, Offender&gt; EncodeLike&lt;OffenceDetails&lt;Reporter, Offender&gt;&gt; for OffenceDetails&lt;Reporter, Offender&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offender: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offender: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Reporter&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Reporter&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sp_storage"] = [{"text":"impl EncodeLike&lt;TrackedStorageKey&gt; for TrackedStorageKey","synthetic":false,"types":[]}];
implementors["sp_timestamp"] = [{"text":"impl EncodeLike&lt;InherentError&gt; for InherentError","synthetic":false,"types":[]}];
implementors["sp_tracing"] = [{"text":"impl EncodeLike&lt;WasmLevel&gt; for WasmLevel","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;WasmValue&gt; for WasmValue","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;WasmFieldName&gt; for WasmFieldName","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;WasmFields&gt; for WasmFields","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;WasmValuesSet&gt; for WasmValuesSet","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;WasmMetadata&gt; for WasmMetadata","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;WasmEntryAttributes&gt; for WasmEntryAttributes","synthetic":false,"types":[]}];
implementors["sp_trie"] = [{"text":"impl EncodeLike&lt;StorageProof&gt; for StorageProof","synthetic":false,"types":[]}];
implementors["sp_version"] = [{"text":"impl EncodeLike&lt;RuntimeVersion&gt; for RuntimeVersion","synthetic":false,"types":[]}];
implementors["sp_wasm_interface"] = [{"text":"impl EncodeLike&lt;Value&gt; for Value","synthetic":false,"types":[]},{"text":"impl EncodeLike&lt;ReturnValue&gt; for ReturnValue","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()