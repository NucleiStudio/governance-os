(function() {var implementors = {};
implementors["adler"] = [{"text":"impl Clone for Adler32","synthetic":false,"types":[]}];
implementors["aead"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["aes_gcm"] = [{"text":"impl&lt;Aes:&nbsp;Clone, NonceSize:&nbsp;Clone&gt; Clone for AesGcm&lt;Aes, NonceSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Aes: BlockCipher&lt;BlockSize = U16&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Aes::ParBlocks: ArrayLength&lt;Block&lt;Aes&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;NonceSize: ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["aes_soft"] = [{"text":"impl Clone for Aes128","synthetic":false,"types":[]},{"text":"impl Clone for Aes192","synthetic":false,"types":[]},{"text":"impl Clone for Aes256","synthetic":false,"types":[]}];
implementors["ahash"] = [{"text":"impl Clone for AHasher","synthetic":false,"types":[]},{"text":"impl Clone for ABuildHasher","synthetic":false,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S:&nbsp;Clone + StateID&gt; Clone for AhoCorasick&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for AhoCorasickBuilder","synthetic":false,"types":[]},{"text":"impl Clone for MatchKind","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for MatchKind","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for Searcher","synthetic":false,"types":[]},{"text":"impl Clone for Match","synthetic":false,"types":[]}];
implementors["alga"] = [{"text":"impl&lt;O:&nbsp;Operator&gt; Clone for Id&lt;O&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Additive","synthetic":false,"types":[]},{"text":"impl Clone for Multiplicative","synthetic":false,"types":[]}];
implementors["ansi_term"] = [{"text":"impl Clone for Prefix","synthetic":false,"types":[]},{"text":"impl Clone for Infix","synthetic":false,"types":[]},{"text":"impl Clone for Suffix","synthetic":false,"types":[]},{"text":"impl Clone for Style","synthetic":false,"types":[]},{"text":"impl Clone for Colour","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;'a + ToOwned + ?Sized&gt; Clone for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["anyhow"] = [{"text":"impl&lt;'a&gt; Clone for Chain&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["arc_swap"] = [{"text":"impl&lt;G:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for MapGuard&lt;G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Map&lt;A, T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for ConstantDeref&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Constant&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for Cache&lt;A, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapCache&lt;A, T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;RefCnt, S:&nbsp;LockStorage&gt; Clone for ArcSwapAny&lt;T, S&gt;","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A:&nbsp;Array&lt;Item = u8&gt; + Copy&gt; Clone for ArrayString&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for CapacityError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Clone for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Clone for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["asn1_der"] = [{"text":"impl Clone for DerTag","synthetic":false,"types":[]},{"text":"impl Clone for DerLength","synthetic":false,"types":[]},{"text":"impl Clone for DerValue","synthetic":false,"types":[]},{"text":"impl Clone for DerObject","synthetic":false,"types":[]},{"text":"impl Clone for Asn1DerError","synthetic":false,"types":[]}];
implementors["async_channel"] = [{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RecvError","synthetic":false,"types":[]},{"text":"impl Clone for TryRecvError","synthetic":false,"types":[]}];
implementors["async_std"] = [{"text":"impl Clone for Task","synthetic":false,"types":[]},{"text":"impl Clone for TaskId","synthetic":false,"types":[]},{"text":"impl Clone for AccessError","synthetic":false,"types":[]},{"text":"impl Clone for TimeoutError","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Fuse&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Take&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TimeoutError","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone&gt; Clone for FromFn&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for FromIter&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Once&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Repeat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone&gt; Clone for RepeatWith&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Cursor&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UnixStream","synthetic":false,"types":[]},{"text":"impl Clone for BarrierWaitResult","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for DirEntry","synthetic":false,"types":[]},{"text":"impl Clone for OpenOptions","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Ancestors&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Components&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Iter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for PathBuf","synthetic":false,"types":[]},{"text":"impl Clone for Box&lt;Path&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TcpStream","synthetic":false,"types":[]}];
implementors["async_tls"] = [{"text":"impl Clone for TlsAcceptor","synthetic":false,"types":[]},{"text":"impl Clone for TlsConnector","synthetic":false,"types":[]}];
implementors["atty"] = [{"text":"impl Clone for Stream","synthetic":false,"types":[]}];
implementors["backtrace"] = [{"text":"impl Clone for Frame","synthetic":false,"types":[]},{"text":"impl Clone for PrintFmt","synthetic":false,"types":[]},{"text":"impl Clone for Backtrace","synthetic":false,"types":[]},{"text":"impl Clone for BacktraceFrame","synthetic":false,"types":[]},{"text":"impl Clone for BacktraceSymbol","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl Clone for DecodeError","synthetic":false,"types":[]},{"text":"impl Clone for CharacterSet","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]}];
implementors["bincode"] = [{"text":"impl Clone for LittleEndian","synthetic":false,"types":[]},{"text":"impl Clone for BigEndian","synthetic":false,"types":[]},{"text":"impl Clone for NativeEndian","synthetic":false,"types":[]},{"text":"impl Clone for FixintEncoding","synthetic":false,"types":[]},{"text":"impl Clone for VarintEncoding","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for Bounded","synthetic":false,"types":[]},{"text":"impl Clone for Infinite","synthetic":false,"types":[]},{"text":"impl Clone for AllowTrailing","synthetic":false,"types":[]},{"text":"impl Clone for RejectTrailing","synthetic":false,"types":[]},{"text":"impl Clone for DefaultOptions","synthetic":false,"types":[]},{"text":"impl&lt;O:&nbsp;Clone + Options, L:&nbsp;Clone + SizeLimit&gt; Clone for WithOtherLimit&lt;O, L&gt;","synthetic":false,"types":[]},{"text":"impl&lt;O:&nbsp;Clone + Options, E:&nbsp;Clone + BincodeByteOrder&gt; Clone for WithOtherEndian&lt;O, E&gt;","synthetic":false,"types":[]}];
implementors["bip39"] = [{"text":"impl Clone for Mnemonic","synthetic":false,"types":[]},{"text":"impl Clone for MnemonicType","synthetic":false,"types":[]},{"text":"impl Clone for Language","synthetic":false,"types":[]},{"text":"impl Clone for Seed","synthetic":false,"types":[]}];
implementors["bitvec"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for BitIdx&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for BitPos&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for BitMask&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Msb0","synthetic":false,"types":[]},{"text":"impl Clone for Lsb0","synthetic":false,"types":[]},{"text":"impl&lt;'a, O:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for Iter&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, O:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for Chunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, O:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for ChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, O:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for RChunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, O:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for RChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, O:&nbsp;Clone, T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Split&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(usize, &amp;bool) -&gt; bool,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, O:&nbsp;Clone, T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for RSplit&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(usize, &amp;bool) -&gt; bool,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, O:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for Windows&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Clone for BitBox&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Clone for BitVec&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["blake2"] = [{"text":"impl Clone for VarBlake2b","synthetic":false,"types":[]},{"text":"impl Clone for Blake2b","synthetic":false,"types":[]},{"text":"impl Clone for VarBlake2s","synthetic":false,"types":[]},{"text":"impl Clone for Blake2s","synthetic":false,"types":[]}];
implementors["blake2_rfc"] = [{"text":"impl Clone for Blake2bResult","synthetic":false,"types":[]},{"text":"impl Clone for Blake2b","synthetic":false,"types":[]},{"text":"impl Clone for Blake2sResult","synthetic":false,"types":[]},{"text":"impl Clone for Blake2s","synthetic":false,"types":[]}];
implementors["blake2b_simd"] = [{"text":"impl Clone for Params","synthetic":false,"types":[]},{"text":"impl Clone for State","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for HashManyJob&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Params","synthetic":false,"types":[]},{"text":"impl Clone for State","synthetic":false,"types":[]},{"text":"impl Clone for Hash","synthetic":false,"types":[]}];
implementors["blake2s_simd"] = [{"text":"impl Clone for Params","synthetic":false,"types":[]},{"text":"impl Clone for State","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for HashManyJob&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Params","synthetic":false,"types":[]},{"text":"impl Clone for State","synthetic":false,"types":[]},{"text":"impl Clone for Hash","synthetic":false,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize:&nbsp;Clone + ArrayLength&lt;u8&gt;&gt; Clone for BlockBuffer&lt;BlockSize&gt;","synthetic":false,"types":[]}];
implementors["block_cipher"] = [{"text":"impl Clone for InvalidKeyLength","synthetic":false,"types":[]}];
implementors["block_padding"] = [{"text":"impl Clone for PadError","synthetic":false,"types":[]},{"text":"impl Clone for UnpadError","synthetic":false,"types":[]}];
implementors["bs58"] = [{"text":"impl Clone for Alphabet","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["bstr"] = [{"text":"impl Clone for BString","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Finder&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for FinderReverse&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Bytes&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Chars&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for CharIndices&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Utf8Chunks&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["byte_slice_cast"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Clone for BigEndian","synthetic":false,"types":[]},{"text":"impl Clone for LittleEndian","synthetic":false,"types":[]}];
implementors["bytes"] = [{"text":"impl Clone for Bytes","synthetic":false,"types":[]},{"text":"impl Clone for BytesMut","synthetic":false,"types":[]}];
implementors["cache_padded"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for CachePadded&lt;T&gt;","synthetic":false,"types":[]}];
implementors["chacha20poly1305"] = [{"text":"impl Clone for XChaCha20Poly1305","synthetic":false,"types":[]},{"text":"impl&lt;C&gt; Clone for ChaChaPoly1305&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: NewStreamCipher&lt;KeySize = U32, NonceSize = U12&gt; + SyncStreamCipher + SyncStreamCipherSeek,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LocalResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for FixedOffset","synthetic":false,"types":[]},{"text":"impl Clone for Local","synthetic":false,"types":[]},{"text":"impl Clone for Utc","synthetic":false,"types":[]},{"text":"impl Clone for NaiveDate","synthetic":false,"types":[]},{"text":"impl Clone for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl Clone for IsoWeek","synthetic":false,"types":[]},{"text":"impl Clone for NaiveTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;Clone + TimeZone&gt; Clone for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tz::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for SecondsFormat","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;Clone + TimeZone&gt; Clone for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tz::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Pad","synthetic":false,"types":[]},{"text":"impl Clone for Numeric","synthetic":false,"types":[]},{"text":"impl Clone for InternalNumeric","synthetic":false,"types":[]},{"text":"impl Clone for Fixed","synthetic":false,"types":[]},{"text":"impl Clone for InternalFixed","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Item&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ParseError","synthetic":false,"types":[]},{"text":"impl Clone for Parsed","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for StrftimeItems&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RoundingError","synthetic":false,"types":[]},{"text":"impl Clone for Weekday","synthetic":false,"types":[]},{"text":"impl Clone for ParseWeekdayError","synthetic":false,"types":[]},{"text":"impl Clone for Month","synthetic":false,"types":[]},{"text":"impl Clone for ParseMonthError","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl Clone for AppSettings","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Clone for App&lt;'a, 'b&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Clone for Arg&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ArgMatches&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Values&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for OsValues&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ArgGroup&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ArgSettings","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SubCommand&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Shell","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]}];
implementors["concurrent_queue"] = [{"text":"impl Clone for PopError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for PushError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["cranelift_bforest"] = [{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone&gt; Clone for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone&gt; Clone for Set&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Copy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["cranelift_codegen"] = [{"text":"impl Clone for Stackmap","synthetic":false,"types":[]},{"text":"impl Clone for Reloc","synthetic":false,"types":[]},{"text":"impl Clone for CursorPosition","synthetic":false,"types":[]},{"text":"impl Clone for ConstantData","synthetic":false,"types":[]},{"text":"impl Clone for ConstantPoolEntry","synthetic":false,"types":[]},{"text":"impl Clone for ConstantPool","synthetic":false,"types":[]},{"text":"impl Clone for DataFlowGraph","synthetic":false,"types":[]},{"text":"impl Clone for ValueDef","synthetic":false,"types":[]},{"text":"impl Clone for Block","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Inst","synthetic":false,"types":[]},{"text":"impl Clone for StackSlot","synthetic":false,"types":[]},{"text":"impl Clone for GlobalValue","synthetic":false,"types":[]},{"text":"impl Clone for Constant","synthetic":false,"types":[]},{"text":"impl Clone for Immediate","synthetic":false,"types":[]},{"text":"impl Clone for JumpTable","synthetic":false,"types":[]},{"text":"impl Clone for FuncRef","synthetic":false,"types":[]},{"text":"impl Clone for SigRef","synthetic":false,"types":[]},{"text":"impl Clone for Heap","synthetic":false,"types":[]},{"text":"impl Clone for Table","synthetic":false,"types":[]},{"text":"impl Clone for AnyEntity","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for AbiParam","synthetic":false,"types":[]},{"text":"impl Clone for ArgumentExtension","synthetic":false,"types":[]},{"text":"impl Clone for ArgumentPurpose","synthetic":false,"types":[]},{"text":"impl Clone for ExtFuncData","synthetic":false,"types":[]},{"text":"impl Clone for ExternalName","synthetic":false,"types":[]},{"text":"impl Clone for Function","synthetic":false,"types":[]},{"text":"impl Clone for GlobalValueData","synthetic":false,"types":[]},{"text":"impl Clone for HeapData","synthetic":false,"types":[]},{"text":"impl Clone for HeapStyle","synthetic":false,"types":[]},{"text":"impl Clone for Imm64","synthetic":false,"types":[]},{"text":"impl Clone for Uimm64","synthetic":false,"types":[]},{"text":"impl Clone for Uimm32","synthetic":false,"types":[]},{"text":"impl Clone for V128Imm","synthetic":false,"types":[]},{"text":"impl Clone for Offset32","synthetic":false,"types":[]},{"text":"impl Clone for Ieee32","synthetic":false,"types":[]},{"text":"impl Clone for Ieee64","synthetic":false,"types":[]},{"text":"impl Clone for InstructionFormat","synthetic":false,"types":[]},{"text":"impl Clone for InstructionData","synthetic":false,"types":[]},{"text":"impl Clone for Opcode","synthetic":false,"types":[]},{"text":"impl Clone for VariableArgs","synthetic":false,"types":[]},{"text":"impl Clone for OpcodeConstraints","synthetic":false,"types":[]},{"text":"impl Clone for ValueTypeSet","synthetic":false,"types":[]},{"text":"impl Clone for ResolvedConstraint","synthetic":false,"types":[]},{"text":"impl Clone for JumpTableData","synthetic":false,"types":[]},{"text":"impl Clone for Layout","synthetic":false,"types":[]},{"text":"impl Clone for LibCall","synthetic":false,"types":[]},{"text":"impl Clone for MemFlags","synthetic":false,"types":[]},{"text":"impl Clone for ProgramPoint","synthetic":false,"types":[]},{"text":"impl Clone for ExpandedProgramPoint","synthetic":false,"types":[]},{"text":"impl Clone for SourceLoc","synthetic":false,"types":[]},{"text":"impl Clone for StackSlotKind","synthetic":false,"types":[]},{"text":"impl Clone for StackSlotData","synthetic":false,"types":[]},{"text":"impl Clone for StackLayoutInfo","synthetic":false,"types":[]},{"text":"impl Clone for StackSlots","synthetic":false,"types":[]},{"text":"impl Clone for TableData","synthetic":false,"types":[]},{"text":"impl Clone for TrapCode","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for ValueLoc","synthetic":false,"types":[]},{"text":"impl Clone for ArgumentLoc","synthetic":false,"types":[]},{"text":"impl Clone for ValueLabel","synthetic":false,"types":[]},{"text":"impl Clone for ValueLabelStart","synthetic":false,"types":[]},{"text":"impl Clone for ValueLabelAssignments","synthetic":false,"types":[]},{"text":"impl Clone for UnwindInfo","synthetic":false,"types":[]},{"text":"impl Clone for UnwindInfo","synthetic":false,"types":[]},{"text":"impl Clone for UnwindInfo","synthetic":false,"types":[]},{"text":"impl Clone for CallConv","synthetic":false,"types":[]},{"text":"impl Clone for ConstraintKind","synthetic":false,"types":[]},{"text":"impl Clone for RecipeConstraints","synthetic":false,"types":[]},{"text":"impl Clone for BranchRange","synthetic":false,"types":[]},{"text":"impl Clone for Encoding","synthetic":false,"types":[]},{"text":"impl Clone for EncInfo","synthetic":false,"types":[]},{"text":"impl Clone for RegClassIndex","synthetic":false,"types":[]},{"text":"impl Clone for RegInfo","synthetic":false,"types":[]},{"text":"impl Clone for StackRef","synthetic":false,"types":[]},{"text":"impl Clone for StackBase","synthetic":false,"types":[]},{"text":"impl Clone for StackBaseMask","synthetic":false,"types":[]},{"text":"impl Clone for LookupError","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for TargetFrontendConfig","synthetic":false,"types":[]},{"text":"impl Clone for Loop","synthetic":false,"types":[]},{"text":"impl Clone for InstColor","synthetic":false,"types":[]},{"text":"impl Clone for LowerInput","synthetic":false,"types":[]},{"text":"impl Clone for RelocDistance","synthetic":false,"types":[]},{"text":"impl Clone for LoweredBlock","synthetic":false,"types":[]},{"text":"impl Clone for MachLabel","synthetic":false,"types":[]},{"text":"impl Clone for MachSrcLoc","synthetic":false,"types":[]},{"text":"impl Clone for MachStackMap","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for MachTerminator&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for PredicateView&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Detail","synthetic":false,"types":[]},{"text":"impl Clone for Flags","synthetic":false,"types":[]},{"text":"impl Clone for Regalloc","synthetic":false,"types":[]},{"text":"impl Clone for OptLevel","synthetic":false,"types":[]},{"text":"impl Clone for TlsModel","synthetic":false,"types":[]},{"text":"impl Clone for LibcallCallConv","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for FlagsOrIsa&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for VerifierError","synthetic":false,"types":[]},{"text":"impl Clone for VerifierErrors","synthetic":false,"types":[]},{"text":"impl Clone for RegDiversions","synthetic":false,"types":[]},{"text":"impl Clone for ValueLocRange","synthetic":false,"types":[]}];
implementors["cranelift_codegen_shared"] = [{"text":"impl Clone for IntCC","synthetic":false,"types":[]},{"text":"impl Clone for FloatCC","synthetic":false,"types":[]},{"text":"impl Clone for EncodingBits","synthetic":false,"types":[]},{"text":"impl Clone for OpcodePrefix","synthetic":false,"types":[]}];
implementors["cranelift_entity"] = [{"text":"impl&lt;T:&nbsp;Clone + ReservedValue&gt; Clone for PackedOption&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone&gt; Clone for BoxedSlice&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: EntityRef,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + EntityRef + ReservedValue&gt; Clone for EntityList&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + EntityRef + ReservedValue&gt; Clone for ListPool&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone&gt; Clone for SecondaryMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: EntityRef,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone&gt; Clone for PrimaryMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: EntityRef,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone&gt; Clone for EntitySet&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: EntityRef,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["cranelift_frontend"] = [{"text":"impl Clone for Variable","synthetic":false,"types":[]}];
implementors["cranelift_wasm"] = [{"text":"impl Clone for WasmType","synthetic":false,"types":[]},{"text":"impl Clone for WasmFuncType","synthetic":false,"types":[]},{"text":"impl Clone for GlobalVariable","synthetic":false,"types":[]},{"text":"impl Clone for ReturnMode","synthetic":false,"types":[]},{"text":"impl Clone for FuncIndex","synthetic":false,"types":[]},{"text":"impl Clone for DefinedFuncIndex","synthetic":false,"types":[]},{"text":"impl Clone for DefinedTableIndex","synthetic":false,"types":[]},{"text":"impl Clone for DefinedMemoryIndex","synthetic":false,"types":[]},{"text":"impl Clone for DefinedGlobalIndex","synthetic":false,"types":[]},{"text":"impl Clone for TableIndex","synthetic":false,"types":[]},{"text":"impl Clone for GlobalIndex","synthetic":false,"types":[]},{"text":"impl Clone for MemoryIndex","synthetic":false,"types":[]},{"text":"impl Clone for SignatureIndex","synthetic":false,"types":[]},{"text":"impl Clone for DataIndex","synthetic":false,"types":[]},{"text":"impl Clone for ElemIndex","synthetic":false,"types":[]},{"text":"impl Clone for Global","synthetic":false,"types":[]},{"text":"impl Clone for GlobalInit","synthetic":false,"types":[]},{"text":"impl Clone for Table","synthetic":false,"types":[]},{"text":"impl Clone for TableElementType","synthetic":false,"types":[]},{"text":"impl Clone for Memory","synthetic":false,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Clone for Hasher","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SendTimeoutError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RecvError","synthetic":false,"types":[]},{"text":"impl Clone for TryRecvError","synthetic":false,"types":[]},{"text":"impl Clone for RecvTimeoutError","synthetic":false,"types":[]},{"text":"impl Clone for TrySelectError","synthetic":false,"types":[]},{"text":"impl Clone for SelectTimeoutError","synthetic":false,"types":[]},{"text":"impl Clone for TryReadyError","synthetic":false,"types":[]},{"text":"impl Clone for ReadyTimeoutError","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Select&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Clone for Stealer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Steal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized + Pointable&gt; Clone for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Owned&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Pointable, '_&gt; Clone for Shared&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Collector","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl Clone for PopError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for PushError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Unparker","synthetic":false,"types":[]},{"text":"impl Clone for WaitGroup","synthetic":false,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Clone for MacError","synthetic":false,"types":[]},{"text":"impl Clone for InvalidKeyLength","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + ArrayLength&lt;u8&gt;&gt; Clone for MacResult&lt;N&gt;","synthetic":false,"types":[]}];
implementors["curve25519_dalek"] = [{"text":"impl Clone for Scalar","synthetic":false,"types":[]},{"text":"impl Clone for MontgomeryPoint","synthetic":false,"types":[]},{"text":"impl Clone for CompressedEdwardsY","synthetic":false,"types":[]},{"text":"impl Clone for EdwardsPoint","synthetic":false,"types":[]},{"text":"impl Clone for EdwardsBasepointTable","synthetic":false,"types":[]},{"text":"impl Clone for CompressedRistretto","synthetic":false,"types":[]},{"text":"impl Clone for RistrettoPoint","synthetic":false,"types":[]},{"text":"impl Clone for RistrettoBasepointTable","synthetic":false,"types":[]}];
implementors["data_encoding"] = [{"text":"impl Clone for DecodeKind","synthetic":false,"types":[]},{"text":"impl Clone for DecodeError","synthetic":false,"types":[]},{"text":"impl Clone for DecodePartial","synthetic":false,"types":[]},{"text":"impl Clone for BitOrder","synthetic":false,"types":[]},{"text":"impl Clone for Encoding","synthetic":false,"types":[]},{"text":"impl Clone for Translate","synthetic":false,"types":[]},{"text":"impl Clone for Wrap","synthetic":false,"types":[]},{"text":"impl Clone for Specification","synthetic":false,"types":[]},{"text":"impl Clone for SpecificationError","synthetic":false,"types":[]}];
implementors["digest"] = [{"text":"impl Clone for Box&lt;dyn DynDigest&gt;","synthetic":false,"types":[]},{"text":"impl Clone for InvalidOutputSize","synthetic":false,"types":[]}];
implementors["directories"] = [{"text":"impl Clone for BaseDirs","synthetic":false,"types":[]},{"text":"impl Clone for UserDirs","synthetic":false,"types":[]},{"text":"impl Clone for ProjectDirs","synthetic":false,"types":[]}];
implementors["dns_parser"] = [{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for QueryType","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for QueryClass","synthetic":false,"types":[]},{"text":"impl Clone for Opcode","synthetic":false,"types":[]},{"text":"impl Clone for ResponseCode","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Name&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Header","synthetic":false,"types":[]},{"text":"impl Clone for Record","synthetic":false,"types":[]},{"text":"impl Clone for Record","synthetic":false,"types":[]},{"text":"impl Clone for Record","synthetic":false,"types":[]},{"text":"impl Clone for Record","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Record","synthetic":false,"types":[]},{"text":"impl Clone for Record","synthetic":false,"types":[]},{"text":"impl Clone for Record","synthetic":false,"types":[]},{"text":"impl Clone for Record","synthetic":false,"types":[]},{"text":"impl Clone for Record","synthetic":false,"types":[]},{"text":"impl Clone for Record","synthetic":false,"types":[]},{"text":"impl Clone for Record","synthetic":false,"types":[]},{"text":"impl Clone for Record","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Record","synthetic":false,"types":[]},{"text":"impl Clone for Record","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Record","synthetic":false,"types":[]}];
implementors["ed25519"] = [{"text":"impl Clone for Signature","synthetic":false,"types":[]}];
implementors["ed25519_dalek"] = [{"text":"impl Clone for PublicKey","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["env_logger"] = [{"text":"impl Clone for Style","synthetic":false,"types":[]},{"text":"impl Clone for Color","synthetic":false,"types":[]},{"text":"impl Clone for Target","synthetic":false,"types":[]},{"text":"impl Clone for WriteStyle","synthetic":false,"types":[]},{"text":"impl Clone for TimestampPrecision","synthetic":false,"types":[]}];
implementors["errno"] = [{"text":"impl Clone for Errno","synthetic":false,"types":[]}];
implementors["exit_future"] = [{"text":"impl Clone for Exit","synthetic":false,"types":[]}];
implementors["failure"] = [{"text":"impl&lt;E:&nbsp;Clone&gt; Clone for Compat&lt;E&gt;","synthetic":false,"types":[]}];
implementors["fake_simd"] = [{"text":"impl Clone for u32x4","synthetic":false,"types":[]},{"text":"impl Clone for u64x2","synthetic":false,"types":[]}];
implementors["fallible_iterator"] = [{"text":"impl&lt;T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Map&lt;T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, U:&nbsp;Clone&gt; Clone for Chain&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Cloned&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Convert&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Enumerate&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Filter&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FilterMap&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, U:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FlatMap&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: IntoFallibleIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;U::IntoFallibleIter: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Clone for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: FallibleIterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: IntoFallibleIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I::Item as IntoFallibleIterator&gt;::IntoFallibleIter: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Fuse&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Inspect&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Iterator&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapErr&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + FallibleIterator&gt; Clone for Peekable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Rev&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, St:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Scan&lt;I, St, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Skip&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for SkipWhile&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for StepBy&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Take&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for TakeWhile&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Cycle&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, U:&nbsp;Clone&gt; Clone for Zip&lt;T, U&gt;","synthetic":false,"types":[]}];
implementors["fastrand"] = [{"text":"impl Clone for Rng","synthetic":false,"types":[]}];
implementors["finality_grandpa"] = [{"text":"impl Clone for Phase","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone, N:&nbsp;Clone&gt; Clone for State&lt;H, N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Id:&nbsp;Clone + Eq + Ord&gt; Clone for VoterSet&lt;Id&gt;","synthetic":false,"types":[]},{"text":"impl Clone for VoterInfo","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone, N:&nbsp;Clone, S:&nbsp;Clone, Id:&nbsp;Clone&gt; Clone for CommunicationOut&lt;H, N, S, Id&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CommitProcessingOutcome","synthetic":false,"types":[]},{"text":"impl Clone for GoodCommit","synthetic":false,"types":[]},{"text":"impl Clone for BadCommit","synthetic":false,"types":[]},{"text":"impl Clone for CatchUpProcessingOutcome","synthetic":false,"types":[]},{"text":"impl Clone for GoodCatchUp","synthetic":false,"types":[]},{"text":"impl Clone for BadCatchUp","synthetic":false,"types":[]},{"text":"impl&lt;Id:&nbsp;Clone + Eq + Hash&gt; Clone for RoundState&lt;Id&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone, N:&nbsp;Clone&gt; Clone for Prevote&lt;H, N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone, N:&nbsp;Clone&gt; Clone for Precommit&lt;H, N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone, N:&nbsp;Clone&gt; Clone for PrimaryPropose&lt;H, N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;Id:&nbsp;Clone, V:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for Equivocation&lt;Id, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone, N:&nbsp;Clone&gt; Clone for Message&lt;H, N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone, N:&nbsp;Clone, S:&nbsp;Clone, Id:&nbsp;Clone&gt; Clone for SignedMessage&lt;H, N, S, Id&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone, N:&nbsp;Clone, S:&nbsp;Clone, Id:&nbsp;Clone&gt; Clone for Commit&lt;H, N, S, Id&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone, N:&nbsp;Clone, S:&nbsp;Clone, Id:&nbsp;Clone&gt; Clone for SignedPrevote&lt;H, N, S, Id&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone, N:&nbsp;Clone, S:&nbsp;Clone, Id:&nbsp;Clone&gt; Clone for SignedPrecommit&lt;H, N, S, Id&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone, N:&nbsp;Clone, S:&nbsp;Clone, Id:&nbsp;Clone&gt; Clone for CompactCommit&lt;H, N, S, Id&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone, N:&nbsp;Clone, S:&nbsp;Clone, Id:&nbsp;Clone&gt; Clone for CatchUp&lt;H, N, S, Id&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone, N:&nbsp;Clone, S:&nbsp;Clone, Id:&nbsp;Clone&gt; Clone for HistoricalVotes&lt;H, N, S, Id&gt;","synthetic":false,"types":[]}];
implementors["flate2"] = [{"text":"impl Clone for GzHeader","synthetic":false,"types":[]},{"text":"impl Clone for FlushCompress","synthetic":false,"types":[]},{"text":"impl Clone for FlushDecompress","synthetic":false,"types":[]},{"text":"impl Clone for Status","synthetic":false,"types":[]},{"text":"impl Clone for Compression","synthetic":false,"types":[]}];
implementors["fork_tree"] = [{"text":"impl&lt;E:&nbsp;Clone&gt; Clone for Error&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone, N:&nbsp;Clone, V:&nbsp;Clone&gt; Clone for ForkTree&lt;H, N, V&gt;","synthetic":false,"types":[]}];
implementors["form_urlencoded"] = [{"text":"impl&lt;'a&gt; Clone for Parse&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["frame_benchmarking"] = [{"text":"impl Clone for BenchmarkParameter","synthetic":false,"types":[]},{"text":"impl Clone for BenchmarkBatch","synthetic":false,"types":[]},{"text":"impl Clone for BenchmarkResults","synthetic":false,"types":[]},{"text":"impl Clone for BenchmarkConfig","synthetic":false,"types":[]}];
implementors["frame_metadata"] = [{"text":"impl&lt;B:&nbsp;Clone, O:&nbsp;Clone&gt; Clone for DecodeDifferent&lt;B, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for FunctionMetadata","synthetic":false,"types":[]},{"text":"impl Clone for FunctionArgumentMetadata","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone&gt; Clone for FnEncode&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Encode + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for OuterEventMetadata","synthetic":false,"types":[]},{"text":"impl Clone for EventMetadata","synthetic":false,"types":[]},{"text":"impl Clone for StorageEntryMetadata","synthetic":false,"types":[]},{"text":"impl Clone for ModuleConstantMetadata","synthetic":false,"types":[]},{"text":"impl Clone for ErrorMetadata","synthetic":false,"types":[]},{"text":"impl Clone for DefaultByteGetter","synthetic":false,"types":[]},{"text":"impl Clone for StorageHasher","synthetic":false,"types":[]},{"text":"impl Clone for StorageEntryType","synthetic":false,"types":[]},{"text":"impl Clone for StorageEntryModifier","synthetic":false,"types":[]},{"text":"impl Clone for StorageMetadata","synthetic":false,"types":[]},{"text":"impl Clone for ModuleMetadata","synthetic":false,"types":[]}];
implementors["frame_support_procedural_tools"] = [{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Braces&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Brackets&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Parens&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl Clone for NoTrailing","synthetic":false,"types":[]},{"text":"impl Clone for Trailing","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, T:&nbsp;Clone, V:&nbsp;Clone&gt; Clone for PunctuatedInner&lt;P, T, V&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Meta","synthetic":false,"types":[]}];
implementors["frame_system"] = [{"text":"impl&lt;T:&nbsp;SigningTypes&gt; Clone for Account&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Public: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Trait + Send + Sync&gt; Clone for CheckGenesis&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Trait + Send + Sync&gt; Clone for CheckMortality&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Trait&gt; Clone for CheckNonce&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Index: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Trait + Send + Sync&gt; Clone for CheckSpecVersion&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Trait + Send + Sync&gt; Clone for CheckTxVersion&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Trait + Send + Sync&gt; Clone for CheckWeight&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Phase","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Parameter + Member, T:&nbsp;Clone&gt; Clone for EventRecord&lt;E, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;AccountId:&nbsp;Clone&gt; Clone for RawOrigin&lt;AccountId&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Index:&nbsp;Clone, AccountData:&nbsp;Clone&gt; Clone for AccountInfo&lt;Index, AccountData&gt;","synthetic":false,"types":[]},{"text":"impl&lt;AccountId:&nbsp;Clone&gt; Clone for RawEvent&lt;AccountId&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Trait&gt; Clone for Module&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Clone for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Async&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for AsyncSink&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for FutureResult&lt;T, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F&gt; Clone for Shared&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SharedItem&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone&gt; Clone for SharedError&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ExecuteErrorKind","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, U:&nbsp;Clone, F:&nbsp;Clone, Fut:&nbsp;Clone&gt; Clone for With&lt;S, U, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sink,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(U) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: IntoFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut::Future: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::SinkItem: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for SinkFromErr&lt;S, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for SinkMapErr&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UnparkEvent","synthetic":false,"types":[]},{"text":"impl Clone for Task","synthetic":false,"types":[]},{"text":"impl Clone for NotifyHandle","synthetic":false,"types":[]},{"text":"impl Clone for Canceled","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for UnboundedSender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for UnboundedSender&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl Clone for SendError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for UnboundedSender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Canceled","synthetic":false,"types":[]}];
implementors["futures_cpupool"] = [{"text":"impl Clone for CpuPool","synthetic":false,"types":[]}];
implementors["futures_diagnose"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DiagnoseFuture&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures_executor"] = [{"text":"impl Clone for LocalSpawner","synthetic":false,"types":[]},{"text":"impl Clone for ThreadPool","synthetic":false,"types":[]}];
implementors["futures_lite"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Empty&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Iter&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Once&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Pending&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone&gt; Clone for PollFn&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Repeat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone&gt; Clone for RepeatWith&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, F:&nbsp;Clone, Fut:&nbsp;Clone&gt; Clone for Unfold&lt;T, F, Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, F:&nbsp;Clone, Fut:&nbsp;Clone&gt; Clone for TryUnfold&lt;T, F, Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, St:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Scan&lt;S, St, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Fuse&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Map&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, U:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FlatMap&lt;S, U, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone + Stream&gt; Clone for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F:&nbsp;Clone, Fut:&nbsp;Clone&gt; Clone for Then&lt;S, F, Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for Filter&lt;S, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S1:&nbsp;Clone, S2:&nbsp;Clone&gt; Clone for Or&lt;S1, S2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S1:&nbsp;Clone, S2:&nbsp;Clone&gt; Clone for Race&lt;S1, S2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FilterMap&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Take&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for TakeWhile&lt;S, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Skip&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for SkipWhile&lt;S, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for StepBy&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, U:&nbsp;Clone&gt; Clone for Chain&lt;S, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Cloned&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Copied&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Cycle&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Enumerate&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Inspect&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + Stream, B:&nbsp;Clone&gt; Clone for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for AssertAsync&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Cursor&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;Fut&gt; Clone for Shared&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Pending&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone&gt; Clone for OptionFuture&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Ready&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for Either&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut:&nbsp;Clone&gt; Clone for Abortable&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl Clone for AbortHandle","synthetic":false,"types":[]},{"text":"impl Clone for Aborted","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Iter&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Repeat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Empty&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Pending&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Si:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for SinkMapErr&lt;Si, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ex:&nbsp;Clone&gt; Clone for Executor01As03&lt;Ex&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Compat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for AllowStdIo&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Cursor&lt;T&gt;","synthetic":false,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T:&nbsp;Clone, N&gt; Clone for GenericArray&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, N&gt; Clone for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["get_if_addrs"] = [{"text":"impl Clone for Interface","synthetic":false,"types":[]},{"text":"impl Clone for IfAddr","synthetic":false,"types":[]},{"text":"impl Clone for Ifv4Addr","synthetic":false,"types":[]},{"text":"impl Clone for Ifv6Addr","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["ghash"] = [{"text":"impl Clone for GHash","synthetic":false,"types":[]}];
implementors["gimli"] = [{"text":"impl Clone for Format","synthetic":false,"types":[]},{"text":"impl Clone for Encoding","synthetic":false,"types":[]},{"text":"impl Clone for LineEncoding","synthetic":false,"types":[]},{"text":"impl Clone for Register","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugAbbrevOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugAddrBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugAddrIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugInfoOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugLineOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugLineStrOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LocationListsOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugLocListsBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugLocListsIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugMacinfoOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugMacroOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for RangeListsOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugRngListsBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugRngListsIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugStrOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugStrOffsetsBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugStrOffsetsIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugTypesOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for DebugTypeSignature","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugFrameOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for EhFrameOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for UnitSectionOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SectionId","synthetic":false,"types":[]},{"text":"impl Clone for Arm","synthetic":false,"types":[]},{"text":"impl Clone for X86","synthetic":false,"types":[]},{"text":"impl Clone for X86_64","synthetic":false,"types":[]},{"text":"impl Clone for DwUt","synthetic":false,"types":[]},{"text":"impl Clone for DwCfa","synthetic":false,"types":[]},{"text":"impl Clone for DwChildren","synthetic":false,"types":[]},{"text":"impl Clone for DwTag","synthetic":false,"types":[]},{"text":"impl Clone for DwAt","synthetic":false,"types":[]},{"text":"impl Clone for DwForm","synthetic":false,"types":[]},{"text":"impl Clone for DwAte","synthetic":false,"types":[]},{"text":"impl Clone for DwLle","synthetic":false,"types":[]},{"text":"impl Clone for DwDs","synthetic":false,"types":[]},{"text":"impl Clone for DwEnd","synthetic":false,"types":[]},{"text":"impl Clone for DwAccess","synthetic":false,"types":[]},{"text":"impl Clone for DwVis","synthetic":false,"types":[]},{"text":"impl Clone for DwVirtuality","synthetic":false,"types":[]},{"text":"impl Clone for DwLang","synthetic":false,"types":[]},{"text":"impl Clone for DwAddr","synthetic":false,"types":[]},{"text":"impl Clone for DwId","synthetic":false,"types":[]},{"text":"impl Clone for DwCc","synthetic":false,"types":[]},{"text":"impl Clone for DwInl","synthetic":false,"types":[]},{"text":"impl Clone for DwOrd","synthetic":false,"types":[]},{"text":"impl Clone for DwDsc","synthetic":false,"types":[]},{"text":"impl Clone for DwIdx","synthetic":false,"types":[]},{"text":"impl Clone for DwDefaulted","synthetic":false,"types":[]},{"text":"impl Clone for DwLns","synthetic":false,"types":[]},{"text":"impl Clone for DwLne","synthetic":false,"types":[]},{"text":"impl Clone for DwLnct","synthetic":false,"types":[]},{"text":"impl Clone for DwMacro","synthetic":false,"types":[]},{"text":"impl Clone for DwRle","synthetic":false,"types":[]},{"text":"impl Clone for DwOp","synthetic":false,"types":[]},{"text":"impl Clone for DwEhPe","synthetic":false,"types":[]},{"text":"impl Clone for RunTimeEndian","synthetic":false,"types":[]},{"text":"impl Clone for LittleEndian","synthetic":false,"types":[]},{"text":"impl Clone for BigEndian","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugAddr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for DebugFrame&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for EhFrameHdr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for ParsedEhFrameHdr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;Clone + Reader&gt; Clone for EhHdrTable&lt;'a, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for EhFrame&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for BaseAddresses","synthetic":false,"types":[]},{"text":"impl Clone for SectionBaseAddresses","synthetic":false,"types":[]},{"text":"impl&lt;'bases, Section:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for CfiEntriesIter&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: UnwindSection&lt;R&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'bases, Section:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for CieOrFde&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: UnwindSection&lt;R&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Augmentation","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for CommonInformationEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'bases, Section:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for PartialFrameDescriptionEntry&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: UnwindSection&lt;R&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for FrameDescriptionEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for UninitializedUnwindContext&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for UnwindContext&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'iter, R:&nbsp;Clone&gt; Clone for RegisterRuleIter&lt;'iter, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for UnwindTableRow&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for CfaRule&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for RegisterRule&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for CallFrameInstruction&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;Clone + Reader&gt; Clone for CallFrameInstructionIter&lt;'a, R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Pointer","synthetic":false,"types":[]},{"text":"impl&lt;'input, Endian:&nbsp;Clone&gt; Clone for EndianSlice&lt;'input, Endian&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Endianity,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Endian:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for EndianReader&lt;Endian, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Endianity,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: CloneStableDeref&lt;Target = [u8]&gt; + Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for ReaderOffsetId","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugAbbrev&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Abbreviations","synthetic":false,"types":[]},{"text":"impl Clone for Abbreviation","synthetic":false,"types":[]},{"text":"impl Clone for AttributeSpecification","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Copy&gt; Clone for ArangeEntry&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for DebugAranges&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for ArangeEntryIter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugLine&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Program:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for LineRows&lt;R, Program, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Program: LineProgram&lt;R, Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for LineInstruction&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for LineInstructions&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for LineRow","synthetic":false,"types":[]},{"text":"impl Clone for ColumnType","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for LineSequence&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for LineProgramHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for IncompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for CompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for FileEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for FileEntryFormat","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugLoc&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugLocLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for LocationLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for RawLocListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for LocationListEntry&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DieReference&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for Operation&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for Location&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for Piece&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for Expression&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for OperationIter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for PubNamesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for DebugPubNames&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for PubNamesEntryIter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for PubTypesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for DebugPubTypes&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for PubTypesEntryIter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugRanges&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugRngLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for RangeLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for RawRngListEntry&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Range","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugStr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugStrOffsets&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugLineStr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for UnitOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugInfo&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for CompilationUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for CompilationUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for UnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for DebuggingInformationEntry&lt;'abbrev, 'unit, R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for AttributeValue&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for Attribute&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'entry, 'unit, R:&nbsp;Clone + Reader&gt; Clone for AttrsIter&lt;'abbrev, 'entry, 'unit, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R:&nbsp;Clone&gt; Clone for EntriesRaw&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R:&nbsp;Clone&gt; Clone for EntriesCursor&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R:&nbsp;Clone&gt; Clone for EntriesTree&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugTypes&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for TypeUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for TypeUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for ValueType","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;Endian:&nbsp;Clone&gt; Clone for EndianVec&lt;Endian&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Endianity,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for InitialLengthOffset","synthetic":false,"types":[]},{"text":"impl Clone for CieId","synthetic":false,"types":[]},{"text":"impl Clone for CommonInformationEntry","synthetic":false,"types":[]},{"text":"impl Clone for FrameDescriptionEntry","synthetic":false,"types":[]},{"text":"impl Clone for CallFrameInstruction","synthetic":false,"types":[]},{"text":"impl Clone for LineProgram","synthetic":false,"types":[]},{"text":"impl Clone for LineRow","synthetic":false,"types":[]},{"text":"impl Clone for LineString","synthetic":false,"types":[]},{"text":"impl Clone for DirectoryId","synthetic":false,"types":[]},{"text":"impl Clone for FileId","synthetic":false,"types":[]},{"text":"impl Clone for FileInfo","synthetic":false,"types":[]},{"text":"impl Clone for LocationListId","synthetic":false,"types":[]},{"text":"impl Clone for LocationList","synthetic":false,"types":[]},{"text":"impl Clone for Location","synthetic":false,"types":[]},{"text":"impl Clone for Expression","synthetic":false,"types":[]},{"text":"impl Clone for RangeListId","synthetic":false,"types":[]},{"text":"impl Clone for RangeList","synthetic":false,"types":[]},{"text":"impl Clone for Range","synthetic":false,"types":[]},{"text":"impl Clone for StringId","synthetic":false,"types":[]},{"text":"impl Clone for LineStringId","synthetic":false,"types":[]},{"text":"impl Clone for UnitId","synthetic":false,"types":[]},{"text":"impl Clone for UnitEntryId","synthetic":false,"types":[]},{"text":"impl Clone for Attribute","synthetic":false,"types":[]},{"text":"impl Clone for AttributeValue","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Address","synthetic":false,"types":[]},{"text":"impl Clone for Reference","synthetic":false,"types":[]},{"text":"impl Clone for ConvertError","synthetic":false,"types":[]}];
implementors["globset"] = [{"text":"impl Clone for Glob","synthetic":false,"types":[]},{"text":"impl Clone for GlobMatcher","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for GlobBuilder&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for GlobSet","synthetic":false,"types":[]},{"text":"impl Clone for GlobSetBuilder","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Candidate&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["governance_os_pallet_bylaws"] = [{"text":"impl&lt;AccountId:&nbsp;Clone, Role:&nbsp;Clone&gt; Clone for RawEvent&lt;AccountId, Role&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Trait&gt; Clone for Module&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Clone for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["governance_os_pallet_compat"] = [{"text":"impl Clone for Event","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Trait&gt; Clone for Module&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Clone for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["governance_os_pallet_organizations"] = [{"text":"impl&lt;AccountId:&nbsp;Clone, OrganizationDetails:&nbsp;Clone, ProposalId:&nbsp;Clone, Balance:&nbsp;Clone&gt; Clone for RawEvent&lt;AccountId, OrganizationDetails, ProposalId, Balance&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Trait&gt; Clone for Module&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Clone for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["governance_os_pallet_tokens"] = [{"text":"impl&lt;Balance:&nbsp;Clone&gt; Clone for AccountCurrencyData&lt;Balance&gt;","synthetic":false,"types":[]},{"text":"impl&lt;AccountId:&nbsp;Clone&gt; Clone for CurrencyDetails&lt;AccountId&gt;","synthetic":false,"types":[]},{"text":"impl&lt;AccountId:&nbsp;Clone, Balance:&nbsp;Clone, CurrencyId:&nbsp;Clone, CurrencyDetails:&nbsp;Clone&gt; Clone for RawEvent&lt;AccountId, Balance, CurrencyId, CurrencyDetails&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Trait&gt; Clone for Module&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Clone for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["governance_os_primitives"] = [{"text":"impl Clone for CurrencyId","synthetic":false,"types":[]},{"text":"impl Clone for Role","synthetic":false,"types":[]}];
implementors["governance_os_runtime"] = [{"text":"impl Clone for SessionKeys","synthetic":false,"types":[]},{"text":"impl Clone for Runtime","synthetic":false,"types":[]},{"text":"impl Clone for Event","synthetic":false,"types":[]},{"text":"impl Clone for Origin","synthetic":false,"types":[]},{"text":"impl Clone for OriginCaller","synthetic":false,"types":[]},{"text":"impl Clone for Call","synthetic":false,"types":[]}];
implementors["governance_os_voting"] = [{"text":"impl&lt;AccountId:&nbsp;Clone, Balance:&nbsp;Clone, BlockNumber:&nbsp;Clone&gt; Clone for ProposalMetadata&lt;AccountId, Balance, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Balance:&nbsp;Clone, CurrencyId:&nbsp;Clone, BlockNumber:&nbsp;Clone, Currencies:&nbsp;Clone, AccountId:&nbsp;Clone&gt; Clone for VotingSystems&lt;Balance, CurrencyId, BlockNumber, Currencies, AccountId&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Balance:&nbsp;Clone, CurrencyId:&nbsp;Clone, BlockNumber:&nbsp;Clone&gt; Clone for CoinBasedVotingParameters&lt;Balance, CurrencyId, BlockNumber&gt;","synthetic":false,"types":[]}];
implementors["h2"] = [{"text":"impl Clone for Reason","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl&lt;B&gt; Clone for SendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Buf,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for StreamId","synthetic":false,"types":[]},{"text":"impl Clone for FlowControl","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Iter&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Keys&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Values&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashSet&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, '_&gt; Clone for Iter&lt;'_, K&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Intersection&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Difference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for SymmetricDifference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Union&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CollectionAllocErr","synthetic":false,"types":[]}];
implementors["hex"] = [{"text":"impl Clone for FromHexError","synthetic":false,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; Clone for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Input + BlockInput + FixedOutput + Reset + Default + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;D::BlockSize: ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for HeaderMap&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for HeaderName","synthetic":false,"types":[]},{"text":"impl Clone for HeaderValue","synthetic":false,"types":[]},{"text":"impl Clone for Method","synthetic":false,"types":[]},{"text":"impl Clone for StatusCode","synthetic":false,"types":[]},{"text":"impl Clone for Version","synthetic":false,"types":[]},{"text":"impl Clone for Authority","synthetic":false,"types":[]},{"text":"impl Clone for PathAndQuery","synthetic":false,"types":[]},{"text":"impl Clone for Scheme","synthetic":false,"types":[]},{"text":"impl Clone for Uri","synthetic":false,"types":[]}];
implementors["http_body"] = [{"text":"impl Clone for SizeHint","synthetic":false,"types":[]}];
implementors["httparse"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Status&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Header&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["httpdate"] = [{"text":"impl Clone for HttpDate","synthetic":false,"types":[]}];
implementors["humantime"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for FormattedDuration","synthetic":false,"types":[]},{"text":"impl Clone for Duration","synthetic":false,"types":[]},{"text":"impl Clone for Timestamp","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Rfc3339Timestamp","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for Name","synthetic":false,"types":[]},{"text":"impl Clone for GaiResolver","synthetic":false,"types":[]},{"text":"impl Clone for TokioThreadpoolGaiResolver","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for HttpConnector&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for HttpInfo","synthetic":false,"types":[]},{"text":"impl Clone for Destination","synthetic":false,"types":[]},{"text":"impl&lt;C, B&gt; Clone for Client&lt;C, B&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone&gt; Clone for Http&lt;E&gt;","synthetic":false,"types":[]}];
implementors["hyper_rustls"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for HttpsConnector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["idna"] = [{"text":"impl Clone for Flags","synthetic":false,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;K, V, S&gt; Clone for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Keys&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Values&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Iter&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, '_&gt; Clone for Iter&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Difference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Intersection&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S1, S2, '_&gt; Clone for SymmetricDifference&lt;'_, T, S1, S2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Union&lt;'_, T, S&gt;","synthetic":false,"types":[]}];
implementors["ip_network"] = [{"text":"impl Clone for IpNetwork","synthetic":false,"types":[]},{"text":"impl Clone for Ipv4Network","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6MulticastScope","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6Network","synthetic":false,"types":[]}];
implementors["ipnet"] = [{"text":"impl Clone for IpAddrRange","synthetic":false,"types":[]},{"text":"impl Clone for Ipv4AddrRange","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6AddrRange","synthetic":false,"types":[]},{"text":"impl Clone for IpNet","synthetic":false,"types":[]},{"text":"impl Clone for Ipv4Net","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6Net","synthetic":false,"types":[]},{"text":"impl Clone for PrefixLenError","synthetic":false,"types":[]},{"text":"impl Clone for IpSubnets","synthetic":false,"types":[]},{"text":"impl Clone for Ipv4Subnets","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6Subnets","synthetic":false,"types":[]},{"text":"impl Clone for AddrParseError","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for Interleave&lt;I, J&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Iterator&lt;Item = I::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Batching&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Step&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I, J, F&gt; Clone for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Iterator&lt;Item = I::Item&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Peekable&lt;I&gt;: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Peekable&lt;J&gt;: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, Pred:&nbsp;Clone&gt; Clone for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for WhileSome&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for EitherOrBoth&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I, J&gt; Clone for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Clone + Iterator&lt;Item = J&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, I:&nbsp;Clone&gt; Clone for Format&lt;'a, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I, F&gt; Clone for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for MinMaxResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for PadUsing&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + Iterator&gt; Clone for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Clone for RcIter&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Unfold&lt;St, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Iterate&lt;St, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + Iterator, V:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for UniqueBy&lt;I, V, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + Iterator&gt; Clone for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Position&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for ZipEq&lt;I, J&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, U:&nbsp;Clone&gt; Clone for ZipLongest&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Zip&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for FoldWhile&lt;T&gt;","synthetic":false,"types":[]}];
implementors["itoa"] = [{"text":"impl Clone for Buffer","synthetic":false,"types":[]}];
implementors["js_sys"] = [{"text":"impl Clone for Array","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ArrayIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ArrayBuffer","synthetic":false,"types":[]},{"text":"impl Clone for SharedArrayBuffer","synthetic":false,"types":[]},{"text":"impl Clone for Boolean","synthetic":false,"types":[]},{"text":"impl Clone for DataView","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for EvalError","synthetic":false,"types":[]},{"text":"impl Clone for Function","synthetic":false,"types":[]},{"text":"impl Clone for Generator","synthetic":false,"types":[]},{"text":"impl Clone for Map","synthetic":false,"types":[]},{"text":"impl Clone for Iterator","synthetic":false,"types":[]},{"text":"impl Clone for AsyncIterator","synthetic":false,"types":[]},{"text":"impl Clone for IteratorNext","synthetic":false,"types":[]},{"text":"impl Clone for Number","synthetic":false,"types":[]},{"text":"impl Clone for Date","synthetic":false,"types":[]},{"text":"impl Clone for Object","synthetic":false,"types":[]},{"text":"impl Clone for Proxy","synthetic":false,"types":[]},{"text":"impl Clone for RangeError","synthetic":false,"types":[]},{"text":"impl Clone for ReferenceError","synthetic":false,"types":[]},{"text":"impl Clone for RegExp","synthetic":false,"types":[]},{"text":"impl Clone for Set","synthetic":false,"types":[]},{"text":"impl Clone for SyntaxError","synthetic":false,"types":[]},{"text":"impl Clone for TypeError","synthetic":false,"types":[]},{"text":"impl Clone for UriError","synthetic":false,"types":[]},{"text":"impl Clone for WeakMap","synthetic":false,"types":[]},{"text":"impl Clone for WeakSet","synthetic":false,"types":[]},{"text":"impl Clone for CompileError","synthetic":false,"types":[]},{"text":"impl Clone for Instance","synthetic":false,"types":[]},{"text":"impl Clone for LinkError","synthetic":false,"types":[]},{"text":"impl Clone for RuntimeError","synthetic":false,"types":[]},{"text":"impl Clone for Module","synthetic":false,"types":[]},{"text":"impl Clone for Table","synthetic":false,"types":[]},{"text":"impl Clone for Memory","synthetic":false,"types":[]},{"text":"impl Clone for JsString","synthetic":false,"types":[]},{"text":"impl Clone for Symbol","synthetic":false,"types":[]},{"text":"impl Clone for Collator","synthetic":false,"types":[]},{"text":"impl Clone for DateTimeFormat","synthetic":false,"types":[]},{"text":"impl Clone for NumberFormat","synthetic":false,"types":[]},{"text":"impl Clone for PluralRules","synthetic":false,"types":[]},{"text":"impl Clone for Promise","synthetic":false,"types":[]},{"text":"impl Clone for Int8Array","synthetic":false,"types":[]},{"text":"impl Clone for Int16Array","synthetic":false,"types":[]},{"text":"impl Clone for Int32Array","synthetic":false,"types":[]},{"text":"impl Clone for Uint8Array","synthetic":false,"types":[]},{"text":"impl Clone for Uint8ClampedArray","synthetic":false,"types":[]},{"text":"impl Clone for Uint16Array","synthetic":false,"types":[]},{"text":"impl Clone for Uint32Array","synthetic":false,"types":[]},{"text":"impl Clone for Float32Array","synthetic":false,"types":[]},{"text":"impl Clone for Float64Array","synthetic":false,"types":[]}];
implementors["jsonrpc_client_transports"] = [{"text":"impl Clone for ClientResponse","synthetic":false,"types":[]},{"text":"impl Clone for RpcChannel","synthetic":false,"types":[]},{"text":"impl Clone for RawClient","synthetic":false,"types":[]},{"text":"impl Clone for TypedClient","synthetic":false,"types":[]}];
implementors["jsonrpc_core"] = [{"text":"impl&lt;T:&nbsp;Clone + Metadata&gt; Clone for RemoteProcedure&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Compatibility","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Metadata, S:&nbsp;Clone + Middleware&lt;T&gt;&gt; Clone for MetaIoHandler&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Clone + Metadata&gt; Clone for IoHandler&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Noop","synthetic":false,"types":[]},{"text":"impl Clone for ErrorCode","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Id","synthetic":false,"types":[]},{"text":"impl Clone for Params","synthetic":false,"types":[]},{"text":"impl Clone for MethodCall","synthetic":false,"types":[]},{"text":"impl Clone for Notification","synthetic":false,"types":[]},{"text":"impl Clone for Call","synthetic":false,"types":[]},{"text":"impl Clone for Request","synthetic":false,"types":[]},{"text":"impl Clone for Success","synthetic":false,"types":[]},{"text":"impl Clone for Failure","synthetic":false,"types":[]},{"text":"impl Clone for Output","synthetic":false,"types":[]},{"text":"impl Clone for Response","synthetic":false,"types":[]},{"text":"impl Clone for Version","synthetic":false,"types":[]}];
implementors["jsonrpc_http_server"] = [{"text":"impl&lt;M:&nbsp;Metadata, S:&nbsp;Middleware&lt;M&gt;&gt; Clone for Rpc&lt;M, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Metadata, S:&nbsp;Middleware&lt;M&gt;&gt; Clone for WeakRpc&lt;M, S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RestApi","synthetic":false,"types":[]},{"text":"impl Clone for CloseHandle","synthetic":false,"types":[]}];
implementors["jsonrpc_ipc_server"] = [{"text":"impl Clone for CloseHandle","synthetic":false,"types":[]}];
implementors["jsonrpc_pubsub"] = [{"text":"impl Clone for NumericIdProvider","synthetic":false,"types":[]},{"text":"impl Clone for RandomStringIdProvider","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IdProvider&gt; Clone for SubscriptionManager&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Sink","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for Sink&lt;T, E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SubscriptionId","synthetic":false,"types":[]}];
implementors["jsonrpc_server_utils"] = [{"text":"impl Clone for OriginProtocol","synthetic":false,"types":[]},{"text":"impl Clone for Origin","synthetic":false,"types":[]},{"text":"impl Clone for AccessControlAllowOrigin","synthetic":false,"types":[]},{"text":"impl Clone for AccessControlAllowHeaders","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for AllowCors&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Port","synthetic":false,"types":[]},{"text":"impl Clone for Host","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DomainsValidation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Separator","synthetic":false,"types":[]}];
implementors["jsonrpc_ws_server"] = [{"text":"impl Clone for NoopExtractor","synthetic":false,"types":[]},{"text":"impl Clone for CloseHandle","synthetic":false,"types":[]},{"text":"impl Clone for Broadcaster","synthetic":false,"types":[]}];
implementors["kvdb"] = [{"text":"impl Clone for IoStats","synthetic":false,"types":[]},{"text":"impl Clone for DBTransaction","synthetic":false,"types":[]},{"text":"impl Clone for DBOp","synthetic":false,"types":[]}];
implementors["kvdb_rocksdb"] = [{"text":"impl Clone for CompactionProfile","synthetic":false,"types":[]},{"text":"impl Clone for DatabaseConfig","synthetic":false,"types":[]}];
implementors["lazycell"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LazyCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for AtomicLazyCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Clone for DIR","synthetic":false,"types":[]},{"text":"impl Clone for group","synthetic":false,"types":[]},{"text":"impl Clone for utimbuf","synthetic":false,"types":[]},{"text":"impl Clone for timeval","synthetic":false,"types":[]},{"text":"impl Clone for timespec","synthetic":false,"types":[]},{"text":"impl Clone for rlimit","synthetic":false,"types":[]},{"text":"impl Clone for rusage","synthetic":false,"types":[]},{"text":"impl Clone for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Clone for hostent","synthetic":false,"types":[]},{"text":"impl Clone for iovec","synthetic":false,"types":[]},{"text":"impl Clone for pollfd","synthetic":false,"types":[]},{"text":"impl Clone for winsize","synthetic":false,"types":[]},{"text":"impl Clone for linger","synthetic":false,"types":[]},{"text":"impl Clone for sigval","synthetic":false,"types":[]},{"text":"impl Clone for itimerval","synthetic":false,"types":[]},{"text":"impl Clone for tms","synthetic":false,"types":[]},{"text":"impl Clone for servent","synthetic":false,"types":[]},{"text":"impl Clone for protoent","synthetic":false,"types":[]},{"text":"impl Clone for FILE","synthetic":false,"types":[]},{"text":"impl Clone for fpos_t","synthetic":false,"types":[]},{"text":"impl Clone for timezone","synthetic":false,"types":[]},{"text":"impl Clone for in_addr","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq_source","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Clone for addrinfo","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_ll","synthetic":false,"types":[]},{"text":"impl Clone for fd_set","synthetic":false,"types":[]},{"text":"impl Clone for tm","synthetic":false,"types":[]},{"text":"impl Clone for sched_param","synthetic":false,"types":[]},{"text":"impl Clone for Dl_info","synthetic":false,"types":[]},{"text":"impl Clone for lconv","synthetic":false,"types":[]},{"text":"impl Clone for in_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for ifaddrs","synthetic":false,"types":[]},{"text":"impl Clone for in6_rtmsg","synthetic":false,"types":[]},{"text":"impl Clone for arpreq","synthetic":false,"types":[]},{"text":"impl Clone for arpreq_old","synthetic":false,"types":[]},{"text":"impl Clone for arphdr","synthetic":false,"types":[]},{"text":"impl Clone for mmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for epoll_event","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Clone for utsname","synthetic":false,"types":[]},{"text":"impl Clone for sigevent","synthetic":false,"types":[]},{"text":"impl Clone for fpos64_t","synthetic":false,"types":[]},{"text":"impl Clone for rlimit64","synthetic":false,"types":[]},{"text":"impl Clone for glob_t","synthetic":false,"types":[]},{"text":"impl Clone for passwd","synthetic":false,"types":[]},{"text":"impl Clone for spwd","synthetic":false,"types":[]},{"text":"impl Clone for dqblk","synthetic":false,"types":[]},{"text":"impl Clone for signalfd_siginfo","synthetic":false,"types":[]},{"text":"impl Clone for itimerspec","synthetic":false,"types":[]},{"text":"impl Clone for fsid_t","synthetic":false,"types":[]},{"text":"impl Clone for packet_mreq","synthetic":false,"types":[]},{"text":"impl Clone for cpu_set_t","synthetic":false,"types":[]},{"text":"impl Clone for if_nameindex","synthetic":false,"types":[]},{"text":"impl Clone for msginfo","synthetic":false,"types":[]},{"text":"impl Clone for sembuf","synthetic":false,"types":[]},{"text":"impl Clone for input_event","synthetic":false,"types":[]},{"text":"impl Clone for input_id","synthetic":false,"types":[]},{"text":"impl Clone for input_absinfo","synthetic":false,"types":[]},{"text":"impl Clone for input_keymap_entry","synthetic":false,"types":[]},{"text":"impl Clone for input_mask","synthetic":false,"types":[]},{"text":"impl Clone for ff_replay","synthetic":false,"types":[]},{"text":"impl Clone for ff_trigger","synthetic":false,"types":[]},{"text":"impl Clone for ff_envelope","synthetic":false,"types":[]},{"text":"impl Clone for ff_constant_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_ramp_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_condition_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_periodic_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_rumble_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_effect","synthetic":false,"types":[]},{"text":"impl Clone for dl_phdr_info","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for ucred","synthetic":false,"types":[]},{"text":"impl Clone for mntent","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawn_file_actions_t","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawnattr_t","synthetic":false,"types":[]},{"text":"impl Clone for genlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for in6_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for arpd_request","synthetic":false,"types":[]},{"text":"impl Clone for inotify_event","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_response","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_vm","synthetic":false,"types":[]},{"text":"impl Clone for regmatch_t","synthetic":false,"types":[]},{"text":"impl Clone for sock_extended_err","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_nl","synthetic":false,"types":[]},{"text":"impl Clone for dirent","synthetic":false,"types":[]},{"text":"impl Clone for dirent64","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_alg","synthetic":false,"types":[]},{"text":"impl Clone for af_alg_iv","synthetic":false,"types":[]},{"text":"impl Clone for mq_attr","synthetic":false,"types":[]},{"text":"impl Clone for statx","synthetic":false,"types":[]},{"text":"impl Clone for statx_timestamp","synthetic":false,"types":[]},{"text":"impl Clone for aiocb","synthetic":false,"types":[]},{"text":"impl Clone for __exit_status","synthetic":false,"types":[]},{"text":"impl Clone for __timeval","synthetic":false,"types":[]},{"text":"impl Clone for glob64_t","synthetic":false,"types":[]},{"text":"impl Clone for msghdr","synthetic":false,"types":[]},{"text":"impl Clone for cmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for termios","synthetic":false,"types":[]},{"text":"impl Clone for mallinfo","synthetic":false,"types":[]},{"text":"impl Clone for nlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for nlmsgerr","synthetic":false,"types":[]},{"text":"impl Clone for nl_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_req","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_hdr","synthetic":false,"types":[]},{"text":"impl Clone for nlattr","synthetic":false,"types":[]},{"text":"impl Clone for rtentry","synthetic":false,"types":[]},{"text":"impl Clone for timex","synthetic":false,"types":[]},{"text":"impl Clone for ntptimeval","synthetic":false,"types":[]},{"text":"impl Clone for regex_t","synthetic":false,"types":[]},{"text":"impl Clone for utmpx","synthetic":false,"types":[]},{"text":"impl Clone for sigset_t","synthetic":false,"types":[]},{"text":"impl Clone for sysinfo","synthetic":false,"types":[]},{"text":"impl Clone for msqid_ds","synthetic":false,"types":[]},{"text":"impl Clone for sigaction","synthetic":false,"types":[]},{"text":"impl Clone for statfs","synthetic":false,"types":[]},{"text":"impl Clone for flock","synthetic":false,"types":[]},{"text":"impl Clone for flock64","synthetic":false,"types":[]},{"text":"impl Clone for siginfo_t","synthetic":false,"types":[]},{"text":"impl Clone for stack_t","synthetic":false,"types":[]},{"text":"impl Clone for stat","synthetic":false,"types":[]},{"text":"impl Clone for stat64","synthetic":false,"types":[]},{"text":"impl Clone for statfs64","synthetic":false,"types":[]},{"text":"impl Clone for statvfs64","synthetic":false,"types":[]},{"text":"impl Clone for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpxreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_xmmreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpstate","synthetic":false,"types":[]},{"text":"impl Clone for user_regs_struct","synthetic":false,"types":[]},{"text":"impl Clone for user","synthetic":false,"types":[]},{"text":"impl Clone for mcontext_t","synthetic":false,"types":[]},{"text":"impl Clone for ipc_perm","synthetic":false,"types":[]},{"text":"impl Clone for shmid_ds","synthetic":false,"types":[]},{"text":"impl Clone for termios2","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreqn","synthetic":false,"types":[]},{"text":"impl Clone for user_fpregs_struct","synthetic":false,"types":[]},{"text":"impl Clone for ucontext_t","synthetic":false,"types":[]},{"text":"impl Clone for statvfs","synthetic":false,"types":[]},{"text":"impl Clone for max_align_t","synthetic":false,"types":[]},{"text":"impl Clone for sem_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_event_metadata","synthetic":false,"types":[]},{"text":"impl Clone for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Clone for in6_addr","synthetic":false,"types":[]}];
implementors["libp2p"] = [{"text":"impl&lt;TInner:&nbsp;Clone&gt; Clone for BandwidthLogging&lt;TInner&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F&gt; Clone for SimpleProtocol&lt;F&gt;","synthetic":false,"types":[]}];
implementors["libp2p_core"] = [{"text":"impl Clone for PeerId","synthetic":false,"types":[]},{"text":"impl&lt;TOutboundOpenInfo:&nbsp;Clone, TCustom:&nbsp;Clone&gt; Clone for ConnectionHandlerEvent&lt;TOutboundOpenInfo, TCustom&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ListenerId","synthetic":false,"types":[]},{"text":"impl&lt;TDialInfo:&nbsp;Clone&gt; Clone for SubstreamEndpoint&lt;TDialInfo&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ConnectionId","synthetic":false,"types":[]},{"text":"impl Clone for Endpoint","synthetic":false,"types":[]},{"text":"impl Clone for ConnectedPoint","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Connected&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Event&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for IncomingInfo&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, TPeerId:&nbsp;Clone&gt; Clone for OutgoingInfo&lt;'a, TPeerId&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ConnectionLimit","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for EitherError&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for EitherOutput&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + StreamMuxer, B:&nbsp;Clone + StreamMuxer&gt; Clone for EitherOutbound&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::OutboundSubstream: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::OutboundSubstream: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for EitherListenStream&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for EitherFuture&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for EitherFuture2&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for EitherName&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for EitherTransport&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Keypair","synthetic":false,"types":[]},{"text":"impl Clone for PublicKey","synthetic":false,"types":[]},{"text":"impl Clone for SecretKey","synthetic":false,"types":[]},{"text":"impl Clone for Keypair","synthetic":false,"types":[]},{"text":"impl Clone for PublicKey","synthetic":false,"types":[]},{"text":"impl Clone for Keypair","synthetic":false,"types":[]},{"text":"impl Clone for SecretKey","synthetic":false,"types":[]},{"text":"impl Clone for PublicKey","synthetic":false,"types":[]},{"text":"impl Clone for Keypair","synthetic":false,"types":[]},{"text":"impl Clone for PublicKey","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for StreamMuxerEvent&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for NetworkInfo","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, C:&nbsp;Clone&gt; Clone for AndThen&lt;T, C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;TListener:&nbsp;Clone, TMap:&nbsp;Clone&gt; Clone for AndThenStream&lt;TListener, TMap&gt;","synthetic":false,"types":[]},{"text":"impl&lt;O, E&gt; Clone for Boxed&lt;O, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for OrTransport&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;TOut&gt; Clone for DummyTransport&lt;TOut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Map&lt;T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapStream&lt;T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapFuture&lt;T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapErr&lt;T, F&gt;","synthetic":false,"types":[]},{"text":"impl Clone for MemoryTransport","synthetic":false,"types":[]},{"text":"impl Clone for MemoryTransportError","synthetic":false,"types":[]},{"text":"impl&lt;InnerTrans:&nbsp;Clone&gt; Clone for TransportTimeout&lt;InnerTrans&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, U:&nbsp;Clone&gt; Clone for Upgrade&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OptionalTransport&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;TUpgr:&nbsp;Clone, TErr:&nbsp;Clone&gt; Clone for ListenerEvent&lt;TUpgr, TErr&gt;","synthetic":false,"types":[]},{"text":"impl&lt;TErr:&nbsp;Clone&gt; Clone for TransportError&lt;TErr&gt;","synthetic":false,"types":[]},{"text":"impl Clone for DeniedUpgrade","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for EitherUpgrade&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FromFnUpgrade&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapInboundUpgrade&lt;U, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapOutboundUpgrade&lt;U, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapInboundUpgradeErr&lt;U, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapOutboundUpgradeErr&lt;U, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OptionalUpgrade&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for SelectUpgrade&lt;A, B&gt;","synthetic":false,"types":[]}];
implementors["libp2p_deflate"] = [{"text":"impl Clone for DeflateConfig","synthetic":false,"types":[]}];
implementors["libp2p_dns"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DnsConfig&lt;T&gt;","synthetic":false,"types":[]}];
implementors["libp2p_floodsub"] = [{"text":"impl Clone for FloodsubProtocol","synthetic":false,"types":[]},{"text":"impl Clone for FloodsubRpc","synthetic":false,"types":[]},{"text":"impl Clone for FloodsubMessage","synthetic":false,"types":[]},{"text":"impl Clone for FloodsubSubscription","synthetic":false,"types":[]},{"text":"impl Clone for FloodsubSubscriptionAction","synthetic":false,"types":[]},{"text":"impl Clone for Topic","synthetic":false,"types":[]}];
implementors["libp2p_gossipsub"] = [{"text":"impl Clone for ProtocolConfig","synthetic":false,"types":[]},{"text":"impl Clone for MessageId","synthetic":false,"types":[]},{"text":"impl Clone for GossipsubMessage","synthetic":false,"types":[]},{"text":"impl Clone for GossipsubSubscription","synthetic":false,"types":[]},{"text":"impl Clone for GossipsubSubscriptionAction","synthetic":false,"types":[]},{"text":"impl Clone for GossipsubControlAction","synthetic":false,"types":[]},{"text":"impl Clone for MessageAuthenticity","synthetic":false,"types":[]},{"text":"impl Clone for GossipsubRpc","synthetic":false,"types":[]},{"text":"impl Clone for GossipsubEvent","synthetic":false,"types":[]},{"text":"impl Clone for ValidationMode","synthetic":false,"types":[]},{"text":"impl Clone for GossipsubConfig","synthetic":false,"types":[]},{"text":"impl Clone for TopicHash","synthetic":false,"types":[]},{"text":"impl Clone for Topic","synthetic":false,"types":[]}];
implementors["libp2p_identify"] = [{"text":"impl Clone for IdentifyInfo","synthetic":false,"types":[]}];
implementors["libp2p_kad"] = [{"text":"impl Clone for KademliaHandlerConfig","synthetic":false,"types":[]},{"text":"impl&lt;TUserData:&nbsp;Clone&gt; Clone for KademliaHandlerIn&lt;TUserData&gt;","synthetic":false,"types":[]},{"text":"impl Clone for KademliaRequestId","synthetic":false,"types":[]},{"text":"impl Clone for NodeStatus","synthetic":false,"types":[]},{"text":"impl&lt;TKey:&nbsp;Clone, TVal:&nbsp;Clone&gt; Clone for Node&lt;TKey, TVal&gt;","synthetic":false,"types":[]},{"text":"impl&lt;TKey:&nbsp;Clone&gt; Clone for InsertResult&lt;TKey&gt;","synthetic":false,"types":[]},{"text":"impl&lt;TKey:&nbsp;Clone, TVal:&nbsp;Clone&gt; Clone for AppliedPending&lt;TKey, TVal&gt;","synthetic":false,"types":[]},{"text":"impl&lt;TKey:&nbsp;Clone, TVal:&nbsp;Clone&gt; Clone for EntryView&lt;TKey, TVal&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Key&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for KeyBytes","synthetic":false,"types":[]},{"text":"impl Clone for Distance","synthetic":false,"types":[]},{"text":"impl&lt;TKey:&nbsp;Clone, TVal:&nbsp;Clone&gt; Clone for KBucketsTable&lt;TKey, TVal&gt;","synthetic":false,"types":[]},{"text":"impl Clone for KadConnectionType","synthetic":false,"types":[]},{"text":"impl Clone for KadPeer","synthetic":false,"types":[]},{"text":"impl Clone for KademliaProtocolConfig","synthetic":false,"types":[]},{"text":"impl Clone for KadRequestMsg","synthetic":false,"types":[]},{"text":"impl Clone for KadResponseMsg","synthetic":false,"types":[]},{"text":"impl Clone for Key","synthetic":false,"types":[]},{"text":"impl Clone for Record","synthetic":false,"types":[]},{"text":"impl Clone for ProviderRecord","synthetic":false,"types":[]},{"text":"impl Clone for Addresses","synthetic":false,"types":[]},{"text":"impl Clone for KademliaBucketInserts","synthetic":false,"types":[]},{"text":"impl Clone for KademliaConfig","synthetic":false,"types":[]},{"text":"impl Clone for Quorum","synthetic":false,"types":[]},{"text":"impl Clone for PeerRecord","synthetic":false,"types":[]},{"text":"impl Clone for GetRecordOk","synthetic":false,"types":[]},{"text":"impl Clone for GetRecordError","synthetic":false,"types":[]},{"text":"impl Clone for PutRecordOk","synthetic":false,"types":[]},{"text":"impl Clone for BootstrapOk","synthetic":false,"types":[]},{"text":"impl Clone for BootstrapError","synthetic":false,"types":[]},{"text":"impl Clone for GetClosestPeersOk","synthetic":false,"types":[]},{"text":"impl Clone for GetClosestPeersError","synthetic":false,"types":[]},{"text":"impl Clone for GetProvidersOk","synthetic":false,"types":[]},{"text":"impl Clone for GetProvidersError","synthetic":false,"types":[]},{"text":"impl Clone for AddProviderOk","synthetic":false,"types":[]},{"text":"impl Clone for AddProviderContext","synthetic":false,"types":[]},{"text":"impl Clone for PutRecordContext","synthetic":false,"types":[]},{"text":"impl Clone for QueryInfo","synthetic":false,"types":[]},{"text":"impl Clone for AddProviderPhase","synthetic":false,"types":[]},{"text":"impl Clone for PutRecordPhase","synthetic":false,"types":[]},{"text":"impl Clone for QueryId","synthetic":false,"types":[]},{"text":"impl Clone for QueryStats","synthetic":false,"types":[]}];
implementors["libp2p_mdns"] = [{"text":"impl Clone for MdnsResponseError","synthetic":false,"types":[]}];
implementors["libp2p_mplex"] = [{"text":"impl Clone for MplexConfig","synthetic":false,"types":[]},{"text":"impl Clone for MaxBufferBehaviour","synthetic":false,"types":[]}];
implementors["libp2p_noise"] = [{"text":"impl Clone for X25519","synthetic":false,"types":[]},{"text":"impl Clone for X25519Spec","synthetic":false,"types":[]},{"text":"impl Clone for ProtocolParams","synthetic":false,"types":[]},{"text":"impl Clone for IK","synthetic":false,"types":[]},{"text":"impl Clone for IX","synthetic":false,"types":[]},{"text":"impl Clone for XX","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Zeroize&gt; Clone for Keypair&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Zeroize&gt; Clone for AuthenticKeypair&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for KeypairIdentity","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Zeroize&gt; Clone for SecretKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for PublicKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, C:&nbsp;Clone + Zeroize, R:&nbsp;Clone&gt; Clone for NoiseConfig&lt;P, C, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, C:&nbsp;Clone + Zeroize, R:&nbsp;Clone&gt; Clone for NoiseAuthenticated&lt;P, C, R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for LegacyConfig","synthetic":false,"types":[]}];
implementors["libp2p_ping"] = [{"text":"impl Clone for Ping","synthetic":false,"types":[]},{"text":"impl Clone for PingConfig","synthetic":false,"types":[]}];
implementors["libp2p_plaintext"] = [{"text":"impl Clone for PlainText1Config","synthetic":false,"types":[]},{"text":"impl Clone for PlainText2Config","synthetic":false,"types":[]}];
implementors["libp2p_pnet"] = [{"text":"impl Clone for PreSharedKey","synthetic":false,"types":[]},{"text":"impl Clone for Fingerprint","synthetic":false,"types":[]},{"text":"impl Clone for KeyParseError","synthetic":false,"types":[]},{"text":"impl Clone for PnetConfig","synthetic":false,"types":[]}];
implementors["libp2p_request_response"] = [{"text":"impl Clone for ProtocolSupport","synthetic":false,"types":[]},{"text":"impl&lt;TCodec:&nbsp;Clone&gt; Clone for RequestProtocol&lt;TCodec&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TCodec: RequestResponseCodec,<br>&nbsp;&nbsp;&nbsp;&nbsp;TCodec::Protocol: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;TCodec::Request: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for RequestId","synthetic":false,"types":[]},{"text":"impl Clone for RequestResponseConfig","synthetic":false,"types":[]}];
implementors["libp2p_swarm"] = [{"text":"impl&lt;TInEvent:&nbsp;Clone, TOutEvent:&nbsp;Clone&gt; Clone for NetworkBehaviourAction&lt;TInEvent, TOutEvent&gt;","synthetic":false,"types":[]},{"text":"impl Clone for NotifyHandler","synthetic":false,"types":[]},{"text":"impl Clone for DialPeerCondition","synthetic":false,"types":[]},{"text":"impl Clone for DummyProtocolsHandler","synthetic":false,"types":[]},{"text":"impl&lt;TProto1:&nbsp;Clone, TProto2:&nbsp;Clone&gt; Clone for IntoProtocolsHandlerSelect&lt;TProto1, TProto2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;TProto1:&nbsp;Clone, TProto2:&nbsp;Clone&gt; Clone for ProtocolsHandlerSelect&lt;TProto1, TProto2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, H:&nbsp;Clone&gt; Clone for MultiHandler&lt;K, H&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, H:&nbsp;Clone&gt; Clone for IntoMultiHandler&lt;K, H&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone&gt; Clone for IndexedProtoName&lt;H&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, I:&nbsp;Clone&gt; Clone for Info&lt;K, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, H:&nbsp;Clone&gt; Clone for Upgrade&lt;K, H&gt;","synthetic":false,"types":[]},{"text":"impl Clone for DuplicateProtonameError","synthetic":false,"types":[]},{"text":"impl&lt;TUpgrade:&nbsp;Clone, TInfo:&nbsp;Clone&gt; Clone for SubstreamProtocol&lt;TUpgrade, TInfo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;TConnectionUpgrade:&nbsp;Clone, TOutboundOpenInfo:&nbsp;Clone, TCustom:&nbsp;Clone, TErr:&nbsp;Clone&gt; Clone for ProtocolsHandlerEvent&lt;TConnectionUpgrade, TOutboundOpenInfo, TCustom, TErr&gt;","synthetic":false,"types":[]},{"text":"impl Clone for KeepAlive","synthetic":false,"types":[]},{"text":"impl Clone for DummyBehaviour","synthetic":false,"types":[]}];
implementors["libp2p_tcp"] = [{"text":"impl Clone for TcpConfig","synthetic":false,"types":[]}];
implementors["libp2p_uds"] = [{"text":"impl Clone for UdsConfig","synthetic":false,"types":[]}];
implementors["libp2p_wasm_ext"] = [{"text":"impl Clone for ExtTransport","synthetic":false,"types":[]}];
implementors["libp2p_websocket"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for WsConfig&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for IncomingData","synthetic":false,"types":[]},{"text":"impl Clone for OutgoingData","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for PrivateKey","synthetic":false,"types":[]},{"text":"impl Clone for Certificate","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for WsConfig&lt;T&gt;","synthetic":false,"types":[]}];
implementors["libp2p_yamux"] = [{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for LocalConfig","synthetic":false,"types":[]}];
implementors["librocksdb_sys"] = [{"text":"impl Clone for __fsid_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_backup_engine_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_backup_engine_info_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_restore_options_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_cache_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_compactionfilter_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_compactionfiltercontext_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_compactionfilterfactory_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_comparator_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_dbpath_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_env_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_fifo_compaction_options_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_filelock_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_filterpolicy_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_flushoptions_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_iterator_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_logger_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_mergeoperator_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_options_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_compactoptions_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_block_based_table_options_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_cuckoo_table_options_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_randomfile_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_readoptions_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_seqfile_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_slicetransform_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_snapshot_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_writablefile_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_writebatch_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_writebatch_wi_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_writeoptions_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_universal_compaction_options_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_livefiles_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_column_family_handle_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_envoptions_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_ingestexternalfileoptions_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_sstfilewriter_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_ratelimiter_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_perfcontext_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_pinnableslice_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_transactiondb_options_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_transactiondb_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_transaction_options_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_optimistictransactiondb_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_optimistictransaction_options_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_transaction_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_checkpoint_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_wal_iterator_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_wal_readoptions_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_memory_consumers_t","synthetic":false,"types":[]},{"text":"impl Clone for rocksdb_memory_usage_t","synthetic":false,"types":[]},{"text":"impl Clone for __va_list_tag","synthetic":false,"types":[]}];
implementors["libz_sys"] = [{"text":"impl Clone for gz_header","synthetic":false,"types":[]},{"text":"impl Clone for z_stream","synthetic":false,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K:&nbsp;Hash + Eq + Clone, V:&nbsp;Clone, S:&nbsp;BuildHasher + Clone&gt; Clone for LinkedHashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Clone for Iter&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Clone for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Clone for Keys&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Clone for Values&lt;'a, K, V&gt;","synthetic":false,"types":[]}];
implementors["linked_hash_set"] = [{"text":"impl&lt;T:&nbsp;Hash + Eq + Clone, S:&nbsp;BuildHasher + Clone&gt; Clone for LinkedHashSet&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K&gt; Clone for Iter&lt;'a, K&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, S&gt; Clone for Intersection&lt;'a, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, S&gt; Clone for Difference&lt;'a, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, S&gt; Clone for SymmetricDifference&lt;'a, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, S&gt; Clone for Union&lt;'a, T, S&gt;","synthetic":false,"types":[]}];
implementors["linregress"] = [{"text":"impl&lt;'a&gt; Clone for FormulaRegressionBuilder&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for RegressionData&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RegressionDataBuilder","synthetic":false,"types":[]},{"text":"impl Clone for InvalidValueHandling","synthetic":false,"types":[]},{"text":"impl Clone for RegressionModel","synthetic":false,"types":[]},{"text":"impl Clone for RegressionParameters","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'k&gt; Clone for Key&lt;'k&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Level","synthetic":false,"types":[]},{"text":"impl Clone for LevelFilter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Metadata&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["lru"] = [{"text":"impl&lt;'a, K, V&gt; Clone for Iter&lt;'a, K, V&gt;","synthetic":false,"types":[]}];
implementors["lru_time_cache"] = [{"text":"impl&lt;Key, Value&gt; Clone for LruCache&lt;Key, Value&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["matchers"] = [{"text":"impl&lt;S:&nbsp;Clone, A:&nbsp;Clone&gt; Clone for Pattern&lt;S, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: StateID,<br>&nbsp;&nbsp;&nbsp;&nbsp;A: DFA&lt;ID = S&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;Clone, A:&nbsp;Clone&gt; Clone for Matcher&lt;'a, S, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: StateID,<br>&nbsp;&nbsp;&nbsp;&nbsp;A: DFA&lt;ID = S&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["memmap"] = [{"text":"impl Clone for MmapOptions","synthetic":false,"types":[]}];
implementors["memory_db"] = [{"text":"impl&lt;T&gt; Clone for MemCounter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for NoopTracker&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H, KF, T, M&gt; Clone for MemoryDB&lt;H, KF, T, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: KeyHasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;KF: KeyFunction&lt;H&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: MemTracker&lt;T&gt; + Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H&gt; Clone for HashKey&lt;H&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H&gt; Clone for PrefixedKey&lt;H&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone + KeyHasher&gt; Clone for LegacyPrefixedKey&lt;H&gt;","synthetic":false,"types":[]}];
implementors["memory_units"] = [{"text":"impl Clone for Bytes","synthetic":false,"types":[]},{"text":"impl Clone for Words","synthetic":false,"types":[]},{"text":"impl Clone for Pages","synthetic":false,"types":[]},{"text":"impl Clone for Words","synthetic":false,"types":[]},{"text":"impl Clone for Pages","synthetic":false,"types":[]}];
implementors["merlin"] = [{"text":"impl Clone for Transcript","synthetic":false,"types":[]}];
implementors["minicbor"] = [{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for Tag","synthetic":false,"types":[]},{"text":"impl&lt;'b&gt; Clone for Decoder&lt;'b&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;Clone&gt; Clone for Encoder&lt;W&gt;","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;Clone&gt; Clone for Error&lt;W&gt;","synthetic":false,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Clone for CompressionStrategy","synthetic":false,"types":[]},{"text":"impl Clone for TDEFLFlush","synthetic":false,"types":[]},{"text":"impl Clone for TDEFLStatus","synthetic":false,"types":[]},{"text":"impl Clone for CompressionLevel","synthetic":false,"types":[]},{"text":"impl Clone for TINFLStatus","synthetic":false,"types":[]},{"text":"impl Clone for MZFlush","synthetic":false,"types":[]},{"text":"impl Clone for MZStatus","synthetic":false,"types":[]},{"text":"impl Clone for MZError","synthetic":false,"types":[]},{"text":"impl Clone for DataFormat","synthetic":false,"types":[]},{"text":"impl Clone for StreamResult","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl Clone for PollOpt","synthetic":false,"types":[]},{"text":"impl Clone for Ready","synthetic":false,"types":[]},{"text":"impl Clone for Event","synthetic":false,"types":[]},{"text":"impl Clone for SetReadiness","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Iter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UnixReady","synthetic":false,"types":[]},{"text":"impl Clone for Token","synthetic":false,"types":[]}];
implementors["mio_extras"] = [{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for SyncSender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Timeout","synthetic":false,"types":[]}];
implementors["multihash"] = [{"text":"impl&lt;T:&nbsp;Clone + TryFrom&lt;u64&gt;&gt; Clone for MultihashGeneric&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for MultihashRefGeneric&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for EncodeError","synthetic":false,"types":[]},{"text":"impl Clone for DecodeError","synthetic":false,"types":[]},{"text":"impl Clone for DecodeOwnedError","synthetic":false,"types":[]},{"text":"impl Clone for Code","synthetic":false,"types":[]},{"text":"impl Clone for Identity","synthetic":false,"types":[]},{"text":"impl Clone for Sha1","synthetic":false,"types":[]},{"text":"impl Clone for Sha2_256","synthetic":false,"types":[]},{"text":"impl Clone for Sha2_512","synthetic":false,"types":[]},{"text":"impl Clone for Sha3_224","synthetic":false,"types":[]},{"text":"impl Clone for Sha3_256","synthetic":false,"types":[]},{"text":"impl Clone for Sha3_384","synthetic":false,"types":[]},{"text":"impl Clone for Sha3_512","synthetic":false,"types":[]},{"text":"impl Clone for Keccak224","synthetic":false,"types":[]},{"text":"impl Clone for Keccak256","synthetic":false,"types":[]},{"text":"impl Clone for Keccak384","synthetic":false,"types":[]},{"text":"impl Clone for Keccak512","synthetic":false,"types":[]},{"text":"impl Clone for Blake2b256","synthetic":false,"types":[]},{"text":"impl Clone for Blake2b512","synthetic":false,"types":[]},{"text":"impl Clone for Blake2s128","synthetic":false,"types":[]},{"text":"impl Clone for Blake2s256","synthetic":false,"types":[]}];
implementors["multistream_select"] = [{"text":"impl Clone for Version","synthetic":false,"types":[]}];
implementors["nalgebra"] = [{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for X&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for XY&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for XYZ&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for XYZW&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for XYZWA&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for XYZWAB&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for IJKW&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M2x2&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M2x3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M2x4&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M2x5&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M2x6&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M3x2&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M3x3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M3x4&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M3x5&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M3x6&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M4x2&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M4x3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M4x4&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M4x5&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M4x6&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M5x2&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M5x3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M5x4&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M5x5&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M5x6&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M6x2&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M6x3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M6x4&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M6x5&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar&gt; Clone for M6x6&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Dynamic","synthetic":false,"types":[]},{"text":"impl Clone for U1","synthetic":false,"types":[]},{"text":"impl Clone for U0","synthetic":false,"types":[]},{"text":"impl Clone for U2","synthetic":false,"types":[]},{"text":"impl Clone for U3","synthetic":false,"types":[]},{"text":"impl Clone for U4","synthetic":false,"types":[]},{"text":"impl Clone for U5","synthetic":false,"types":[]},{"text":"impl Clone for U6","synthetic":false,"types":[]},{"text":"impl Clone for U7","synthetic":false,"types":[]},{"text":"impl Clone for U8","synthetic":false,"types":[]},{"text":"impl Clone for U9","synthetic":false,"types":[]},{"text":"impl Clone for U10","synthetic":false,"types":[]},{"text":"impl Clone for U11","synthetic":false,"types":[]},{"text":"impl Clone for U12","synthetic":false,"types":[]},{"text":"impl Clone for U13","synthetic":false,"types":[]},{"text":"impl Clone for U14","synthetic":false,"types":[]},{"text":"impl Clone for U15","synthetic":false,"types":[]},{"text":"impl Clone for U16","synthetic":false,"types":[]},{"text":"impl Clone for U17","synthetic":false,"types":[]},{"text":"impl Clone for U18","synthetic":false,"types":[]},{"text":"impl Clone for U19","synthetic":false,"types":[]},{"text":"impl Clone for U20","synthetic":false,"types":[]},{"text":"impl Clone for U21","synthetic":false,"types":[]},{"text":"impl Clone for U22","synthetic":false,"types":[]},{"text":"impl Clone for U23","synthetic":false,"types":[]},{"text":"impl Clone for U24","synthetic":false,"types":[]},{"text":"impl Clone for U25","synthetic":false,"types":[]},{"text":"impl Clone for U26","synthetic":false,"types":[]},{"text":"impl Clone for U27","synthetic":false,"types":[]},{"text":"impl Clone for U28","synthetic":false,"types":[]},{"text":"impl Clone for U29","synthetic":false,"types":[]},{"text":"impl Clone for U30","synthetic":false,"types":[]},{"text":"impl Clone for U31","synthetic":false,"types":[]},{"text":"impl Clone for U32","synthetic":false,"types":[]},{"text":"impl Clone for U33","synthetic":false,"types":[]},{"text":"impl Clone for U34","synthetic":false,"types":[]},{"text":"impl Clone for U35","synthetic":false,"types":[]},{"text":"impl Clone for U36","synthetic":false,"types":[]},{"text":"impl Clone for U37","synthetic":false,"types":[]},{"text":"impl Clone for U38","synthetic":false,"types":[]},{"text":"impl Clone for U39","synthetic":false,"types":[]},{"text":"impl Clone for U40","synthetic":false,"types":[]},{"text":"impl Clone for U41","synthetic":false,"types":[]},{"text":"impl Clone for U42","synthetic":false,"types":[]},{"text":"impl Clone for U43","synthetic":false,"types":[]},{"text":"impl Clone for U44","synthetic":false,"types":[]},{"text":"impl Clone for U45","synthetic":false,"types":[]},{"text":"impl Clone for U46","synthetic":false,"types":[]},{"text":"impl Clone for U47","synthetic":false,"types":[]},{"text":"impl Clone for U48","synthetic":false,"types":[]},{"text":"impl Clone for U49","synthetic":false,"types":[]},{"text":"impl Clone for U50","synthetic":false,"types":[]},{"text":"impl Clone for U51","synthetic":false,"types":[]},{"text":"impl Clone for U52","synthetic":false,"types":[]},{"text":"impl Clone for U53","synthetic":false,"types":[]},{"text":"impl Clone for U54","synthetic":false,"types":[]},{"text":"impl Clone for U55","synthetic":false,"types":[]},{"text":"impl Clone for U56","synthetic":false,"types":[]},{"text":"impl Clone for U57","synthetic":false,"types":[]},{"text":"impl Clone for U58","synthetic":false,"types":[]},{"text":"impl Clone for U59","synthetic":false,"types":[]},{"text":"impl Clone for U60","synthetic":false,"types":[]},{"text":"impl Clone for U61","synthetic":false,"types":[]},{"text":"impl Clone for U62","synthetic":false,"types":[]},{"text":"impl Clone for U63","synthetic":false,"types":[]},{"text":"impl Clone for U64","synthetic":false,"types":[]},{"text":"impl Clone for U65","synthetic":false,"types":[]},{"text":"impl Clone for U66","synthetic":false,"types":[]},{"text":"impl Clone for U67","synthetic":false,"types":[]},{"text":"impl Clone for U68","synthetic":false,"types":[]},{"text":"impl Clone for U69","synthetic":false,"types":[]},{"text":"impl Clone for U70","synthetic":false,"types":[]},{"text":"impl Clone for U71","synthetic":false,"types":[]},{"text":"impl Clone for U72","synthetic":false,"types":[]},{"text":"impl Clone for U73","synthetic":false,"types":[]},{"text":"impl Clone for U74","synthetic":false,"types":[]},{"text":"impl Clone for U75","synthetic":false,"types":[]},{"text":"impl Clone for U76","synthetic":false,"types":[]},{"text":"impl Clone for U77","synthetic":false,"types":[]},{"text":"impl Clone for U78","synthetic":false,"types":[]},{"text":"impl Clone for U79","synthetic":false,"types":[]},{"text":"impl Clone for U80","synthetic":false,"types":[]},{"text":"impl Clone for U81","synthetic":false,"types":[]},{"text":"impl Clone for U82","synthetic":false,"types":[]},{"text":"impl Clone for U83","synthetic":false,"types":[]},{"text":"impl Clone for U84","synthetic":false,"types":[]},{"text":"impl Clone for U85","synthetic":false,"types":[]},{"text":"impl Clone for U86","synthetic":false,"types":[]},{"text":"impl Clone for U87","synthetic":false,"types":[]},{"text":"impl Clone for U88","synthetic":false,"types":[]},{"text":"impl Clone for U89","synthetic":false,"types":[]},{"text":"impl Clone for U90","synthetic":false,"types":[]},{"text":"impl Clone for U91","synthetic":false,"types":[]},{"text":"impl Clone for U92","synthetic":false,"types":[]},{"text":"impl Clone for U93","synthetic":false,"types":[]},{"text":"impl Clone for U94","synthetic":false,"types":[]},{"text":"impl Clone for U95","synthetic":false,"types":[]},{"text":"impl Clone for U96","synthetic":false,"types":[]},{"text":"impl Clone for U97","synthetic":false,"types":[]},{"text":"impl Clone for U98","synthetic":false,"types":[]},{"text":"impl Clone for U99","synthetic":false,"types":[]},{"text":"impl Clone for U100","synthetic":false,"types":[]},{"text":"impl Clone for U101","synthetic":false,"types":[]},{"text":"impl Clone for U102","synthetic":false,"types":[]},{"text":"impl Clone for U103","synthetic":false,"types":[]},{"text":"impl Clone for U104","synthetic":false,"types":[]},{"text":"impl Clone for U105","synthetic":false,"types":[]},{"text":"impl Clone for U106","synthetic":false,"types":[]},{"text":"impl Clone for U107","synthetic":false,"types":[]},{"text":"impl Clone for U108","synthetic":false,"types":[]},{"text":"impl Clone for U109","synthetic":false,"types":[]},{"text":"impl Clone for U110","synthetic":false,"types":[]},{"text":"impl Clone for U111","synthetic":false,"types":[]},{"text":"impl Clone for U112","synthetic":false,"types":[]},{"text":"impl Clone for U113","synthetic":false,"types":[]},{"text":"impl Clone for U114","synthetic":false,"types":[]},{"text":"impl Clone for U115","synthetic":false,"types":[]},{"text":"impl Clone for U116","synthetic":false,"types":[]},{"text":"impl Clone for U117","synthetic":false,"types":[]},{"text":"impl Clone for U118","synthetic":false,"types":[]},{"text":"impl Clone for U119","synthetic":false,"types":[]},{"text":"impl Clone for U120","synthetic":false,"types":[]},{"text":"impl Clone for U121","synthetic":false,"types":[]},{"text":"impl Clone for U122","synthetic":false,"types":[]},{"text":"impl Clone for U123","synthetic":false,"types":[]},{"text":"impl Clone for U124","synthetic":false,"types":[]},{"text":"impl Clone for U125","synthetic":false,"types":[]},{"text":"impl Clone for U126","synthetic":false,"types":[]},{"text":"impl Clone for U127","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Clone + Scalar, R:&nbsp;Clone + Dim, C:&nbsp;Clone + Dim, S:&nbsp;Clone + Storage&lt;N, R, C&gt;&gt; Clone for RowIter&lt;'a, N, R, C, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Clone + Scalar, R:&nbsp;Clone + Dim, C:&nbsp;Clone + Dim, S:&nbsp;Clone + Storage&lt;N, R, C&gt;&gt; Clone for ColumnIter&lt;'a, N, R, C, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar, R:&nbsp;Clone + Dim, C:&nbsp;Clone + Dim, S:&nbsp;Clone&gt; Clone for Matrix&lt;N, R, C, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N, R, C&gt; Clone for ArrayStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: DimName,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: DimName,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Value: Mul&lt;C::Value&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Prod&lt;R::Value, C::Value&gt;: ArrayLength&lt;N&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Scalar, R:&nbsp;Dim, C:&nbsp;Dim, RStride:&nbsp;Dim, CStride:&nbsp;Dim&gt; Clone for SliceStorage&lt;'a, N, R, C, RStride, CStride&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, R:&nbsp;Clone + Dim, C:&nbsp;Clone + Dim&gt; Clone for VecStorage&lt;N, R, C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Unit&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Scalar, D:&nbsp;Clone + DimName&gt; Clone for Point&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, D:&nbsp;DimName&gt; Clone for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;DefaultAllocator as Allocator&lt;N, D, D&gt;&gt;::Buffer: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField&gt; Clone for Quaternion&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, D:&nbsp;DimName&gt; Clone for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Owned&lt;N, D&gt;: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField, D:&nbsp;DimName, R:&nbsp;Rotation&lt;Point&lt;N, D&gt;&gt; + Clone&gt; Clone for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField, D:&nbsp;DimName, R:&nbsp;Rotation&lt;Point&lt;N, D&gt;&gt; + Clone&gt; Clone for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for TGeneral","synthetic":false,"types":[]},{"text":"impl Clone for TProjective","synthetic":false,"types":[]},{"text":"impl Clone for TAffine","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; Clone for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField&gt; Clone for Orthographic3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField&gt; Clone for Perspective3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + ComplexField, R:&nbsp;Clone + DimMin&lt;C&gt;, C:&nbsp;Clone + Dim&gt; Clone for Bidiagonal&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DimMinimum&lt;R, C&gt;: DimSub&lt;U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt; + Allocator&lt;N, DimMinimum&lt;R, C&gt;&gt; + Allocator&lt;N, DimDiff&lt;DimMinimum&lt;R, C&gt;, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + ComplexField, D:&nbsp;Clone + Dim&gt; Clone for Cholesky&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + ComplexField, R:&nbsp;Clone + DimMin&lt;C&gt;, C:&nbsp;Clone + Dim&gt; Clone for FullPivLU&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt; + Allocator&lt;(usize, usize), DimMinimum&lt;R, C&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + ComplexField&gt; Clone for GivensRotation&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::RealField: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + ComplexField, D:&nbsp;Clone + DimSub&lt;U1&gt;&gt; Clone for Hessenberg&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimDiff&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + ComplexField, R:&nbsp;Clone + DimMin&lt;C&gt;, C:&nbsp;Clone + Dim&gt; Clone for LU&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt; + Allocator&lt;(usize, usize), DimMinimum&lt;R, C&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone + Dim&gt; Clone for PermutationSequence&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;(usize, usize), D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + ComplexField, R:&nbsp;Clone + DimMin&lt;C&gt;, C:&nbsp;Clone + Dim&gt; Clone for QR&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt; + Allocator&lt;N, DimMinimum&lt;R, C&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + ComplexField, D:&nbsp;Clone + Dim&gt; Clone for Schur&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + ComplexField, R:&nbsp;Clone + DimMin&lt;C&gt;, C:&nbsp;Clone + Dim&gt; Clone for SVD&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimMinimum&lt;R, C&gt;, C&gt; + Allocator&lt;N, R, DimMinimum&lt;R, C&gt;&gt; + Allocator&lt;N::RealField, DimMinimum&lt;R, C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::RealField: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + ComplexField, D:&nbsp;Clone + Dim&gt; Clone for SymmetricEigen&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N::RealField, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::RealField: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + ComplexField, D:&nbsp;Clone + DimSub&lt;U1&gt;&gt; Clone for SymmetricTridiagonal&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimDiff&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Clone for Dir","synthetic":false,"types":[]},{"text":"impl Clone for Entry","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for Errno","synthetic":false,"types":[]},{"text":"impl Clone for AtFlags","synthetic":false,"types":[]},{"text":"impl Clone for OFlag","synthetic":false,"types":[]},{"text":"impl Clone for SealFlag","synthetic":false,"types":[]},{"text":"impl Clone for FdFlag","synthetic":false,"types":[]},{"text":"impl Clone for FlockArg","synthetic":false,"types":[]},{"text":"impl Clone for SpliceFFlags","synthetic":false,"types":[]},{"text":"impl Clone for FallocateFlags","synthetic":false,"types":[]},{"text":"impl Clone for PosixFadviseAdvice","synthetic":false,"types":[]},{"text":"impl Clone for InterfaceAddress","synthetic":false,"types":[]},{"text":"impl Clone for ModuleInitFlags","synthetic":false,"types":[]},{"text":"impl Clone for DeleteModuleFlags","synthetic":false,"types":[]},{"text":"impl Clone for MsFlags","synthetic":false,"types":[]},{"text":"impl Clone for MntFlags","synthetic":false,"types":[]},{"text":"impl Clone for MQ_OFlag","synthetic":false,"types":[]},{"text":"impl Clone for FdFlag","synthetic":false,"types":[]},{"text":"impl Clone for MqAttr","synthetic":false,"types":[]},{"text":"impl Clone for InterfaceFlags","synthetic":false,"types":[]},{"text":"impl Clone for PollFd","synthetic":false,"types":[]},{"text":"impl Clone for PollFlags","synthetic":false,"types":[]},{"text":"impl Clone for OpenptyResult","synthetic":false,"types":[]},{"text":"impl Clone for ForkptyResult","synthetic":false,"types":[]},{"text":"impl Clone for PtyMaster","synthetic":false,"types":[]},{"text":"impl Clone for CloneFlags","synthetic":false,"types":[]},{"text":"impl Clone for CpuSet","synthetic":false,"types":[]},{"text":"impl Clone for AioFsyncMode","synthetic":false,"types":[]},{"text":"impl Clone for LioOpcode","synthetic":false,"types":[]},{"text":"impl Clone for LioMode","synthetic":false,"types":[]},{"text":"impl Clone for AioCancelStat","synthetic":false,"types":[]},{"text":"impl Clone for EpollFlags","synthetic":false,"types":[]},{"text":"impl Clone for EpollOp","synthetic":false,"types":[]},{"text":"impl Clone for EpollCreateFlags","synthetic":false,"types":[]},{"text":"impl Clone for EpollEvent","synthetic":false,"types":[]},{"text":"impl Clone for EfdFlags","synthetic":false,"types":[]},{"text":"impl Clone for MemFdCreateFlag","synthetic":false,"types":[]},{"text":"impl Clone for ProtFlags","synthetic":false,"types":[]},{"text":"impl Clone for MapFlags","synthetic":false,"types":[]},{"text":"impl Clone for MmapAdvise","synthetic":false,"types":[]},{"text":"impl Clone for MsFlags","synthetic":false,"types":[]},{"text":"impl Clone for MlockAllFlags","synthetic":false,"types":[]},{"text":"impl Clone for Request","synthetic":false,"types":[]},{"text":"impl Clone for Event","synthetic":false,"types":[]},{"text":"impl Clone for Options","synthetic":false,"types":[]},{"text":"impl Clone for QuotaType","synthetic":false,"types":[]},{"text":"impl Clone for QuotaFmt","synthetic":false,"types":[]},{"text":"impl Clone for QuotaValidFlags","synthetic":false,"types":[]},{"text":"impl Clone for Dqblk","synthetic":false,"types":[]},{"text":"impl Clone for RebootMode","synthetic":false,"types":[]},{"text":"impl Clone for FdSet","synthetic":false,"types":[]},{"text":"impl Clone for Signal","synthetic":false,"types":[]},{"text":"impl Clone for SignalIterator","synthetic":false,"types":[]},{"text":"impl Clone for SaFlags","synthetic":false,"types":[]},{"text":"impl Clone for SigmaskHow","synthetic":false,"types":[]},{"text":"impl Clone for SigSet","synthetic":false,"types":[]},{"text":"impl Clone for SigHandler","synthetic":false,"types":[]},{"text":"impl Clone for SigAction","synthetic":false,"types":[]},{"text":"impl Clone for SigevNotify","synthetic":false,"types":[]},{"text":"impl Clone for SigEvent","synthetic":false,"types":[]},{"text":"impl Clone for SfdFlags","synthetic":false,"types":[]},{"text":"impl Clone for SignalFd","synthetic":false,"types":[]},{"text":"impl Clone for AddressFamily","synthetic":false,"types":[]},{"text":"impl Clone for InetAddr","synthetic":false,"types":[]},{"text":"impl Clone for IpAddr","synthetic":false,"types":[]},{"text":"impl Clone for Ipv4Addr","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6Addr","synthetic":false,"types":[]},{"text":"impl Clone for UnixAddr","synthetic":false,"types":[]},{"text":"impl Clone for SockAddr","synthetic":false,"types":[]},{"text":"impl Clone for NetlinkAddr","synthetic":false,"types":[]},{"text":"impl Clone for AlgAddr","synthetic":false,"types":[]},{"text":"impl Clone for LinkAddr","synthetic":false,"types":[]},{"text":"impl Clone for VsockAddr","synthetic":false,"types":[]},{"text":"impl Clone for ReuseAddr","synthetic":false,"types":[]},{"text":"impl Clone for ReusePort","synthetic":false,"types":[]},{"text":"impl Clone for TcpNoDelay","synthetic":false,"types":[]},{"text":"impl Clone for Linger","synthetic":false,"types":[]},{"text":"impl Clone for IpAddMembership","synthetic":false,"types":[]},{"text":"impl Clone for IpDropMembership","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6AddMembership","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6DropMembership","synthetic":false,"types":[]},{"text":"impl Clone for IpMulticastTtl","synthetic":false,"types":[]},{"text":"impl Clone for IpMulticastLoop","synthetic":false,"types":[]},{"text":"impl Clone for ReceiveTimeout","synthetic":false,"types":[]},{"text":"impl Clone for SendTimeout","synthetic":false,"types":[]},{"text":"impl Clone for Broadcast","synthetic":false,"types":[]},{"text":"impl Clone for OobInline","synthetic":false,"types":[]},{"text":"impl Clone for SocketError","synthetic":false,"types":[]},{"text":"impl Clone for KeepAlive","synthetic":false,"types":[]},{"text":"impl Clone for PeerCredentials","synthetic":false,"types":[]},{"text":"impl Clone for TcpKeepIdle","synthetic":false,"types":[]},{"text":"impl Clone for RcvBuf","synthetic":false,"types":[]},{"text":"impl Clone for SndBuf","synthetic":false,"types":[]},{"text":"impl Clone for RcvBufForce","synthetic":false,"types":[]},{"text":"impl Clone for SndBufForce","synthetic":false,"types":[]},{"text":"impl Clone for SockType","synthetic":false,"types":[]},{"text":"impl Clone for AcceptConn","synthetic":false,"types":[]},{"text":"impl Clone for OriginalDst","synthetic":false,"types":[]},{"text":"impl Clone for ReceiveTimestamp","synthetic":false,"types":[]},{"text":"impl Clone for IpTransparent","synthetic":false,"types":[]},{"text":"impl Clone for Mark","synthetic":false,"types":[]},{"text":"impl Clone for PassCred","synthetic":false,"types":[]},{"text":"impl Clone for TcpCongestion","synthetic":false,"types":[]},{"text":"impl Clone for Ipv4PacketInfo","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6RecvPacketInfo","synthetic":false,"types":[]},{"text":"impl Clone for AlgSetAeadAuthSize","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for AlgSetKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SockType","synthetic":false,"types":[]},{"text":"impl Clone for SockProtocol","synthetic":false,"types":[]},{"text":"impl Clone for SockFlag","synthetic":false,"types":[]},{"text":"impl Clone for MsgFlags","synthetic":false,"types":[]},{"text":"impl Clone for UnixCredentials","synthetic":false,"types":[]},{"text":"impl Clone for IpMembershipRequest","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6MembershipRequest","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for RecvMsg&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for CmsgIterator&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ControlMessageOwned","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ControlMessage&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SockLevel","synthetic":false,"types":[]},{"text":"impl Clone for Shutdown","synthetic":false,"types":[]},{"text":"impl Clone for SFlag","synthetic":false,"types":[]},{"text":"impl Clone for Mode","synthetic":false,"types":[]},{"text":"impl Clone for FchmodatFlags","synthetic":false,"types":[]},{"text":"impl Clone for UtimensatFlags","synthetic":false,"types":[]},{"text":"impl Clone for Statfs","synthetic":false,"types":[]},{"text":"impl Clone for FsType","synthetic":false,"types":[]},{"text":"impl Clone for FsFlags","synthetic":false,"types":[]},{"text":"impl Clone for Statvfs","synthetic":false,"types":[]},{"text":"impl Clone for SysInfo","synthetic":false,"types":[]},{"text":"impl Clone for Termios","synthetic":false,"types":[]},{"text":"impl Clone for BaudRate","synthetic":false,"types":[]},{"text":"impl Clone for SetArg","synthetic":false,"types":[]},{"text":"impl Clone for FlushArg","synthetic":false,"types":[]},{"text":"impl Clone for FlowArg","synthetic":false,"types":[]},{"text":"impl Clone for SpecialCharacterIndices","synthetic":false,"types":[]},{"text":"impl Clone for InputFlags","synthetic":false,"types":[]},{"text":"impl Clone for OutputFlags","synthetic":false,"types":[]},{"text":"impl Clone for ControlFlags","synthetic":false,"types":[]},{"text":"impl Clone for LocalFlags","synthetic":false,"types":[]},{"text":"impl Clone for TimeSpec","synthetic":false,"types":[]},{"text":"impl Clone for TimeVal","synthetic":false,"types":[]},{"text":"impl Clone for RemoteIoVec","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for IoVec&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UtsName","synthetic":false,"types":[]},{"text":"impl Clone for WaitPidFlag","synthetic":false,"types":[]},{"text":"impl Clone for WaitStatus","synthetic":false,"types":[]},{"text":"impl Clone for AddWatchFlags","synthetic":false,"types":[]},{"text":"impl Clone for InitFlags","synthetic":false,"types":[]},{"text":"impl Clone for Inotify","synthetic":false,"types":[]},{"text":"impl Clone for WatchDescriptor","synthetic":false,"types":[]},{"text":"impl Clone for UContext","synthetic":false,"types":[]},{"text":"impl Clone for Uid","synthetic":false,"types":[]},{"text":"impl Clone for Gid","synthetic":false,"types":[]},{"text":"impl Clone for Pid","synthetic":false,"types":[]},{"text":"impl Clone for ForkResult","synthetic":false,"types":[]},{"text":"impl Clone for FchownatFlags","synthetic":false,"types":[]},{"text":"impl Clone for Whence","synthetic":false,"types":[]},{"text":"impl Clone for LinkatFlags","synthetic":false,"types":[]},{"text":"impl Clone for UnlinkatFlags","synthetic":false,"types":[]},{"text":"impl Clone for PathconfVar","synthetic":false,"types":[]},{"text":"impl Clone for SysconfVar","synthetic":false,"types":[]},{"text":"impl Clone for AccessFlags","synthetic":false,"types":[]},{"text":"impl Clone for User","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["nohash_hasher"] = [{"text":"impl&lt;T&gt; Clone for NoHashHasher&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Clone for Sign","synthetic":false,"types":[]},{"text":"impl Clone for BigInt","synthetic":false,"types":[]},{"text":"impl Clone for BigUint","synthetic":false,"types":[]},{"text":"impl Clone for ParseBigIntError","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ParseRatioError","synthetic":false,"types":[]}];
implementors["object"] = [{"text":"impl Clone for Architecture","synthetic":false,"types":[]},{"text":"impl Clone for AddressSize","synthetic":false,"types":[]},{"text":"impl Clone for BinaryFormat","synthetic":false,"types":[]},{"text":"impl Clone for SectionKind","synthetic":false,"types":[]},{"text":"impl Clone for SymbolKind","synthetic":false,"types":[]},{"text":"impl Clone for SymbolScope","synthetic":false,"types":[]},{"text":"impl Clone for RelocationKind","synthetic":false,"types":[]},{"text":"impl Clone for RelocationEncoding","synthetic":false,"types":[]},{"text":"impl Clone for FileFlags","synthetic":false,"types":[]},{"text":"impl Clone for SectionFlags","synthetic":false,"types":[]},{"text":"impl&lt;Section:&nbsp;Clone&gt; Clone for SymbolFlags&lt;Section&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Endianness","synthetic":false,"types":[]},{"text":"impl Clone for LittleEndian","synthetic":false,"types":[]},{"text":"impl Clone for BigEndian","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for U16Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for U32Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for U64Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for I16Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for I32Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for I64Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for Bytes&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for StringTable&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for SectionTable&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, Elf:&nbsp;Clone + FileHeader&gt; Clone for SectionTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf::SectionHeader: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, Elf:&nbsp;Clone + FileHeader&gt; Clone for SymbolTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf::Sym: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, Mach:&nbsp;Clone + MachHeader&gt; Clone for SymbolTable&lt;'data, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach::Nlist: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for SectionIndex","synthetic":false,"types":[]},{"text":"impl Clone for SymbolIndex","synthetic":false,"types":[]},{"text":"impl Clone for SymbolSection","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for Symbol&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RelocationTarget","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for CompressedData&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CompressionFormat","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for StandardSegment","synthetic":false,"types":[]},{"text":"impl Clone for StandardSection","synthetic":false,"types":[]},{"text":"impl Clone for SectionId","synthetic":false,"types":[]},{"text":"impl Clone for SymbolSection","synthetic":false,"types":[]},{"text":"impl Clone for SymbolId","synthetic":false,"types":[]},{"text":"impl Clone for Mangling","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for FileHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for FileHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Ident","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SectionHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SectionHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for CompressionHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for CompressionHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Sym32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Sym64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Syminfo32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Syminfo64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Rel32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Rela32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Rel64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Rela64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for ProgramHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for ProgramHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Dyn32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Dyn64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for NoteHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for NoteHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for FatHeader","synthetic":false,"types":[]},{"text":"impl Clone for FatArch32","synthetic":false,"types":[]},{"text":"impl Clone for FatArch64","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for MachHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for MachHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for LoadCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for LcStr&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SegmentCommand32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SegmentCommand64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Section32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Section64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Fvmlib&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for FvmlibCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Dylib&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SubFrameworkCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SubClientCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SubUmbrellaCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SubLibraryCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for PreboundDylibCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylinkerCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for ThreadCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for RoutinesCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for RoutinesCommand_64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SymtabCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DysymtabCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibTableOfContents&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibModule32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibModule64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibReference&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for TwolevelHintsCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for TwolevelHint&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for PrebindCksumCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for UuidCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for RpathCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for LinkeditDataCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for EncryptionInfoCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for EncryptionInfoCommand64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for VersionMinCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for BuildVersionCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for BuildToolVersion&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DyldInfoCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for LinkerOptionCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SymSegCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for IdentCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for FvmfileCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for EntryPointCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SourceVersionCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DataInCodeEntry&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for NoteCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Nlist32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Nlist64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Relocation&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RelocationInfo","synthetic":false,"types":[]},{"text":"impl Clone for ScatteredRelocationInfo","synthetic":false,"types":[]},{"text":"impl Clone for ImageDosHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageOs2Header","synthetic":false,"types":[]},{"text":"impl Clone for ImageVxdHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageFileHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageDataDirectory","synthetic":false,"types":[]},{"text":"impl Clone for ImageOptionalHeader32","synthetic":false,"types":[]},{"text":"impl Clone for ImageRomOptionalHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageOptionalHeader64","synthetic":false,"types":[]},{"text":"impl Clone for ImageNtHeaders64","synthetic":false,"types":[]},{"text":"impl Clone for ImageNtHeaders32","synthetic":false,"types":[]},{"text":"impl Clone for ImageRomHeaders","synthetic":false,"types":[]},{"text":"impl Clone for Guid","synthetic":false,"types":[]},{"text":"impl Clone for AnonObjectHeader","synthetic":false,"types":[]},{"text":"impl Clone for AnonObjectHeaderV2","synthetic":false,"types":[]},{"text":"impl Clone for AnonObjectHeaderBigobj","synthetic":false,"types":[]},{"text":"impl Clone for ImageSectionHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageSymbol","synthetic":false,"types":[]},{"text":"impl Clone for ImageSymbolBytes","synthetic":false,"types":[]},{"text":"impl Clone for ImageSymbolEx","synthetic":false,"types":[]},{"text":"impl Clone for ImageSymbolExBytes","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolTokenDef","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolFunction","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolFunctionBeginEnd","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolWeak","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolSection","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolCrc","synthetic":false,"types":[]},{"text":"impl Clone for ImageRelocation","synthetic":false,"types":[]},{"text":"impl Clone for ImageLinenumber","synthetic":false,"types":[]},{"text":"impl Clone for ImageBaseRelocation","synthetic":false,"types":[]},{"text":"impl Clone for ImageArchiveMemberHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageExportDirectory","synthetic":false,"types":[]},{"text":"impl Clone for ImageImportByName","synthetic":false,"types":[]},{"text":"impl Clone for ImageTlsDirectory64","synthetic":false,"types":[]},{"text":"impl Clone for ImageTlsDirectory32","synthetic":false,"types":[]},{"text":"impl Clone for ImageImportDescriptor","synthetic":false,"types":[]},{"text":"impl Clone for ImageBoundImportDescriptor","synthetic":false,"types":[]},{"text":"impl Clone for ImageBoundForwarderRef","synthetic":false,"types":[]},{"text":"impl Clone for ImageDelayloadDescriptor","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDirectory","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDirectoryEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDirectoryString","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDirStringU","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDataEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageLoadConfigCodeIntegrity","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocationTable","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocation32","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocation64","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocation32V2","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocation64V2","synthetic":false,"types":[]},{"text":"impl Clone for ImagePrologueDynamicRelocationHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageEpilogueDynamicRelocationHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageLoadConfigDirectory32","synthetic":false,"types":[]},{"text":"impl Clone for ImageLoadConfigDirectory64","synthetic":false,"types":[]},{"text":"impl Clone for ImageHotPatchInfo","synthetic":false,"types":[]},{"text":"impl Clone for ImageHotPatchBase","synthetic":false,"types":[]},{"text":"impl Clone for ImageHotPatchHashes","synthetic":false,"types":[]},{"text":"impl Clone for ImageArmRuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageArm64RuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageAlpha64RuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageAlphaRuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageRuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageEnclaveConfig32","synthetic":false,"types":[]},{"text":"impl Clone for ImageEnclaveConfig64","synthetic":false,"types":[]},{"text":"impl Clone for ImageEnclaveImport","synthetic":false,"types":[]},{"text":"impl Clone for ImageDebugDirectory","synthetic":false,"types":[]},{"text":"impl Clone for ImageCoffSymbolsHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageDebugMisc","synthetic":false,"types":[]},{"text":"impl Clone for ImageFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageFunctionEntry64","synthetic":false,"types":[]},{"text":"impl Clone for ImageSeparateDebugHeader","synthetic":false,"types":[]},{"text":"impl Clone for NonPagedDebugInfo","synthetic":false,"types":[]},{"text":"impl Clone for ImageArchitectureEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImportObjectHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageCor20Header","synthetic":false,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OnceCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["owning_ref"] = [{"text":"impl&lt;O, T:&nbsp;?Sized&gt; Clone for OwningRef&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: CloneStableAddress,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_aura"] = [{"text":"impl&lt;T:&nbsp;Clone + Trait&gt; Clone for Module&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Clone for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_authorship"] = [{"text":"impl&lt;T:&nbsp;Clone + Trait&gt; Clone for Module&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Clone for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_finality_tracker"] = [{"text":"impl&lt;T:&nbsp;Clone + Trait&gt; Clone for Module&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Clone for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_grandpa"] = [{"text":"impl Clone for GrandpaTimeSlot","synthetic":false,"types":[]},{"text":"impl Clone for Event","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Trait&gt; Clone for Module&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Clone for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_randomness_collective_flip"] = [{"text":"impl&lt;T:&nbsp;Clone + Trait&gt; Clone for Module&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Clone for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_session"] = [{"text":"impl Clone for Event","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Trait&gt; Clone for Module&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Clone for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_timestamp"] = [{"text":"impl&lt;T:&nbsp;Clone + Trait&gt; Clone for Module&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Clone for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_transaction_payment"] = [{"text":"impl&lt;T:&nbsp;Clone + Trait&gt; Clone for Module&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Clone for Call&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Trait + Send + Sync&gt; Clone for ChargeTransactionPayment&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_transaction_payment_rpc"] = [{"text":"impl&lt;BlockHash:&nbsp;Clone, ResponseType:&nbsp;Clone&gt; Clone for Client&lt;BlockHash, ResponseType&gt;","synthetic":false,"types":[]}];
implementors["parity_db"] = [{"text":"impl Clone for Options","synthetic":false,"types":[]}];
implementors["parity_multiaddr"] = [{"text":"impl&lt;'a&gt; Clone for Protocol&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Onion3Addr&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Multiaddr","synthetic":false,"types":[]}];
implementors["parity_scale_codec"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for OptionBool","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Compact&lt;T&gt;","synthetic":false,"types":[]}];
implementors["parity_wasm"] = [{"text":"impl Clone for VarUint32","synthetic":false,"types":[]},{"text":"impl Clone for VarUint64","synthetic":false,"types":[]},{"text":"impl Clone for VarUint7","synthetic":false,"types":[]},{"text":"impl Clone for VarInt7","synthetic":false,"types":[]},{"text":"impl Clone for Uint8","synthetic":false,"types":[]},{"text":"impl Clone for VarInt32","synthetic":false,"types":[]},{"text":"impl Clone for VarInt64","synthetic":false,"types":[]},{"text":"impl Clone for Uint32","synthetic":false,"types":[]},{"text":"impl Clone for Uint64","synthetic":false,"types":[]},{"text":"impl Clone for VarUint1","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Deserialize&gt; Clone for CountedList&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + Serialize&lt;Error = Error&gt;, T:&nbsp;Clone + IntoIterator&lt;Item = I&gt;&gt; Clone for CountedListWriter&lt;I, T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Module","synthetic":false,"types":[]},{"text":"impl Clone for ImportCountType","synthetic":false,"types":[]},{"text":"impl Clone for Section","synthetic":false,"types":[]},{"text":"impl Clone for CustomSection","synthetic":false,"types":[]},{"text":"impl Clone for TypeSection","synthetic":false,"types":[]},{"text":"impl Clone for ImportSection","synthetic":false,"types":[]},{"text":"impl Clone for FunctionSection","synthetic":false,"types":[]},{"text":"impl Clone for TableSection","synthetic":false,"types":[]},{"text":"impl Clone for MemorySection","synthetic":false,"types":[]},{"text":"impl Clone for GlobalSection","synthetic":false,"types":[]},{"text":"impl Clone for ExportSection","synthetic":false,"types":[]},{"text":"impl Clone for CodeSection","synthetic":false,"types":[]},{"text":"impl Clone for ElementSection","synthetic":false,"types":[]},{"text":"impl Clone for DataSection","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for ValueType","synthetic":false,"types":[]},{"text":"impl Clone for BlockType","synthetic":false,"types":[]},{"text":"impl Clone for FunctionType","synthetic":false,"types":[]},{"text":"impl Clone for TableElementType","synthetic":false,"types":[]},{"text":"impl Clone for GlobalType","synthetic":false,"types":[]},{"text":"impl Clone for TableType","synthetic":false,"types":[]},{"text":"impl Clone for ResizableLimits","synthetic":false,"types":[]},{"text":"impl Clone for MemoryType","synthetic":false,"types":[]},{"text":"impl Clone for External","synthetic":false,"types":[]},{"text":"impl Clone for ImportEntry","synthetic":false,"types":[]},{"text":"impl Clone for Internal","synthetic":false,"types":[]},{"text":"impl Clone for ExportEntry","synthetic":false,"types":[]},{"text":"impl Clone for GlobalEntry","synthetic":false,"types":[]},{"text":"impl Clone for Instructions","synthetic":false,"types":[]},{"text":"impl Clone for InitExpr","synthetic":false,"types":[]},{"text":"impl Clone for Instruction","synthetic":false,"types":[]},{"text":"impl Clone for BrTableData","synthetic":false,"types":[]},{"text":"impl Clone for Func","synthetic":false,"types":[]},{"text":"impl Clone for Local","synthetic":false,"types":[]},{"text":"impl Clone for FuncBody","synthetic":false,"types":[]},{"text":"impl Clone for ElementSegment","synthetic":false,"types":[]},{"text":"impl Clone for DataSegment","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for IndexMap&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for NameSection","synthetic":false,"types":[]},{"text":"impl Clone for ModuleNameSubsection","synthetic":false,"types":[]},{"text":"impl Clone for FunctionNameSubsection","synthetic":false,"types":[]},{"text":"impl Clone for LocalNameSubsection","synthetic":false,"types":[]},{"text":"impl Clone for RelocSection","synthetic":false,"types":[]},{"text":"impl Clone for RelocationEntry","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["parity_ws"] = [{"text":"impl Clone for Sender","synthetic":false,"types":[]},{"text":"impl Clone for Frame","synthetic":false,"types":[]},{"text":"impl Clone for Message","synthetic":false,"types":[]},{"text":"impl Clone for OpCode","synthetic":false,"types":[]},{"text":"impl Clone for CloseCode","synthetic":false,"types":[]},{"text":"impl Clone for Settings","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]}];
implementors["parking"] = [{"text":"impl Clone for Unparker","synthetic":false,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Clone for WaitTimeoutResult","synthetic":false,"types":[]},{"text":"impl Clone for OnceState","synthetic":false,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Clone for ParkResult","synthetic":false,"types":[]},{"text":"impl Clone for UnparkResult","synthetic":false,"types":[]},{"text":"impl Clone for RequeueOp","synthetic":false,"types":[]},{"text":"impl Clone for FilterOp","synthetic":false,"types":[]},{"text":"impl Clone for UnparkToken","synthetic":false,"types":[]},{"text":"impl Clone for ParkToken","synthetic":false,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Clone for SIMPLE_ENCODE_SET","synthetic":false,"types":[]},{"text":"impl Clone for QUERY_ENCODE_SET","synthetic":false,"types":[]},{"text":"impl Clone for DEFAULT_ENCODE_SET","synthetic":false,"types":[]},{"text":"impl Clone for PATH_SEGMENT_ENCODE_SET","synthetic":false,"types":[]},{"text":"impl Clone for USERINFO_ENCODE_SET","synthetic":false,"types":[]},{"text":"impl&lt;'a, E:&nbsp;Clone + EncodeSet&gt; Clone for PercentEncode&lt;'a, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for PercentDecode&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["poly1305"] = [{"text":"impl Clone for Poly1305","synthetic":false,"types":[]}];
implementors["polyval"] = [{"text":"impl Clone for Polyval","synthetic":false,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Clone for YesS3","synthetic":false,"types":[]},{"text":"impl Clone for NoS3","synthetic":false,"types":[]},{"text":"impl Clone for YesS4","synthetic":false,"types":[]},{"text":"impl Clone for NoS4","synthetic":false,"types":[]},{"text":"impl Clone for YesA1","synthetic":false,"types":[]},{"text":"impl Clone for NoA1","synthetic":false,"types":[]},{"text":"impl Clone for YesA2","synthetic":false,"types":[]},{"text":"impl Clone for NoA2","synthetic":false,"types":[]},{"text":"impl Clone for YesNI","synthetic":false,"types":[]},{"text":"impl Clone for NoNI","synthetic":false,"types":[]},{"text":"impl&lt;S3:&nbsp;Clone, S4:&nbsp;Clone, NI:&nbsp;Clone&gt; Clone for SseMachine&lt;S3, S4, NI&gt;","synthetic":false,"types":[]},{"text":"impl&lt;NI:&nbsp;Clone&gt; Clone for Avx2Machine&lt;NI&gt;","synthetic":false,"types":[]},{"text":"impl Clone for vec128_storage","synthetic":false,"types":[]},{"text":"impl Clone for vec256_storage","synthetic":false,"types":[]},{"text":"impl Clone for vec512_storage","synthetic":false,"types":[]}];
implementors["primitive_types"] = [{"text":"impl Clone for U128","synthetic":false,"types":[]},{"text":"impl Clone for U256","synthetic":false,"types":[]},{"text":"impl Clone for U512","synthetic":false,"types":[]},{"text":"impl Clone for H128","synthetic":false,"types":[]},{"text":"impl Clone for H160","synthetic":false,"types":[]},{"text":"impl Clone for H256","synthetic":false,"types":[]},{"text":"impl Clone for H512","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Clone for TokenStream","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for TokenTree","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for Delimiter","synthetic":false,"types":[]},{"text":"impl Clone for Punct","synthetic":false,"types":[]},{"text":"impl Clone for Spacing","synthetic":false,"types":[]},{"text":"impl Clone for Ident","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for IntoIter","synthetic":false,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl Clone for SpanRange","synthetic":false,"types":[]}];
implementors["prometheus"] = [{"text":"impl Clone for LabelPair","synthetic":false,"types":[]},{"text":"impl Clone for Gauge","synthetic":false,"types":[]},{"text":"impl Clone for Counter","synthetic":false,"types":[]},{"text":"impl Clone for Quantile","synthetic":false,"types":[]},{"text":"impl Clone for Summary","synthetic":false,"types":[]},{"text":"impl Clone for Untyped","synthetic":false,"types":[]},{"text":"impl Clone for Histogram","synthetic":false,"types":[]},{"text":"impl Clone for Bucket","synthetic":false,"types":[]},{"text":"impl Clone for Metric","synthetic":false,"types":[]},{"text":"impl Clone for MetricType","synthetic":false,"types":[]},{"text":"impl Clone for MetricFamily","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Atomic&gt; Clone for GenericCounter&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Atomic&gt; Clone for GenericLocalCounter&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Atomic&gt; Clone for GenericLocalCounterVec&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Desc","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Atomic&gt; Clone for GenericGauge&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl Clone for HistogramOpts","synthetic":false,"types":[]},{"text":"impl Clone for Histogram","synthetic":false,"types":[]},{"text":"impl Clone for LocalHistogram","synthetic":false,"types":[]},{"text":"impl Clone for LocalHistogramVec","synthetic":false,"types":[]},{"text":"impl Clone for Opts","synthetic":false,"types":[]},{"text":"impl Clone for Registry","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + MetricVecBuilder&gt; Clone for MetricVec&lt;T&gt;","synthetic":false,"types":[]}];
implementors["prost"] = [{"text":"impl Clone for DecodeError","synthetic":false,"types":[]},{"text":"impl Clone for EncodeError","synthetic":false,"types":[]}];
implementors["pwasm_utils"] = [{"text":"impl Clone for Metering","synthetic":false,"types":[]},{"text":"impl Clone for InstructionType","synthetic":false,"types":[]},{"text":"impl Clone for SourceTarget","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for EntryRef&lt;T&gt;","synthetic":false,"types":[]}];
implementors["quicksink"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for Action&lt;A&gt;","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Clone for Bernoulli","synthetic":false,"types":[]},{"text":"impl Clone for BernoulliError","synthetic":false,"types":[]},{"text":"impl Clone for Binomial","synthetic":false,"types":[]},{"text":"impl Clone for Cauchy","synthetic":false,"types":[]},{"text":"impl Clone for Dirichlet","synthetic":false,"types":[]},{"text":"impl Clone for Exp1","synthetic":false,"types":[]},{"text":"impl Clone for Exp","synthetic":false,"types":[]},{"text":"impl Clone for Gamma","synthetic":false,"types":[]},{"text":"impl Clone for ChiSquared","synthetic":false,"types":[]},{"text":"impl Clone for FisherF","synthetic":false,"types":[]},{"text":"impl Clone for StudentT","synthetic":false,"types":[]},{"text":"impl Clone for Beta","synthetic":false,"types":[]},{"text":"impl Clone for StandardNormal","synthetic":false,"types":[]},{"text":"impl Clone for Normal","synthetic":false,"types":[]},{"text":"impl Clone for LogNormal","synthetic":false,"types":[]},{"text":"impl Clone for Pareto","synthetic":false,"types":[]},{"text":"impl Clone for Poisson","synthetic":false,"types":[]},{"text":"impl Clone for Triangular","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone + SampleUniform&gt; Clone for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone&gt; Clone for UniformInt&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone&gt; Clone for UniformFloat&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UniformDuration","synthetic":false,"types":[]},{"text":"impl Clone for UnitCircle","synthetic":false,"types":[]},{"text":"impl Clone for UnitSphereSurface","synthetic":false,"types":[]},{"text":"impl Clone for Weibull","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;Weight&gt; Clone for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Uniform&lt;W&gt;: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone + SampleUniform + PartialOrd&gt; Clone for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for WeightedError","synthetic":false,"types":[]},{"text":"impl Clone for OpenClosed01","synthetic":false,"types":[]},{"text":"impl Clone for Open01","synthetic":false,"types":[]},{"text":"impl Clone for Standard","synthetic":false,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Clone for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: BlockRngCore + SeedableRng + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RngCore + Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for StepRng","synthetic":false,"types":[]},{"text":"impl Clone for SmallRng","synthetic":false,"types":[]},{"text":"impl Clone for StdRng","synthetic":false,"types":[]},{"text":"impl Clone for ThreadRng","synthetic":false,"types":[]},{"text":"impl Clone for IndexVec","synthetic":false,"types":[]},{"text":"impl Clone for IndexVecIntoIter","synthetic":false,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Clone for ChaCha20Core","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha20Rng","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha12Core","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha12Rng","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha8Core","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha8Rng","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl&lt;R:&nbsp;Clone + BlockRngCore + ?Sized&gt; Clone for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Results: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + BlockRngCore + ?Sized&gt; Clone for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Results: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for OsRng","synthetic":false,"types":[]}];
implementors["rand_hc"] = [{"text":"impl Clone for Hc128Rng","synthetic":false,"types":[]},{"text":"impl Clone for Hc128Core","synthetic":false,"types":[]}];
implementors["rand_isaac"] = [{"text":"impl Clone for IsaacRng","synthetic":false,"types":[]},{"text":"impl Clone for IsaacCore","synthetic":false,"types":[]},{"text":"impl Clone for Isaac64Rng","synthetic":false,"types":[]},{"text":"impl Clone for Isaac64Core","synthetic":false,"types":[]}];
implementors["rand_jitter"] = [{"text":"impl Clone for TimerError","synthetic":false,"types":[]},{"text":"impl Clone for JitterRng","synthetic":false,"types":[]}];
implementors["rand_os"] = [{"text":"impl Clone for OsRng","synthetic":false,"types":[]}];
implementors["rand_pcg"] = [{"text":"impl Clone for Lcg64Xsh32","synthetic":false,"types":[]},{"text":"impl Clone for Lcg128Xsl64","synthetic":false,"types":[]},{"text":"impl Clone for Mcg128Xsl64","synthetic":false,"types":[]}];
implementors["rand_xorshift"] = [{"text":"impl Clone for XorShiftRng","synthetic":false,"types":[]}];
implementors["raw_cpuid"] = [{"text":"impl Clone for CpuIdResult","synthetic":false,"types":[]},{"text":"impl Clone for CacheInfoType","synthetic":false,"types":[]},{"text":"impl Clone for CacheInfo","synthetic":false,"types":[]},{"text":"impl Clone for CacheParameter","synthetic":false,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T:&nbsp;Clone + Ord + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Ord + Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Ord + Sync, V:&nbsp;Sync&gt; Clone for Iter&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Ord + Sync + 'a&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Hash + Eq + Sync, V:&nbsp;Sync&gt; Clone for Iter&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Hash + Eq + Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: ParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: ParallelIterator&lt;Item = A::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: IndexedParallelIterator,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for Cloned&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for Copied&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Clone for Empty&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for Enumerate&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, P:&nbsp;Clone&gt; Clone for Filter&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, P:&nbsp;Clone&gt; Clone for FilterMap&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for FlatMap&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for FlatMapIter&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for Flatten&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for FlattenIter&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, ID:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Fold&lt;I, ID, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, U:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FoldWith&lt;I, U, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for Inspect&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: IndexedParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: IndexedParallelIterator&lt;Item = I::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: IndexedParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: IndexedParallelIterator&lt;Item = I::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: ParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for MinLen&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for MaxLen&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for Map&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapWith&lt;I, T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, INIT:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapInit&lt;I, INIT, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for MultiZip&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for Once&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for PanicFuse&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Iter:&nbsp;Clone&gt; Clone for IterBridge&lt;Iter&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator, P:&nbsp;Clone&gt; Clone for Positions&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for Repeat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for RepeatN&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for Rev&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Skip&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for Split&lt;D, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Take&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, U:&nbsp;Clone, ID:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for TryFold&lt;I, U, ID, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, U:&nbsp;Clone + Try, F:&nbsp;Clone&gt; Clone for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U::Ok: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for Update&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for WhileSome&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + IndexedParallelIterator, B:&nbsp;Clone + IndexedParallelIterator&gt; Clone for Zip&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + IndexedParallelIterator, B:&nbsp;Clone + IndexedParallelIterator&gt; Clone for ZipEq&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for StepBy&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Iter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Iter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for Iter&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for Chunks&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for ChunksExact&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for Windows&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T, P:&nbsp;Clone&gt; Clone for Split&lt;'data, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for Chars&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for CharIndices&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for Bytes&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for EncodeUtf16&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for Split&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for SplitTerminator&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for Lines&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for SplitWhitespace&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for Matches&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for MatchIndices&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]}];
implementors["regalloc"] = [{"text":"impl Clone for AnalysisError","synthetic":false,"types":[]},{"text":"impl Clone for BacktrackingOptions","synthetic":false,"types":[]},{"text":"impl Clone for CheckerErrors","synthetic":false,"types":[]},{"text":"impl Clone for CheckerError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Eq + Hash&gt; Clone for Set&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Range&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;TyIx, Ty&gt; Clone for TypedIxVec&lt;TyIx, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for InstIx","synthetic":false,"types":[]},{"text":"impl Clone for BlockIx","synthetic":false,"types":[]},{"text":"impl Clone for RegClass","synthetic":false,"types":[]},{"text":"impl Clone for Reg","synthetic":false,"types":[]},{"text":"impl Clone for RealReg","synthetic":false,"types":[]},{"text":"impl Clone for VirtualReg","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Copy + PartialEq + Eq + Hash + PartialOrd + Ord + Debug&gt; Clone for Writable&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SpillSlot","synthetic":false,"types":[]},{"text":"impl Clone for RealRegUniverse","synthetic":false,"types":[]},{"text":"impl Clone for RegClassInfo","synthetic":false,"types":[]},{"text":"impl Clone for LinearScanOptions","synthetic":false,"types":[]},{"text":"impl Clone for IRSnapshot","synthetic":false,"types":[]},{"text":"impl Clone for AlgorithmWithDefaults","synthetic":false,"types":[]},{"text":"impl Clone for RegAllocError","synthetic":false,"types":[]},{"text":"impl Clone for Algorithm","synthetic":false,"types":[]},{"text":"impl Clone for Options","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Regex","synthetic":false,"types":[]},{"text":"impl Clone for CaptureLocations","synthetic":false,"types":[]},{"text":"impl&lt;'c, 't: 'c&gt; Clone for SubCaptureMatches&lt;'c, 't&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RegexSet","synthetic":false,"types":[]},{"text":"impl Clone for SetMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SetMatchesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RegexSet","synthetic":false,"types":[]},{"text":"impl Clone for SetMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SetMatchesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Regex","synthetic":false,"types":[]},{"text":"impl Clone for CaptureLocations","synthetic":false,"types":[]},{"text":"impl&lt;'c, 't: 'c&gt; Clone for SubCaptureMatches&lt;'c, 't&gt;","synthetic":false,"types":[]}];
implementors["regex_automata"] = [{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[S]&gt;, S:&nbsp;Clone + StateID&gt; Clone for DenseDFA&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[S]&gt;, S:&nbsp;Clone + StateID&gt; Clone for Standard&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[S]&gt;, S:&nbsp;Clone + StateID&gt; Clone for ByteClass&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[S]&gt;, S:&nbsp;Clone + StateID&gt; Clone for Premultiplied&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[S]&gt;, S:&nbsp;Clone + StateID&gt; Clone for PremultipliedByteClass&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone + DFA&gt; Clone for Regex&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RegexBuilder","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[u8]&gt;, S:&nbsp;Clone + StateID&gt; Clone for SparseDFA&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[u8]&gt;, S:&nbsp;Clone + StateID&gt; Clone for Standard&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[u8]&gt;, S:&nbsp;Clone + StateID&gt; Clone for ByteClass&lt;T, S&gt;","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for Position","synthetic":false,"types":[]},{"text":"impl Clone for WithComments","synthetic":false,"types":[]},{"text":"impl Clone for Comment","synthetic":false,"types":[]},{"text":"impl Clone for Ast","synthetic":false,"types":[]},{"text":"impl Clone for Alternation","synthetic":false,"types":[]},{"text":"impl Clone for Concat","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for LiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for SpecialLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for HexLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerl","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerlKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassAscii","synthetic":false,"types":[]},{"text":"impl Clone for ClassAsciiKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeOpKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassBracketed","synthetic":false,"types":[]},{"text":"impl Clone for ClassSet","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetItem","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetUnion","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOp","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOpKind","synthetic":false,"types":[]},{"text":"impl Clone for Assertion","synthetic":false,"types":[]},{"text":"impl Clone for AssertionKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionOp","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for CaptureName","synthetic":false,"types":[]},{"text":"impl Clone for SetFlags","synthetic":false,"types":[]},{"text":"impl Clone for Flags","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItem","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItemKind","synthetic":false,"types":[]},{"text":"impl Clone for Flag","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Literals","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for TranslatorBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Translator","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Hir","synthetic":false,"types":[]},{"text":"impl Clone for HirKind","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytes","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Clone for Anchor","synthetic":false,"types":[]},{"text":"impl Clone for WordBoundary","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Range","synthetic":false,"types":[]}];
implementors["region"] = [{"text":"impl Clone for Protection","synthetic":false,"types":[]},{"text":"impl Clone for Region","synthetic":false,"types":[]}];
implementors["ring"] = [{"text":"impl Clone for PublicKey","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone&gt; Clone for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Positive&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Context","synthetic":false,"types":[]},{"text":"impl Clone for Digest","synthetic":false,"types":[]},{"text":"impl Clone for Unspecified","synthetic":false,"types":[]},{"text":"impl Clone for KeyRejected","synthetic":false,"types":[]},{"text":"impl Clone for Algorithm","synthetic":false,"types":[]},{"text":"impl Clone for Prk","synthetic":false,"types":[]},{"text":"impl Clone for Algorithm","synthetic":false,"types":[]},{"text":"impl Clone for Tag","synthetic":false,"types":[]},{"text":"impl Clone for Key","synthetic":false,"types":[]},{"text":"impl Clone for Context","synthetic":false,"types":[]},{"text":"impl Clone for Algorithm","synthetic":false,"types":[]},{"text":"impl Clone for SystemRandom","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone&gt; Clone for RsaPublicKeyComponents&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AsRef&lt;[u8]&gt; + Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for RsaSubjectPublicKey","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone&gt; Clone for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["rocksdb"] = [{"text":"impl Clone for LiveFile","synthetic":false,"types":[]},{"text":"impl Clone for Options","synthetic":false,"types":[]},{"text":"impl Clone for DBCompressionType","synthetic":false,"types":[]},{"text":"impl Clone for DBCompactionStyle","synthetic":false,"types":[]},{"text":"impl Clone for DBRecoveryMode","synthetic":false,"types":[]},{"text":"impl Clone for UniversalCompactionStopStyle","synthetic":false,"types":[]},{"text":"impl Clone for BottommostLevelCompaction","synthetic":false,"types":[]},{"text":"impl Clone for PerfStatsLevel","synthetic":false,"types":[]},{"text":"impl Clone for PerfMetric","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["rustc_demangle"] = [{"text":"impl Clone for TryDemangleError","synthetic":false,"types":[]}];
implementors["rustc_hex"] = [{"text":"impl Clone for FromHexError","synthetic":false,"types":[]}];
implementors["rustls"] = [{"text":"impl Clone for Payload","synthetic":false,"types":[]},{"text":"impl Clone for PayloadU24","synthetic":false,"types":[]},{"text":"impl Clone for PayloadU16","synthetic":false,"types":[]},{"text":"impl Clone for PayloadU8","synthetic":false,"types":[]},{"text":"impl Clone for ProtocolVersion","synthetic":false,"types":[]},{"text":"impl Clone for HashAlgorithm","synthetic":false,"types":[]},{"text":"impl Clone for SignatureAlgorithm","synthetic":false,"types":[]},{"text":"impl Clone for ClientCertificateType","synthetic":false,"types":[]},{"text":"impl Clone for Compression","synthetic":false,"types":[]},{"text":"impl Clone for ContentType","synthetic":false,"types":[]},{"text":"impl Clone for HandshakeType","synthetic":false,"types":[]},{"text":"impl Clone for AlertLevel","synthetic":false,"types":[]},{"text":"impl Clone for AlertDescription","synthetic":false,"types":[]},{"text":"impl Clone for HeartbeatMessageType","synthetic":false,"types":[]},{"text":"impl Clone for ExtensionType","synthetic":false,"types":[]},{"text":"impl Clone for ServerNameType","synthetic":false,"types":[]},{"text":"impl Clone for NamedCurve","synthetic":false,"types":[]},{"text":"impl Clone for NamedGroup","synthetic":false,"types":[]},{"text":"impl Clone for CipherSuite","synthetic":false,"types":[]},{"text":"impl Clone for ECPointFormat","synthetic":false,"types":[]},{"text":"impl Clone for HeartbeatMode","synthetic":false,"types":[]},{"text":"impl Clone for ECCurveType","synthetic":false,"types":[]},{"text":"impl Clone for SignatureScheme","synthetic":false,"types":[]},{"text":"impl Clone for PSKKeyExchangeMode","synthetic":false,"types":[]},{"text":"impl Clone for KeyUpdateRequest","synthetic":false,"types":[]},{"text":"impl Clone for CertificateStatusType","synthetic":false,"types":[]},{"text":"impl Clone for Random","synthetic":false,"types":[]},{"text":"impl Clone for SessionID","synthetic":false,"types":[]},{"text":"impl Clone for UnknownExtension","synthetic":false,"types":[]},{"text":"impl Clone for ServerNamePayload","synthetic":false,"types":[]},{"text":"impl Clone for ServerName","synthetic":false,"types":[]},{"text":"impl Clone for KeyShareEntry","synthetic":false,"types":[]},{"text":"impl Clone for PresharedKeyIdentity","synthetic":false,"types":[]},{"text":"impl Clone for PresharedKeyOffer","synthetic":false,"types":[]},{"text":"impl Clone for OCSPCertificateStatusRequest","synthetic":false,"types":[]},{"text":"impl Clone for CertificateStatusRequest","synthetic":false,"types":[]},{"text":"impl Clone for ClientExtension","synthetic":false,"types":[]},{"text":"impl Clone for ServerExtension","synthetic":false,"types":[]},{"text":"impl Clone for DigitallySignedStruct","synthetic":false,"types":[]},{"text":"impl Clone for TLSError","synthetic":false,"types":[]},{"text":"impl Clone for RootCertStore","synthetic":false,"types":[]},{"text":"impl Clone for ServerConfig","synthetic":false,"types":[]},{"text":"impl Clone for ClientConfig","synthetic":false,"types":[]},{"text":"impl Clone for PrivateKey","synthetic":false,"types":[]},{"text":"impl Clone for Certificate","synthetic":false,"types":[]},{"text":"impl Clone for CertifiedKey","synthetic":false,"types":[]}];
implementors["ryu"] = [{"text":"impl Clone for Buffer","synthetic":false,"types":[]}];
implementors["sc_chain_spec"] = [{"text":"impl&lt;G, E:&nbsp;Clone&gt; Clone for ChainSpec&lt;G, E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SerializableLightSyncState","synthetic":false,"types":[]},{"text":"impl&lt;BlockNumber:&nbsp;Clone + Ord, T:&nbsp;Clone + Group&gt; Clone for Forks&lt;BlockNumber, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Fork: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sc_cli"] = [{"text":"impl Clone for WasmExecutionMethod","synthetic":false,"types":[]},{"text":"impl Clone for TracingReceiver","synthetic":false,"types":[]},{"text":"impl Clone for NodeKeyType","synthetic":false,"types":[]},{"text":"impl Clone for CryptoScheme","synthetic":false,"types":[]},{"text":"impl Clone for OutputType","synthetic":false,"types":[]},{"text":"impl Clone for ExecutionStrategy","synthetic":false,"types":[]},{"text":"impl Clone for RpcMethods","synthetic":false,"types":[]},{"text":"impl Clone for Database","synthetic":false,"types":[]},{"text":"impl Clone for OffchainWorkerEnabled","synthetic":false,"types":[]},{"text":"impl Clone for GenericNumber","synthetic":false,"types":[]}];
implementors["sc_client_api"] = [{"text":"impl Clone for NewBlockState","synthetic":false,"types":[]},{"text":"impl Clone for MemorySize","synthetic":false,"types":[]},{"text":"impl Clone for StateDbMemoryInfo","synthetic":false,"types":[]},{"text":"impl Clone for MemoryInfo","synthetic":false,"types":[]},{"text":"impl Clone for IoInfo","synthetic":false,"types":[]},{"text":"impl Clone for UsageInfo","synthetic":false,"types":[]},{"text":"impl&lt;Block:&nbsp;Clone + BlockT&gt; Clone for BlockImportNotification&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block::Hash: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Block::Header: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Block:&nbsp;Clone + BlockT&gt; Clone for FinalityNotification&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block::Hash: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Block::Header: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for ExecutionStrategies","synthetic":false,"types":[]},{"text":"impl&lt;Block:&nbsp;BlockT + Clone&gt; Clone for Blockchain&lt;Block&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Header:&nbsp;Clone + HeaderT&gt; Clone for RemoteCallRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Hash: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Header:&nbsp;Clone + HeaderT&gt; Clone for RemoteHeaderRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Hash: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Number: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Header:&nbsp;Clone + HeaderT&gt; Clone for RemoteReadRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Hash: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Header:&nbsp;Clone + HeaderT&gt; Clone for RemoteReadChildRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Hash: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Header:&nbsp;Clone + HeaderT&gt; Clone for RemoteChangesRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Number: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Hash: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Number: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Hash: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Number: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Hash: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Number: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Hash: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Number: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Hash: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Hash: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Header:&nbsp;Clone + HeaderT&gt; Clone for RemoteBodyRequest&lt;Header&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone, N:&nbsp;Clone&gt; Clone for LeafSet&lt;H, N&gt;","synthetic":false,"types":[]}];
implementors["sc_client_db"] = [{"text":"impl Clone for LocalStorage","synthetic":false,"types":[]},{"text":"impl Clone for KeyTracker","synthetic":false,"types":[]},{"text":"impl Clone for ReadWriteTracker","synthetic":false,"types":[]},{"text":"impl Clone for DatabaseSettingsSrc","synthetic":false,"types":[]}];
implementors["sc_consensus"] = [{"text":"impl&lt;B, Block&gt; Clone for LongestChain&lt;B, Block&gt;","synthetic":false,"types":[]}];
implementors["sc_consensus_aura"] = [{"text":"impl&lt;Block:&nbsp;BlockT, C, I:&nbsp;Clone + BlockImport&lt;Block&gt;, P&gt; Clone for AuraBlockImport&lt;Block, C, I, P&gt;","synthetic":false,"types":[]}];
implementors["sc_consensus_slots"] = [{"text":"impl Clone for SignedDuration","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SlotDuration&lt;T&gt;","synthetic":false,"types":[]}];
implementors["sc_executor"] = [{"text":"impl Clone for WasmExecutor","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;NativeExecutionDispatch&gt; Clone for NativeExecutor&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl Clone for WasmExecutionMethod","synthetic":false,"types":[]}];
implementors["sc_executor_common"] = [{"text":"impl Clone for SupervisorFuncIndex","synthetic":false,"types":[]},{"text":"impl Clone for DataSegmentsSnapshot","synthetic":false,"types":[]}];
implementors["sc_finality_grandpa"] = [{"text":"impl&lt;H, N&gt; Clone for SharedAuthoritySet&lt;H, N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Header:&nbsp;Clone + HeaderT&gt; Clone for FinalityProofFragment&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header::Hash: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Backend, Block:&nbsp;BlockT, Client, SC:&nbsp;Clone&gt; Clone for GrandpaBlockImport&lt;Backend, Block, Client, SC&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Block:&nbsp;Clone + BlockT&gt; Clone for GrandpaJustification&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block::Header: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;BE, Block:&nbsp;BlockT, Client&gt; Clone for GrandpaLightBlockImport&lt;BE, Block, Client&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Block:&nbsp;Clone + BlockT&gt; Clone for GrandpaJustificationSender&lt;Block&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Block:&nbsp;Clone + BlockT&gt; Clone for GrandpaJustificationStream&lt;Block&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for BeforeBestBlockBy&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SharedVoterState","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]}];
implementors["sc_informant"] = [{"text":"impl Clone for OutputFormat","synthetic":false,"types":[]}];
implementors["sc_light"] = [{"text":"impl&lt;B, L:&nbsp;Clone&gt; Clone for GenesisCallExecutor&lt;B, L&gt;","synthetic":false,"types":[]}];
implementors["sc_network"] = [{"text":"impl Clone for AlwaysBadChecker","synthetic":false,"types":[]},{"text":"impl Clone for DhtEvent","synthetic":false,"types":[]},{"text":"impl Clone for Event","synthetic":false,"types":[]},{"text":"impl Clone for ObservedRole","synthetic":false,"types":[]},{"text":"impl Clone for SyncState","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone + BlockT&gt; Clone for PeerInfo&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B::Hash: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::Header: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for ProtocolConfig","synthetic":false,"types":[]},{"text":"impl Clone for Role","synthetic":false,"types":[]},{"text":"impl Clone for TransactionImport","synthetic":false,"types":[]},{"text":"impl Clone for ProtocolId","synthetic":false,"types":[]},{"text":"impl Clone for MultiaddrWithPeerId","synthetic":false,"types":[]},{"text":"impl Clone for NetworkConfiguration","synthetic":false,"types":[]},{"text":"impl Clone for TransportConfig","synthetic":false,"types":[]},{"text":"impl Clone for NonReservedPeerMode","synthetic":false,"types":[]},{"text":"impl Clone for NodeKeyConfig","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone&gt; Clone for Secret&lt;K&gt;","synthetic":false,"types":[]},{"text":"impl Clone for NetworkState","synthetic":false,"types":[]},{"text":"impl Clone for Peer","synthetic":false,"types":[]},{"text":"impl Clone for NotConnectedPeer","synthetic":false,"types":[]},{"text":"impl Clone for PeerEndpoint","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone + BlockT&gt; Clone for NetworkStatus&lt;B&gt;","synthetic":false,"types":[]}];
implementors["sc_network_gossip"] = [{"text":"impl Clone for TopicNotification","synthetic":false,"types":[]},{"text":"impl Clone for MessageIntent","synthetic":false,"types":[]}];
implementors["sc_peerset"] = [{"text":"impl Clone for ReputationChange","synthetic":false,"types":[]},{"text":"impl Clone for PeersetHandle","synthetic":false,"types":[]},{"text":"impl Clone for IncomingIndex","synthetic":false,"types":[]}];
implementors["sc_proposer_metrics"] = [{"text":"impl Clone for MetricsLink","synthetic":false,"types":[]},{"text":"impl Clone for Metrics","synthetic":false,"types":[]}];
implementors["sc_rpc"] = [{"text":"impl Clone for SubscriptionTaskExecutor","synthetic":false,"types":[]}];
implementors["sc_rpc_api"] = [{"text":"impl Clone for Metadata","synthetic":false,"types":[]},{"text":"impl Clone for DenyUnsafe","synthetic":false,"types":[]},{"text":"impl&lt;Hash:&nbsp;Clone, BlockHash:&nbsp;Clone&gt; Clone for Client&lt;Hash, BlockHash&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Number:&nbsp;Clone, Hash:&nbsp;Clone, Header:&nbsp;Clone, SignedBlock:&nbsp;Clone&gt; Clone for Client&lt;Number, Hash, Header, SignedBlock&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Client","synthetic":false,"types":[]},{"text":"impl&lt;Hash:&nbsp;Clone&gt; Clone for Client&lt;Hash&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Hash:&nbsp;Clone&gt; Clone for Client&lt;Hash&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SystemInfo","synthetic":false,"types":[]},{"text":"impl&lt;Hash:&nbsp;Clone, Number:&nbsp;Clone&gt; Clone for Client&lt;Hash, Number&gt;","synthetic":false,"types":[]}];
implementors["sc_rpc_server"] = [{"text":"impl Clone for RpcMetrics","synthetic":false,"types":[]}];
implementors["sc_service"] = [{"text":"impl Clone for KeystoreConfig","synthetic":false,"types":[]},{"text":"impl Clone for OffchainWorkerConfig","synthetic":false,"types":[]},{"text":"impl Clone for PrometheusConfig","synthetic":false,"types":[]},{"text":"impl Clone for RpcMethods","synthetic":false,"types":[]},{"text":"impl Clone for TaskExecutor","synthetic":false,"types":[]},{"text":"impl Clone for SpawnTaskHandle","synthetic":false,"types":[]},{"text":"impl Clone for RpcHandlers","synthetic":false,"types":[]},{"text":"impl&lt;Block:&nbsp;Clone + BlockT&gt; Clone for NetworkStatusSinks&lt;Block&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TelemetryConnectionSinks","synthetic":false,"types":[]},{"text":"impl Clone for RpcSession","synthetic":false,"types":[]}];
implementors["sc_state_db"] = [{"text":"impl&lt;H:&nbsp;Clone + Hash&gt; Clone for ChangeSet&lt;H&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone + Hash&gt; Clone for CommitSet&lt;H&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Constraints","synthetic":false,"types":[]},{"text":"impl Clone for PruningMode","synthetic":false,"types":[]}];
implementors["sc_telemetry"] = [{"text":"impl Clone for TelemetryEndpoints","synthetic":false,"types":[]},{"text":"impl Clone for Telemetry","synthetic":false,"types":[]}];
implementors["sc_tracing"] = [{"text":"impl Clone for TracingReceiver","synthetic":false,"types":[]},{"text":"impl Clone for Values","synthetic":false,"types":[]}];
implementors["sc_transaction_graph"] = [{"text":"impl Clone for Options","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;ChainApi&gt; Clone for Pool&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Limit","synthetic":false,"types":[]}];
implementors["schnorrkel"] = [{"text":"impl Clone for RistrettoBoth","synthetic":false,"types":[]},{"text":"impl Clone for MiniSecretKey","synthetic":false,"types":[]},{"text":"impl Clone for SecretKey","synthetic":false,"types":[]},{"text":"impl Clone for PublicKey","synthetic":false,"types":[]},{"text":"impl Clone for Keypair","synthetic":false,"types":[]},{"text":"impl Clone for SigningContext","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + SigningTranscript&gt; Clone for Malleable&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for VRFOutput","synthetic":false,"types":[]},{"text":"impl Clone for VRFInOut","synthetic":false,"types":[]},{"text":"impl Clone for VRFProof","synthetic":false,"types":[]},{"text":"impl Clone for VRFProofBatchable","synthetic":false,"types":[]},{"text":"impl Clone for ChainCode","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone&gt; Clone for ExtendedKey&lt;K&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ECQVCertSecret","synthetic":false,"types":[]},{"text":"impl Clone for ECQVCertPublic","synthetic":false,"types":[]},{"text":"impl Clone for MultiSignatureStage","synthetic":false,"types":[]},{"text":"impl Clone for SignatureError","synthetic":false,"types":[]},{"text":"impl Clone for Commitment","synthetic":false,"types":[]},{"text":"impl Clone for Reveal","synthetic":false,"types":[]},{"text":"impl Clone for Cosignature","synthetic":false,"types":[]}];
implementors["scroll"] = [{"text":"impl Clone for StrCtx","synthetic":false,"types":[]},{"text":"impl Clone for Endian","synthetic":false,"types":[]},{"text":"impl Clone for Uleb128","synthetic":false,"types":[]},{"text":"impl Clone for Sleb128","synthetic":false,"types":[]}];
implementors["sct"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["secp256k1"] = [{"text":"impl Clone for Field","synthetic":false,"types":[]},{"text":"impl Clone for Affine","synthetic":false,"types":[]},{"text":"impl Clone for Jacobian","synthetic":false,"types":[]},{"text":"impl Clone for AffineStorage","synthetic":false,"types":[]},{"text":"impl Clone for Scalar","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for PublicKey","synthetic":false,"types":[]},{"text":"impl Clone for SecretKey","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for RecoveryId","synthetic":false,"types":[]},{"text":"impl Clone for Message","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone + Digest&gt; Clone for SharedSecret&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D::OutputSize: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["secrecy"] = [{"text":"impl&lt;S&gt; Clone for Secret&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: CloneableSecret,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for UnitDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for BoolDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for IsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for UsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for F32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for F64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for CharDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for StrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for StringDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E&gt; Clone for CowStrDeserializer&lt;'a, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for SeqDeserializer&lt;I, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for SeqAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, I, E&gt; Clone for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Pair,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I::Item as Pair&gt;::Second: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for MapAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl Clone for IgnoredAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Unexpected&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Clone for Category","synthetic":false,"types":[]},{"text":"impl Clone for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CompactFormatter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for PrettyFormatter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Number","synthetic":false,"types":[]}];
implementors["sha1"] = [{"text":"impl Clone for Sha1","synthetic":false,"types":[]}];
implementors["sha2"] = [{"text":"impl Clone for Sha256","synthetic":false,"types":[]},{"text":"impl Clone for Sha224","synthetic":false,"types":[]},{"text":"impl Clone for Sha512","synthetic":false,"types":[]},{"text":"impl Clone for Sha384","synthetic":false,"types":[]},{"text":"impl Clone for Sha512Trunc256","synthetic":false,"types":[]},{"text":"impl Clone for Sha512Trunc224","synthetic":false,"types":[]}];
implementors["sha3"] = [{"text":"impl Clone for Keccak224","synthetic":false,"types":[]},{"text":"impl Clone for Keccak256","synthetic":false,"types":[]},{"text":"impl Clone for Keccak384","synthetic":false,"types":[]},{"text":"impl Clone for Keccak512","synthetic":false,"types":[]},{"text":"impl Clone for Keccak256Full","synthetic":false,"types":[]},{"text":"impl Clone for Sha3_224","synthetic":false,"types":[]},{"text":"impl Clone for Sha3_256","synthetic":false,"types":[]},{"text":"impl Clone for Sha3_384","synthetic":false,"types":[]},{"text":"impl Clone for Sha3_512","synthetic":false,"types":[]},{"text":"impl Clone for Shake128","synthetic":false,"types":[]},{"text":"impl Clone for Shake256","synthetic":false,"types":[]}];
implementors["sharded_slab"] = [{"text":"impl Clone for DefaultConfig","synthetic":false,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl Clone for SigId","synthetic":false,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Slab&lt;T&gt;","synthetic":false,"types":[]}];
implementors["slog"] = [{"text":"impl&lt;D:&nbsp;Clone&gt; Clone for Logger&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: SendSyncUnwindSafeDrain&lt;Ok = (), Err = Never&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Discard","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone + Drain, F:&nbsp;Clone&gt; Clone for Filter&lt;D, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Fn(&amp;Record&lt;'_&gt;) -&gt; bool + 'static + Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone + Drain&gt; Clone for LevelFilter&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D1:&nbsp;Clone + Drain, D2:&nbsp;Clone + Drain&gt; Clone for Duplicate&lt;D1, D2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone + Drain&gt; Clone for Fuse&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D::Err: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone + Drain&gt; Clone for IgnoreResult&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone + Drain&gt; Clone for MutexDrainError&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D::Err: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Level","synthetic":false,"types":[]},{"text":"impl Clone for FilterLevel","synthetic":false,"types":[]},{"text":"impl Clone for OwnedKVList","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Clone for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["snow"] = [{"text":"impl Clone for HandshakePattern","synthetic":false,"types":[]},{"text":"impl Clone for HandshakeModifier","synthetic":false,"types":[]},{"text":"impl Clone for HandshakeChoice","synthetic":false,"types":[]},{"text":"impl Clone for BaseChoice","synthetic":false,"types":[]},{"text":"impl Clone for DHChoice","synthetic":false,"types":[]},{"text":"impl Clone for CipherChoice","synthetic":false,"types":[]},{"text":"impl Clone for HashChoice","synthetic":false,"types":[]},{"text":"impl Clone for NoiseParams","synthetic":false,"types":[]}];
implementors["socket2"] = [{"text":"impl Clone for Domain","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for Protocol","synthetic":false,"types":[]}];
implementors["soketto"] = [{"text":"impl Clone for OpCode","synthetic":false,"types":[]},{"text":"impl Clone for UnknownOpCode","synthetic":false,"types":[]},{"text":"impl Clone for Header","synthetic":false,"types":[]},{"text":"impl Clone for Codec","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Incoming&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Data","synthetic":false,"types":[]},{"text":"impl Clone for SliceTooLarge","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Param&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Mode","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, N:&nbsp;Clone&gt; Clone for Parsing&lt;T, N&gt;","synthetic":false,"types":[]}];
implementors["sp_api"] = [{"text":"impl&lt;'a, Block:&nbsp;Clone + BlockT&gt; Clone for InitializeBlock&lt;'a, Block&gt;","synthetic":false,"types":[]}];
implementors["sp_application_crypto"] = [{"text":"impl Clone for Public","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for Pair","synthetic":false,"types":[]},{"text":"impl Clone for Public","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for Pair","synthetic":false,"types":[]},{"text":"impl Clone for Public","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for Pair","synthetic":false,"types":[]}];
implementors["sp_arithmetic"] = [{"text":"impl Clone for BigUint","synthetic":false,"types":[]},{"text":"impl Clone for Percent","synthetic":false,"types":[]},{"text":"impl Clone for PerU16","synthetic":false,"types":[]},{"text":"impl Clone for Permill","synthetic":false,"types":[]},{"text":"impl Clone for Perbill","synthetic":false,"types":[]},{"text":"impl Clone for Perquintill","synthetic":false,"types":[]},{"text":"impl Clone for FixedI64","synthetic":false,"types":[]},{"text":"impl Clone for FixedI128","synthetic":false,"types":[]},{"text":"impl Clone for FixedU128","synthetic":false,"types":[]},{"text":"impl Clone for Rational128","synthetic":false,"types":[]}];
implementors["sp_blockchain"] = [{"text":"impl&lt;Block:&nbsp;Clone + BlockT&gt; Clone for HashAndNumber&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block::Hash: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Block:&nbsp;Clone + BlockT&gt; Clone for TreeRoute&lt;Block&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Block:&nbsp;Clone + BlockT&gt; Clone for CachedHeaderMetadata&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block::Hash: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Block::Hash: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Block::Hash: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Block::Hash: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sp_chain_spec"] = [{"text":"impl Clone for ChainType","synthetic":false,"types":[]}];
implementors["sp_consensus"] = [{"text":"impl Clone for BlockOrigin","synthetic":false,"types":[]},{"text":"impl Clone for ForkChoiceStrategy","synthetic":false,"types":[]},{"text":"impl&lt;Block:&nbsp;Clone + BlockT&gt; Clone for BlockCheckParams&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block::Hash: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Block::Hash: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;BlockT&gt; Clone for BufferedLinkSender&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone + BlockT&gt; Clone for IncomingBlock&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RecordProof","synthetic":false,"types":[]},{"text":"impl Clone for NoNetwork","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for CanAuthorWithNativeVersion&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for AlwaysCanAuthor","synthetic":false,"types":[]},{"text":"impl Clone for NeverCanAuthor","synthetic":false,"types":[]}];
implementors["sp_consensus_slots"] = [{"text":"impl&lt;Header:&nbsp;Clone, Id:&nbsp;Clone&gt; Clone for EquivocationProof&lt;Header, Id&gt;","synthetic":false,"types":[]}];
implementors["sp_core"] = [{"text":"impl Clone for SecretStringError","synthetic":false,"types":[]},{"text":"impl Clone for DeriveJunction","synthetic":false,"types":[]},{"text":"impl Clone for PublicError","synthetic":false,"types":[]},{"text":"impl Clone for Ss58AddressFormat","synthetic":false,"types":[]},{"text":"impl Clone for ParseError","synthetic":false,"types":[]},{"text":"impl Clone for AccountId32","synthetic":false,"types":[]},{"text":"impl Clone for Dummy","synthetic":false,"types":[]},{"text":"impl Clone for KeyTypeId","synthetic":false,"types":[]},{"text":"impl Clone for CryptoTypeId","synthetic":false,"types":[]},{"text":"impl Clone for CryptoTypePublicPair","synthetic":false,"types":[]},{"text":"impl Clone for Public","synthetic":false,"types":[]},{"text":"impl Clone for Pair","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for LocalizedSignature","synthetic":false,"types":[]},{"text":"impl Clone for PublicError","synthetic":false,"types":[]},{"text":"impl Clone for Public","synthetic":false,"types":[]},{"text":"impl Clone for Pair","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for LocalizedSignature","synthetic":false,"types":[]},{"text":"impl Clone for Public","synthetic":false,"types":[]},{"text":"impl Clone for PublicError","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for Pair","synthetic":false,"types":[]},{"text":"impl Clone for InMemOffchainStorage","synthetic":false,"types":[]},{"text":"impl Clone for OffchainOverlayedChange","synthetic":false,"types":[]},{"text":"impl Clone for OffchainOverlayedChanges","synthetic":false,"types":[]},{"text":"impl Clone for TestPersistentOffchainDB","synthetic":false,"types":[]},{"text":"impl Clone for TestOffchainExt","synthetic":false,"types":[]},{"text":"impl Clone for StorageKind","synthetic":false,"types":[]},{"text":"impl Clone for HttpRequestId","synthetic":false,"types":[]},{"text":"impl Clone for HttpError","synthetic":false,"types":[]},{"text":"impl Clone for HttpRequestStatus","synthetic":false,"types":[]},{"text":"impl Clone for OpaqueNetworkState","synthetic":false,"types":[]},{"text":"impl Clone for OpaqueMultiaddr","synthetic":false,"types":[]},{"text":"impl Clone for Timestamp","synthetic":false,"types":[]},{"text":"impl Clone for Duration","synthetic":false,"types":[]},{"text":"impl Clone for Capability","synthetic":false,"types":[]},{"text":"impl Clone for Capabilities","synthetic":false,"types":[]},{"text":"impl Clone for ExternEntity","synthetic":false,"types":[]},{"text":"impl Clone for Entry","synthetic":false,"types":[]},{"text":"impl Clone for EnvironmentDefinition","synthetic":false,"types":[]},{"text":"impl Clone for ChangesTrieConfiguration","synthetic":false,"types":[]},{"text":"impl&lt;Number:&nbsp;Clone, Hash:&nbsp;Clone&gt; Clone for ChangesTrieConfigurationRange&lt;Number, Hash&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for RuntimeCode&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for MissingHostFunctions","synthetic":false,"types":[]},{"text":"impl&lt;'clone&gt; Clone for Box&lt;dyn SpawnNamed + 'clone&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TaskExecutor","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for VRFTranscriptValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for VRFTranscriptData&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Bytes","synthetic":false,"types":[]},{"text":"impl Clone for OpaquePeerId","synthetic":false,"types":[]},{"text":"impl Clone for LogLevel","synthetic":false,"types":[]},{"text":"impl Clone for Void","synthetic":false,"types":[]}];
implementors["sp_database"] = [{"text":"impl&lt;H:&nbsp;Clone&gt; Clone for Change&lt;H&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone&gt; Clone for Transaction&lt;H&gt;","synthetic":false,"types":[]}];
implementors["sp_finality_grandpa"] = [{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for ScheduledChange&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + Codec&gt; Clone for ConsensusLog&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone, N:&nbsp;Clone&gt; Clone for EquivocationProof&lt;H, N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone, N:&nbsp;Clone&gt; Clone for Equivocation&lt;H, N&gt;","synthetic":false,"types":[]}];
implementors["sp_inherents"] = [{"text":"impl Clone for InherentData","synthetic":false,"types":[]},{"text":"impl Clone for CheckInherentsResult","synthetic":false,"types":[]},{"text":"impl Clone for InherentDataProviders","synthetic":false,"types":[]}];
implementors["sp_keyring"] = [{"text":"impl Clone for Keyring","synthetic":false,"types":[]},{"text":"impl Clone for KeyringIter","synthetic":false,"types":[]},{"text":"impl Clone for Keyring","synthetic":false,"types":[]},{"text":"impl Clone for KeyringIter","synthetic":false,"types":[]}];
implementors["sp_rpc"] = [{"text":"impl Clone for NumberOrHex","synthetic":false,"types":[]}];
implementors["sp_runtime"] = [{"text":"impl&lt;Address:&nbsp;Clone, Call:&nbsp;Clone, Signature:&nbsp;Clone, Extra:&nbsp;Clone&gt; Clone for UncheckedExtrinsic&lt;Address, Call, Signature, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: SignedExtension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Era","synthetic":false,"types":[]},{"text":"impl&lt;AccountId:&nbsp;Clone, Call:&nbsp;Clone, Extra:&nbsp;Clone&gt; Clone for CheckedExtrinsic&lt;AccountId, Call, Extra&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Number:&nbsp;Clone + Copy + Into&lt;U256&gt; + TryFrom&lt;U256&gt;, Hash:&nbsp;Clone + HashT&gt; Clone for Header&lt;Number, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash::Output: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash::Output: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash::Output: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash::Output: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Block:&nbsp;Clone + BlockT&gt; Clone for BlockId&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block::Hash: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Header:&nbsp;Clone, Extrinsic:&nbsp;Clone + MaybeSerialize&gt; Clone for Block&lt;Header, Extrinsic&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Block:&nbsp;Clone&gt; Clone for SignedBlock&lt;Block&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Hash:&nbsp;Clone&gt; Clone for Digest&lt;Hash&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Hash:&nbsp;Clone&gt; Clone for DigestItem&lt;Hash&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ChangesTrieSignal","synthetic":false,"types":[]},{"text":"impl&lt;'a, Hash:&nbsp;Clone + 'a&gt; Clone for DigestItemRef&lt;'a, Hash&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for OpaqueDigestItemId&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Method","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for Request&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ResponseBody","synthetic":false,"types":[]},{"text":"impl Clone for Headers","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for HeadersIterator&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;BlockNumberProvider&gt; Clone for BlockAndTimeDeadline&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;BlockNumberProvider&gt; Clone for BlockAndTime&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UintAuthorityId","synthetic":false,"types":[]},{"text":"impl Clone for TestSignature","synthetic":false,"types":[]},{"text":"impl&lt;Xt:&nbsp;Clone&gt; Clone for ExtrinsicWrapper&lt;Xt&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Xt:&nbsp;Clone&gt; Clone for Block&lt;Xt&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Call:&nbsp;Clone, Extra:&nbsp;Clone&gt; Clone for TestXt&lt;Call, Extra&gt;","synthetic":false,"types":[]},{"text":"impl Clone for BlakeTwo256","synthetic":false,"types":[]},{"text":"impl Clone for Keccak256","synthetic":false,"types":[]},{"text":"impl Clone for InvalidTransaction","synthetic":false,"types":[]},{"text":"impl Clone for UnknownTransaction","synthetic":false,"types":[]},{"text":"impl Clone for TransactionValidityError","synthetic":false,"types":[]},{"text":"impl Clone for TransactionSource","synthetic":false,"types":[]},{"text":"impl Clone for ValidTransaction","synthetic":false,"types":[]},{"text":"impl Clone for ValidTransactionBuilder","synthetic":false,"types":[]},{"text":"impl Clone for RuntimeString","synthetic":false,"types":[]},{"text":"impl Clone for ModuleId","synthetic":false,"types":[]},{"text":"impl Clone for MultiSignature","synthetic":false,"types":[]},{"text":"impl Clone for MultiSigner","synthetic":false,"types":[]},{"text":"impl Clone for AnySignature","synthetic":false,"types":[]},{"text":"impl Clone for DispatchError","synthetic":false,"types":[]},{"text":"impl&lt;Info:&nbsp;Clone&gt; Clone for DispatchErrorWithPostInfo&lt;Info&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Info: Eq + PartialEq + Clone + Copy + Encode + Decode + Printable,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for OpaqueExtrinsic","synthetic":false,"types":[]}];
implementors["sp_session"] = [{"text":"impl Clone for MembershipProof","synthetic":false,"types":[]}];
implementors["sp_staking"] = [{"text":"impl&lt;Reporter:&nbsp;Clone, Offender:&nbsp;Clone&gt; Clone for OffenceDetails&lt;Reporter, Offender&gt;","synthetic":false,"types":[]}];
implementors["sp_state_machine"] = [{"text":"impl&lt;H:&nbsp;Hasher&gt; Clone for TrieBackend&lt;MemoryDB&lt;H&gt;, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H::Out: Codec + Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Clone&gt; Clone for ConfigurationRange&lt;'a, N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, H, Number:&nbsp;Clone&gt; Clone for State&lt;'a, H, Number&gt;","synthetic":false,"types":[]},{"text":"impl Clone for OverlayedChanges","synthetic":false,"types":[]},{"text":"impl Clone for UsageUnit","synthetic":false,"types":[]},{"text":"impl Clone for UsageInfo","synthetic":false,"types":[]},{"text":"impl Clone for StateMachineStats","synthetic":false,"types":[]},{"text":"impl Clone for ExecutionStrategy","synthetic":false,"types":[]},{"text":"impl Clone for BackendTrustLevel","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone&gt; Clone for ExecutionManager&lt;F&gt;","synthetic":false,"types":[]}];
implementors["sp_storage"] = [{"text":"impl Clone for StorageKey","synthetic":false,"types":[]},{"text":"impl Clone for TrackedStorageKey","synthetic":false,"types":[]},{"text":"impl Clone for PrefixedStorageKey","synthetic":false,"types":[]},{"text":"impl Clone for StorageData","synthetic":false,"types":[]},{"text":"impl Clone for StorageChild","synthetic":false,"types":[]},{"text":"impl Clone for Storage","synthetic":false,"types":[]},{"text":"impl Clone for ChildInfo","synthetic":false,"types":[]},{"text":"impl Clone for ChildType","synthetic":false,"types":[]},{"text":"impl Clone for ChildTrieParentKeyId","synthetic":false,"types":[]}];
implementors["sp_tracing"] = [{"text":"impl Clone for WasmLevel","synthetic":false,"types":[]},{"text":"impl Clone for WasmValue","synthetic":false,"types":[]},{"text":"impl Clone for WasmFieldName","synthetic":false,"types":[]},{"text":"impl Clone for WasmFields","synthetic":false,"types":[]},{"text":"impl Clone for WasmValuesSet","synthetic":false,"types":[]},{"text":"impl Clone for WasmMetadata","synthetic":false,"types":[]},{"text":"impl Clone for WasmEntryAttributes","synthetic":false,"types":[]}];
implementors["sp_transaction_pool"] = [{"text":"impl&lt;Hash:&nbsp;Clone, BlockHash:&nbsp;Clone&gt; Clone for TransactionStatus&lt;Hash, BlockHash&gt;","synthetic":false,"types":[]}];
implementors["sp_trie"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone&gt; Clone for NodeCodec&lt;H&gt;","synthetic":false,"types":[]},{"text":"impl Clone for StorageProof","synthetic":false,"types":[]},{"text":"impl Clone for TrieStream","synthetic":false,"types":[]}];
implementors["sp_utils"] = [{"text":"impl&lt;T&gt; Clone for TracingUnboundedSender&lt;T&gt;","synthetic":false,"types":[]}];
implementors["sp_version"] = [{"text":"impl Clone for RuntimeVersion","synthetic":false,"types":[]}];
implementors["sp_wasm_interface"] = [{"text":"impl Clone for ValueType","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + PointerType&gt; Clone for Pointer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for ReturnValue","synthetic":false,"types":[]}];
implementors["statrs"] = [{"text":"impl Clone for Bernoulli","synthetic":false,"types":[]},{"text":"impl Clone for Beta","synthetic":false,"types":[]},{"text":"impl Clone for Binomial","synthetic":false,"types":[]},{"text":"impl Clone for Categorical","synthetic":false,"types":[]},{"text":"impl Clone for Cauchy","synthetic":false,"types":[]},{"text":"impl Clone for Chi","synthetic":false,"types":[]},{"text":"impl Clone for ChiSquared","synthetic":false,"types":[]},{"text":"impl Clone for Dirichlet","synthetic":false,"types":[]},{"text":"impl Clone for DiscreteUniform","synthetic":false,"types":[]},{"text":"impl Clone for Erlang","synthetic":false,"types":[]},{"text":"impl Clone for Exponential","synthetic":false,"types":[]},{"text":"impl Clone for FisherSnedecor","synthetic":false,"types":[]},{"text":"impl Clone for Gamma","synthetic":false,"types":[]},{"text":"impl Clone for Geometric","synthetic":false,"types":[]},{"text":"impl Clone for Hypergeometric","synthetic":false,"types":[]},{"text":"impl Clone for InverseGamma","synthetic":false,"types":[]},{"text":"impl Clone for LogNormal","synthetic":false,"types":[]},{"text":"impl Clone for Multinomial","synthetic":false,"types":[]},{"text":"impl Clone for Normal","synthetic":false,"types":[]},{"text":"impl Clone for Pareto","synthetic":false,"types":[]},{"text":"impl Clone for Poisson","synthetic":false,"types":[]},{"text":"impl Clone for StudentsT","synthetic":false,"types":[]},{"text":"impl Clone for Triangular","synthetic":false,"types":[]},{"text":"impl Clone for Uniform","synthetic":false,"types":[]},{"text":"impl Clone for Weibull","synthetic":false,"types":[]},{"text":"impl Clone for RankTieBreaker","synthetic":false,"types":[]}];
implementors["stream_cipher"] = [{"text":"impl Clone for LoopError","synthetic":false,"types":[]},{"text":"impl Clone for InvalidKeyNonceLength","synthetic":false,"types":[]},{"text":"impl Clone for OverflowError","synthetic":false,"types":[]}];
implementors["string"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for String&lt;T&gt;","synthetic":false,"types":[]}];
implementors["strum"] = [{"text":"impl Clone for ParseError","synthetic":false,"types":[]}];
implementors["substrate_bip39"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["substrate_frame_rpc_system"] = [{"text":"impl&lt;BlockHash:&nbsp;Clone, AccountId:&nbsp;Clone, Index:&nbsp;Clone&gt; Clone for Client&lt;BlockHash, AccountId, Index&gt;","synthetic":false,"types":[]}];
implementors["subtle"] = [{"text":"impl Clone for Choice","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Clone for Underscore","synthetic":false,"types":[]},{"text":"impl Clone for Abstract","synthetic":false,"types":[]},{"text":"impl Clone for As","synthetic":false,"types":[]},{"text":"impl Clone for Async","synthetic":false,"types":[]},{"text":"impl Clone for Auto","synthetic":false,"types":[]},{"text":"impl Clone for Await","synthetic":false,"types":[]},{"text":"impl Clone for Become","synthetic":false,"types":[]},{"text":"impl Clone for Box","synthetic":false,"types":[]},{"text":"impl Clone for Break","synthetic":false,"types":[]},{"text":"impl Clone for Const","synthetic":false,"types":[]},{"text":"impl Clone for Continue","synthetic":false,"types":[]},{"text":"impl Clone for Crate","synthetic":false,"types":[]},{"text":"impl Clone for Default","synthetic":false,"types":[]},{"text":"impl Clone for Do","synthetic":false,"types":[]},{"text":"impl Clone for Dyn","synthetic":false,"types":[]},{"text":"impl Clone for Else","synthetic":false,"types":[]},{"text":"impl Clone for Enum","synthetic":false,"types":[]},{"text":"impl Clone for Extern","synthetic":false,"types":[]},{"text":"impl Clone for Final","synthetic":false,"types":[]},{"text":"impl Clone for Fn","synthetic":false,"types":[]},{"text":"impl Clone for For","synthetic":false,"types":[]},{"text":"impl Clone for If","synthetic":false,"types":[]},{"text":"impl Clone for Impl","synthetic":false,"types":[]},{"text":"impl Clone for In","synthetic":false,"types":[]},{"text":"impl Clone for Let","synthetic":false,"types":[]},{"text":"impl Clone for Loop","synthetic":false,"types":[]},{"text":"impl Clone for Macro","synthetic":false,"types":[]},{"text":"impl Clone for Match","synthetic":false,"types":[]},{"text":"impl Clone for Mod","synthetic":false,"types":[]},{"text":"impl Clone for Move","synthetic":false,"types":[]},{"text":"impl Clone for Mut","synthetic":false,"types":[]},{"text":"impl Clone for Override","synthetic":false,"types":[]},{"text":"impl Clone for Priv","synthetic":false,"types":[]},{"text":"impl Clone for Pub","synthetic":false,"types":[]},{"text":"impl Clone for Ref","synthetic":false,"types":[]},{"text":"impl Clone for Return","synthetic":false,"types":[]},{"text":"impl Clone for SelfType","synthetic":false,"types":[]},{"text":"impl Clone for SelfValue","synthetic":false,"types":[]},{"text":"impl Clone for Static","synthetic":false,"types":[]},{"text":"impl Clone for Struct","synthetic":false,"types":[]},{"text":"impl Clone for Super","synthetic":false,"types":[]},{"text":"impl Clone for Trait","synthetic":false,"types":[]},{"text":"impl Clone for Try","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for Typeof","synthetic":false,"types":[]},{"text":"impl Clone for Union","synthetic":false,"types":[]},{"text":"impl Clone for Unsafe","synthetic":false,"types":[]},{"text":"impl Clone for Unsized","synthetic":false,"types":[]},{"text":"impl Clone for Use","synthetic":false,"types":[]},{"text":"impl Clone for Virtual","synthetic":false,"types":[]},{"text":"impl Clone for Where","synthetic":false,"types":[]},{"text":"impl Clone for While","synthetic":false,"types":[]},{"text":"impl Clone for Yield","synthetic":false,"types":[]},{"text":"impl Clone for Add","synthetic":false,"types":[]},{"text":"impl Clone for AddEq","synthetic":false,"types":[]},{"text":"impl Clone for And","synthetic":false,"types":[]},{"text":"impl Clone for AndAnd","synthetic":false,"types":[]},{"text":"impl Clone for AndEq","synthetic":false,"types":[]},{"text":"impl Clone for At","synthetic":false,"types":[]},{"text":"impl Clone for Bang","synthetic":false,"types":[]},{"text":"impl Clone for Caret","synthetic":false,"types":[]},{"text":"impl Clone for CaretEq","synthetic":false,"types":[]},{"text":"impl Clone for Colon","synthetic":false,"types":[]},{"text":"impl Clone for Colon2","synthetic":false,"types":[]},{"text":"impl Clone for Comma","synthetic":false,"types":[]},{"text":"impl Clone for Div","synthetic":false,"types":[]},{"text":"impl Clone for DivEq","synthetic":false,"types":[]},{"text":"impl Clone for Dollar","synthetic":false,"types":[]},{"text":"impl Clone for Dot","synthetic":false,"types":[]},{"text":"impl Clone for Dot2","synthetic":false,"types":[]},{"text":"impl Clone for Dot3","synthetic":false,"types":[]},{"text":"impl Clone for DotDotEq","synthetic":false,"types":[]},{"text":"impl Clone for Eq","synthetic":false,"types":[]},{"text":"impl Clone for EqEq","synthetic":false,"types":[]},{"text":"impl Clone for Ge","synthetic":false,"types":[]},{"text":"impl Clone for Gt","synthetic":false,"types":[]},{"text":"impl Clone for Le","synthetic":false,"types":[]},{"text":"impl Clone for Lt","synthetic":false,"types":[]},{"text":"impl Clone for MulEq","synthetic":false,"types":[]},{"text":"impl Clone for Ne","synthetic":false,"types":[]},{"text":"impl Clone for Or","synthetic":false,"types":[]},{"text":"impl Clone for OrEq","synthetic":false,"types":[]},{"text":"impl Clone for OrOr","synthetic":false,"types":[]},{"text":"impl Clone for Pound","synthetic":false,"types":[]},{"text":"impl Clone for Question","synthetic":false,"types":[]},{"text":"impl Clone for RArrow","synthetic":false,"types":[]},{"text":"impl Clone for LArrow","synthetic":false,"types":[]},{"text":"impl Clone for Rem","synthetic":false,"types":[]},{"text":"impl Clone for RemEq","synthetic":false,"types":[]},{"text":"impl Clone for FatArrow","synthetic":false,"types":[]},{"text":"impl Clone for Semi","synthetic":false,"types":[]},{"text":"impl Clone for Shl","synthetic":false,"types":[]},{"text":"impl Clone for ShlEq","synthetic":false,"types":[]},{"text":"impl Clone for Shr","synthetic":false,"types":[]},{"text":"impl Clone for ShrEq","synthetic":false,"types":[]},{"text":"impl Clone for Star","synthetic":false,"types":[]},{"text":"impl Clone for Sub","synthetic":false,"types":[]},{"text":"impl Clone for SubEq","synthetic":false,"types":[]},{"text":"impl Clone for Tilde","synthetic":false,"types":[]},{"text":"impl Clone for Brace","synthetic":false,"types":[]},{"text":"impl Clone for Bracket","synthetic":false,"types":[]},{"text":"impl Clone for Paren","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ImplGenerics&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for TypeGenerics&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Turbofish&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Lifetime","synthetic":false,"types":[]},{"text":"impl Clone for LitStr","synthetic":false,"types":[]},{"text":"impl Clone for LitByteStr","synthetic":false,"types":[]},{"text":"impl Clone for LitByte","synthetic":false,"types":[]},{"text":"impl Clone for LitChar","synthetic":false,"types":[]},{"text":"impl Clone for LitInt","synthetic":false,"types":[]},{"text":"impl Clone for LitFloat","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Cursor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, P&gt; Clone for Pairs&lt;'a, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Abi","synthetic":false,"types":[]},{"text":"impl Clone for AngleBracketedGenericArguments","synthetic":false,"types":[]},{"text":"impl Clone for Arm","synthetic":false,"types":[]},{"text":"impl Clone for AttrStyle","synthetic":false,"types":[]},{"text":"impl Clone for Attribute","synthetic":false,"types":[]},{"text":"impl Clone for BareFnArg","synthetic":false,"types":[]},{"text":"impl Clone for BinOp","synthetic":false,"types":[]},{"text":"impl Clone for Binding","synthetic":false,"types":[]},{"text":"impl Clone for Block","synthetic":false,"types":[]},{"text":"impl Clone for BoundLifetimes","synthetic":false,"types":[]},{"text":"impl Clone for ConstParam","synthetic":false,"types":[]},{"text":"impl Clone for Constraint","synthetic":false,"types":[]},{"text":"impl Clone for Data","synthetic":false,"types":[]},{"text":"impl Clone for DataEnum","synthetic":false,"types":[]},{"text":"impl Clone for DataStruct","synthetic":false,"types":[]},{"text":"impl Clone for DataUnion","synthetic":false,"types":[]},{"text":"impl Clone for DeriveInput","synthetic":false,"types":[]},{"text":"impl Clone for Expr","synthetic":false,"types":[]},{"text":"impl Clone for ExprArray","synthetic":false,"types":[]},{"text":"impl Clone for ExprAssign","synthetic":false,"types":[]},{"text":"impl Clone for ExprAssignOp","synthetic":false,"types":[]},{"text":"impl Clone for ExprAsync","synthetic":false,"types":[]},{"text":"impl Clone for ExprAwait","synthetic":false,"types":[]},{"text":"impl Clone for ExprBinary","synthetic":false,"types":[]},{"text":"impl Clone for ExprBlock","synthetic":false,"types":[]},{"text":"impl Clone for ExprBox","synthetic":false,"types":[]},{"text":"impl Clone for ExprBreak","synthetic":false,"types":[]},{"text":"impl Clone for ExprCall","synthetic":false,"types":[]},{"text":"impl Clone for ExprCast","synthetic":false,"types":[]},{"text":"impl Clone for ExprClosure","synthetic":false,"types":[]},{"text":"impl Clone for ExprContinue","synthetic":false,"types":[]},{"text":"impl Clone for ExprField","synthetic":false,"types":[]},{"text":"impl Clone for ExprForLoop","synthetic":false,"types":[]},{"text":"impl Clone for ExprGroup","synthetic":false,"types":[]},{"text":"impl Clone for ExprIf","synthetic":false,"types":[]},{"text":"impl Clone for ExprIndex","synthetic":false,"types":[]},{"text":"impl Clone for ExprLet","synthetic":false,"types":[]},{"text":"impl Clone for ExprLit","synthetic":false,"types":[]},{"text":"impl Clone for ExprLoop","synthetic":false,"types":[]},{"text":"impl Clone for ExprMacro","synthetic":false,"types":[]},{"text":"impl Clone for ExprMatch","synthetic":false,"types":[]},{"text":"impl Clone for ExprMethodCall","synthetic":false,"types":[]},{"text":"impl Clone for ExprParen","synthetic":false,"types":[]},{"text":"impl Clone for ExprPath","synthetic":false,"types":[]},{"text":"impl Clone for ExprRange","synthetic":false,"types":[]},{"text":"impl Clone for ExprReference","synthetic":false,"types":[]},{"text":"impl Clone for ExprRepeat","synthetic":false,"types":[]},{"text":"impl Clone for ExprReturn","synthetic":false,"types":[]},{"text":"impl Clone for ExprStruct","synthetic":false,"types":[]},{"text":"impl Clone for ExprTry","synthetic":false,"types":[]},{"text":"impl Clone for ExprTryBlock","synthetic":false,"types":[]},{"text":"impl Clone for ExprTuple","synthetic":false,"types":[]},{"text":"impl Clone for ExprType","synthetic":false,"types":[]},{"text":"impl Clone for ExprUnary","synthetic":false,"types":[]},{"text":"impl Clone for ExprUnsafe","synthetic":false,"types":[]},{"text":"impl Clone for ExprWhile","synthetic":false,"types":[]},{"text":"impl Clone for ExprYield","synthetic":false,"types":[]},{"text":"impl Clone for Field","synthetic":false,"types":[]},{"text":"impl Clone for FieldPat","synthetic":false,"types":[]},{"text":"impl Clone for FieldValue","synthetic":false,"types":[]},{"text":"impl Clone for Fields","synthetic":false,"types":[]},{"text":"impl Clone for FieldsNamed","synthetic":false,"types":[]},{"text":"impl Clone for FieldsUnnamed","synthetic":false,"types":[]},{"text":"impl Clone for File","synthetic":false,"types":[]},{"text":"impl Clone for FnArg","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItem","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemFn","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemStatic","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemType","synthetic":false,"types":[]},{"text":"impl Clone for GenericArgument","synthetic":false,"types":[]},{"text":"impl Clone for GenericMethodArgument","synthetic":false,"types":[]},{"text":"impl Clone for GenericParam","synthetic":false,"types":[]},{"text":"impl Clone for Generics","synthetic":false,"types":[]},{"text":"impl Clone for ImplItem","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemConst","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemMethod","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemType","synthetic":false,"types":[]},{"text":"impl Clone for Index","synthetic":false,"types":[]},{"text":"impl Clone for Item","synthetic":false,"types":[]},{"text":"impl Clone for ItemConst","synthetic":false,"types":[]},{"text":"impl Clone for ItemEnum","synthetic":false,"types":[]},{"text":"impl Clone for ItemExternCrate","synthetic":false,"types":[]},{"text":"impl Clone for ItemFn","synthetic":false,"types":[]},{"text":"impl Clone for ItemForeignMod","synthetic":false,"types":[]},{"text":"impl Clone for ItemImpl","synthetic":false,"types":[]},{"text":"impl Clone for ItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ItemMacro2","synthetic":false,"types":[]},{"text":"impl Clone for ItemMod","synthetic":false,"types":[]},{"text":"impl Clone for ItemStatic","synthetic":false,"types":[]},{"text":"impl Clone for ItemStruct","synthetic":false,"types":[]},{"text":"impl Clone for ItemTrait","synthetic":false,"types":[]},{"text":"impl Clone for ItemTraitAlias","synthetic":false,"types":[]},{"text":"impl Clone for ItemType","synthetic":false,"types":[]},{"text":"impl Clone for ItemUnion","synthetic":false,"types":[]},{"text":"impl Clone for ItemUse","synthetic":false,"types":[]},{"text":"impl Clone for Label","synthetic":false,"types":[]},{"text":"impl Clone for LifetimeDef","synthetic":false,"types":[]},{"text":"impl Clone for Lit","synthetic":false,"types":[]},{"text":"impl Clone for LitBool","synthetic":false,"types":[]},{"text":"impl Clone for Local","synthetic":false,"types":[]},{"text":"impl Clone for Macro","synthetic":false,"types":[]},{"text":"impl Clone for MacroDelimiter","synthetic":false,"types":[]},{"text":"impl Clone for Member","synthetic":false,"types":[]},{"text":"impl Clone for Meta","synthetic":false,"types":[]},{"text":"impl Clone for MetaList","synthetic":false,"types":[]},{"text":"impl Clone for MetaNameValue","synthetic":false,"types":[]},{"text":"impl Clone for MethodTurbofish","synthetic":false,"types":[]},{"text":"impl Clone for NestedMeta","synthetic":false,"types":[]},{"text":"impl Clone for ParenthesizedGenericArguments","synthetic":false,"types":[]},{"text":"impl Clone for Pat","synthetic":false,"types":[]},{"text":"impl Clone for PatBox","synthetic":false,"types":[]},{"text":"impl Clone for PatIdent","synthetic":false,"types":[]},{"text":"impl Clone for PatLit","synthetic":false,"types":[]},{"text":"impl Clone for PatMacro","synthetic":false,"types":[]},{"text":"impl Clone for PatOr","synthetic":false,"types":[]},{"text":"impl Clone for PatPath","synthetic":false,"types":[]},{"text":"impl Clone for PatRange","synthetic":false,"types":[]},{"text":"impl Clone for PatReference","synthetic":false,"types":[]},{"text":"impl Clone for PatRest","synthetic":false,"types":[]},{"text":"impl Clone for PatSlice","synthetic":false,"types":[]},{"text":"impl Clone for PatStruct","synthetic":false,"types":[]},{"text":"impl Clone for PatTuple","synthetic":false,"types":[]},{"text":"impl Clone for PatTupleStruct","synthetic":false,"types":[]},{"text":"impl Clone for PatType","synthetic":false,"types":[]},{"text":"impl Clone for PatWild","synthetic":false,"types":[]},{"text":"impl Clone for Path","synthetic":false,"types":[]},{"text":"impl Clone for PathArguments","synthetic":false,"types":[]},{"text":"impl Clone for PathSegment","synthetic":false,"types":[]},{"text":"impl Clone for PredicateEq","synthetic":false,"types":[]},{"text":"impl Clone for PredicateLifetime","synthetic":false,"types":[]},{"text":"impl Clone for PredicateType","synthetic":false,"types":[]},{"text":"impl Clone for QSelf","synthetic":false,"types":[]},{"text":"impl Clone for RangeLimits","synthetic":false,"types":[]},{"text":"impl Clone for Receiver","synthetic":false,"types":[]},{"text":"impl Clone for ReturnType","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for Stmt","synthetic":false,"types":[]},{"text":"impl Clone for TraitBound","synthetic":false,"types":[]},{"text":"impl Clone for TraitBoundModifier","synthetic":false,"types":[]},{"text":"impl Clone for TraitItem","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemConst","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemMethod","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemType","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for TypeArray","synthetic":false,"types":[]},{"text":"impl Clone for TypeBareFn","synthetic":false,"types":[]},{"text":"impl Clone for TypeGroup","synthetic":false,"types":[]},{"text":"impl Clone for TypeImplTrait","synthetic":false,"types":[]},{"text":"impl Clone for TypeInfer","synthetic":false,"types":[]},{"text":"impl Clone for TypeMacro","synthetic":false,"types":[]},{"text":"impl Clone for TypeNever","synthetic":false,"types":[]},{"text":"impl Clone for TypeParam","synthetic":false,"types":[]},{"text":"impl Clone for TypeParamBound","synthetic":false,"types":[]},{"text":"impl Clone for TypeParen","synthetic":false,"types":[]},{"text":"impl Clone for TypePath","synthetic":false,"types":[]},{"text":"impl Clone for TypePtr","synthetic":false,"types":[]},{"text":"impl Clone for TypeReference","synthetic":false,"types":[]},{"text":"impl Clone for TypeSlice","synthetic":false,"types":[]},{"text":"impl Clone for TypeTraitObject","synthetic":false,"types":[]},{"text":"impl Clone for TypeTuple","synthetic":false,"types":[]},{"text":"impl Clone for UnOp","synthetic":false,"types":[]},{"text":"impl Clone for UseGlob","synthetic":false,"types":[]},{"text":"impl Clone for UseGroup","synthetic":false,"types":[]},{"text":"impl Clone for UseName","synthetic":false,"types":[]},{"text":"impl Clone for UsePath","synthetic":false,"types":[]},{"text":"impl Clone for UseRename","synthetic":false,"types":[]},{"text":"impl Clone for UseTree","synthetic":false,"types":[]},{"text":"impl Clone for Variadic","synthetic":false,"types":[]},{"text":"impl Clone for Variant","synthetic":false,"types":[]},{"text":"impl Clone for VisCrate","synthetic":false,"types":[]},{"text":"impl Clone for VisPublic","synthetic":false,"types":[]},{"text":"impl Clone for VisRestricted","synthetic":false,"types":[]},{"text":"impl Clone for Visibility","synthetic":false,"types":[]},{"text":"impl Clone for WhereClause","synthetic":false,"types":[]},{"text":"impl Clone for WherePredicate","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Clone for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["synstructure"] = [{"text":"impl Clone for AddBounds","synthetic":false,"types":[]},{"text":"impl Clone for BindStyle","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for BindingInfo&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for VariantAst&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for VariantInfo&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Structure&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["target_lexicon"] = [{"text":"impl Clone for ParseError","synthetic":false,"types":[]},{"text":"impl Clone for Architecture","synthetic":false,"types":[]},{"text":"impl Clone for ArmArchitecture","synthetic":false,"types":[]},{"text":"impl Clone for Aarch64Architecture","synthetic":false,"types":[]},{"text":"impl Clone for CustomVendor","synthetic":false,"types":[]},{"text":"impl Clone for Vendor","synthetic":false,"types":[]},{"text":"impl Clone for OperatingSystem","synthetic":false,"types":[]},{"text":"impl Clone for Environment","synthetic":false,"types":[]},{"text":"impl Clone for BinaryFormat","synthetic":false,"types":[]},{"text":"impl Clone for Endianness","synthetic":false,"types":[]},{"text":"impl Clone for PointerWidth","synthetic":false,"types":[]},{"text":"impl Clone for CallingConvention","synthetic":false,"types":[]},{"text":"impl Clone for Triple","synthetic":false,"types":[]}];
implementors["tempfile"] = [{"text":"impl&lt;'a, 'b&gt; Clone for Builder&lt;'a, 'b&gt;","synthetic":false,"types":[]}];
implementors["termcolor"] = [{"text":"impl Clone for ColorChoice","synthetic":false,"types":[]},{"text":"impl Clone for ColorSpec","synthetic":false,"types":[]},{"text":"impl Clone for Color","synthetic":false,"types":[]},{"text":"impl Clone for ParseColorError","synthetic":false,"types":[]}];
implementors["textwrap"] = [{"text":"impl Clone for NoHyphenation","synthetic":false,"types":[]},{"text":"impl Clone for HyphenSplitter","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;Clone + WordSplitter&gt; Clone for Wrapper&lt;'a, S&gt;","synthetic":false,"types":[]}];
implementors["threadpool"] = [{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for ThreadPool","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Clone for Duration","synthetic":false,"types":[]},{"text":"impl Clone for OutOfRangeError","synthetic":false,"types":[]},{"text":"impl Clone for Timespec","synthetic":false,"types":[]},{"text":"impl Clone for PreciseTime","synthetic":false,"types":[]},{"text":"impl Clone for SteadyTime","synthetic":false,"types":[]},{"text":"impl Clone for Tm","synthetic":false,"types":[]},{"text":"impl Clone for ParseError","synthetic":false,"types":[]}];
implementors["tiny_keccak"] = [{"text":"impl Clone for Keccak","synthetic":false,"types":[]},{"text":"impl Clone for Sha3","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Clone + Array&gt; Clone for ArrayVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + Array&gt; Clone for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for Handle","synthetic":false,"types":[]},{"text":"impl Clone for TaskExecutor","synthetic":false,"types":[]}];
implementors["tokio_buf"] = [{"text":"impl Clone for SizeHint","synthetic":false,"types":[]}];
implementors["tokio_codec"] = [{"text":"impl Clone for BytesCodec","synthetic":false,"types":[]},{"text":"impl Clone for LinesCodec","synthetic":false,"types":[]}];
implementors["tokio_current_thread"] = [{"text":"impl Clone for TaskExecutor","synthetic":false,"types":[]},{"text":"impl Clone for Handle","synthetic":false,"types":[]}];
implementors["tokio_executor"] = [{"text":"impl Clone for DefaultExecutor","synthetic":false,"types":[]},{"text":"impl Clone for UnparkThread","synthetic":false,"types":[]}];
implementors["tokio_fs"] = [{"text":"impl Clone for OpenOptions","synthetic":false,"types":[]}];
implementors["tokio_io"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for AllowStdIo&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tokio_reactor"] = [{"text":"impl Clone for Handle","synthetic":false,"types":[]},{"text":"impl Clone for SetFallbackError","synthetic":false,"types":[]}];
implementors["tokio_rustls"] = [{"text":"impl Clone for TlsConnector","synthetic":false,"types":[]},{"text":"impl Clone for TlsAcceptor","synthetic":false,"types":[]}];
implementors["tokio_sync"] = [{"text":"impl Clone for BarrierWaitResult","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for UnboundedSender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tokio_threadpool"] = [{"text":"impl Clone for Sender","synthetic":false,"types":[]},{"text":"impl Clone for WorkerId","synthetic":false,"types":[]}];
implementors["tokio_timer"] = [{"text":"impl Clone for Clock","synthetic":false,"types":[]},{"text":"impl Clone for Key","synthetic":false,"types":[]},{"text":"impl Clone for Handle","synthetic":false,"types":[]}];
implementors["tokio_uds"] = [{"text":"impl Clone for UCred","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Clone for BytesCodec","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for LinesCodec","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl Clone for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["tracing"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for WithDispatch&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Instrumented&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]}];
implementors["tracing_core"] = [{"text":"impl Clone for Identifier","synthetic":false,"types":[]},{"text":"impl Clone for Dispatch","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Display&gt; Clone for DisplayValue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Debug&gt; Clone for DebugValue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Field","synthetic":false,"types":[]},{"text":"impl Clone for Kind","synthetic":false,"types":[]},{"text":"impl Clone for Level","synthetic":false,"types":[]},{"text":"impl Clone for LevelFilter","synthetic":false,"types":[]},{"text":"impl Clone for ParseLevelFilterError","synthetic":false,"types":[]},{"text":"impl Clone for Id","synthetic":false,"types":[]},{"text":"impl Clone for Interest","synthetic":false,"types":[]}];
implementors["tracing_futures"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Instrumented&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tracing_subscriber"] = [{"text":"impl&lt;V:&nbsp;Clone&gt; Clone for Alt&lt;V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone, V:&nbsp;Clone&gt; Clone for Delimited&lt;D, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Clone&gt; Clone for Messages&lt;V&gt;","synthetic":false,"types":[]},{"text":"impl Clone for BadName","synthetic":false,"types":[]},{"text":"impl Clone for Json","synthetic":false,"types":[]},{"text":"impl Clone for Pretty","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone&gt; Clone for FieldFn&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Compact","synthetic":false,"types":[]},{"text":"impl Clone for Full","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for Format&lt;F, T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for FmtSpan","synthetic":false,"types":[]},{"text":"impl Clone for SystemTime","synthetic":false,"types":[]},{"text":"impl Clone for Uptime","synthetic":false,"types":[]},{"text":"impl Clone for ChronoUtc","synthetic":false,"types":[]},{"text":"impl Clone for ChronoLocal","synthetic":false,"types":[]},{"text":"impl&lt;L:&nbsp;Clone, I:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for Layered&lt;L, I, S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Identity","synthetic":false,"types":[]},{"text":"impl&lt;'a, S&gt; Clone for Context&lt;'a, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;L, S&gt; Clone for Handle&lt;L, S&gt;","synthetic":false,"types":[]}];
implementors["trie_db"] = [{"text":"impl&lt;'a&gt; Clone for NodeHandle&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Node&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for NodeHandlePlan","synthetic":false,"types":[]},{"text":"impl Clone for NibbleSlicePlan","synthetic":false,"types":[]},{"text":"impl Clone for NodePlan","synthetic":false,"types":[]},{"text":"impl&lt;HO:&nbsp;Clone&gt; Clone for ChildReference&lt;HO&gt;","synthetic":false,"types":[]},{"text":"impl&lt;HO:&nbsp;Clone&gt; Clone for Record&lt;HO&gt;","synthetic":false,"types":[]},{"text":"impl Clone for NibbleVec","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for NibbleSlice&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for TrieError&lt;T, E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TrieSpec","synthetic":false,"types":[]},{"text":"impl&lt;L:&nbsp;Clone + TrieLayout&gt; Clone for TrieFactory&lt;L&gt;","synthetic":false,"types":[]}];
implementors["twox_hash"] = [{"text":"impl Clone for XxHash64","synthetic":false,"types":[]},{"text":"impl Clone for XxHash32","synthetic":false,"types":[]},{"text":"impl Clone for Hash64","synthetic":false,"types":[]},{"text":"impl Clone for Hash128","synthetic":false,"types":[]},{"text":"impl Clone for RandomXxHashBuilder64","synthetic":false,"types":[]},{"text":"impl Clone for RandomXxHashBuilder32","synthetic":false,"types":[]},{"text":"impl Clone for RandomHashBuilder64","synthetic":false,"types":[]},{"text":"impl Clone for RandomHashBuilder128","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl Clone for B0","synthetic":false,"types":[]},{"text":"impl Clone for B1","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Clone + Unsigned + NonZero&gt; Clone for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Clone + Unsigned + NonZero&gt; Clone for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Z0","synthetic":false,"types":[]},{"text":"impl Clone for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Clone, A:&nbsp;Clone&gt; Clone for TArr&lt;V, A&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Greater","synthetic":false,"types":[]},{"text":"impl Clone for Less","synthetic":false,"types":[]},{"text":"impl Clone for Equal","synthetic":false,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for UniCase&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Ascii&lt;S&gt;","synthetic":false,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Clone for Level","synthetic":false,"types":[]},{"text":"impl Clone for BidiClass","synthetic":false,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Decompositions&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Recompositions&lt;I&gt;","synthetic":false,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Clone for GraphemeIndices&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Graphemes&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for GraphemeCursor","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for UWordBounds&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for UWordBoundIndices&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for UnicodeSentences&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for USentenceBounds&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for USentenceBoundIndices&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["universal_hash"] = [{"text":"impl&lt;U:&nbsp;Clone + UniversalHash&gt; Clone for Output&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U::BlockSize: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["unsigned_varint"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["untrusted"] = [{"text":"impl&lt;'a&gt; Clone for Input&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for EndOfInput","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Host&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for HostAndPort&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Origin","synthetic":false,"types":[]},{"text":"impl Clone for OpaqueOrigin","synthetic":false,"types":[]},{"text":"impl Clone for ParseError","synthetic":false,"types":[]},{"text":"impl Clone for SyntaxViolation","synthetic":false,"types":[]},{"text":"impl Clone for Position","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Parse&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Url","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ParseOptions&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["vec_arena"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Arena&lt;T&gt;","synthetic":false,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V:&nbsp;Clone&gt; Clone for VecMap&lt;V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V&gt; Clone for Iter&lt;'a, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V&gt; Clone for Keys&lt;'a, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V&gt; Clone for Values&lt;'a, V&gt;","synthetic":false,"types":[]}];
implementors["void"] = [{"text":"impl Clone for Void","synthetic":false,"types":[]}];
implementors["want"] = [{"text":"impl Clone for SharedGiver","synthetic":false,"types":[]}];
implementors["wasm_bindgen"] = [{"text":"impl Clone for JsValue","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Clamped&lt;T&gt;","synthetic":false,"types":[]}];
implementors["wasm_bindgen_backend"] = [{"text":"impl Clone for Program","synthetic":false,"types":[]},{"text":"impl Clone for Export","synthetic":false,"types":[]},{"text":"impl Clone for MethodSelf","synthetic":false,"types":[]},{"text":"impl Clone for Import","synthetic":false,"types":[]},{"text":"impl Clone for ImportModule","synthetic":false,"types":[]},{"text":"impl Clone for ImportKind","synthetic":false,"types":[]},{"text":"impl Clone for ImportFunction","synthetic":false,"types":[]},{"text":"impl Clone for ImportFunctionKind","synthetic":false,"types":[]},{"text":"impl Clone for MethodKind","synthetic":false,"types":[]},{"text":"impl Clone for Operation","synthetic":false,"types":[]},{"text":"impl Clone for OperationKind","synthetic":false,"types":[]},{"text":"impl Clone for ImportStatic","synthetic":false,"types":[]},{"text":"impl Clone for ImportType","synthetic":false,"types":[]},{"text":"impl Clone for ImportEnum","synthetic":false,"types":[]},{"text":"impl Clone for Function","synthetic":false,"types":[]},{"text":"impl Clone for Struct","synthetic":false,"types":[]},{"text":"impl Clone for StructField","synthetic":false,"types":[]},{"text":"impl Clone for Enum","synthetic":false,"types":[]},{"text":"impl Clone for Variant","synthetic":false,"types":[]},{"text":"impl Clone for TypeKind","synthetic":false,"types":[]},{"text":"impl Clone for TypeLocation","synthetic":false,"types":[]}];
implementors["wasm_timer"] = [{"text":"impl Clone for TimerHandle","synthetic":false,"types":[]},{"text":"impl Clone for SetDefaultError","synthetic":false,"types":[]}];
implementors["wasmi"] = [{"text":"impl Clone for FuncRef","synthetic":false,"types":[]},{"text":"impl Clone for GlobalRef","synthetic":false,"types":[]},{"text":"impl Clone for MemoryRef","synthetic":false,"types":[]},{"text":"impl Clone for ModuleRef","synthetic":false,"types":[]},{"text":"impl Clone for ExternVal","synthetic":false,"types":[]},{"text":"impl Clone for F32","synthetic":false,"types":[]},{"text":"impl Clone for F64","synthetic":false,"types":[]},{"text":"impl Clone for TableRef","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for ValueType","synthetic":false,"types":[]},{"text":"impl Clone for RuntimeValue","synthetic":false,"types":[]}];
implementors["wasmi_validation"] = [{"text":"impl Clone for BlockFrame","synthetic":false,"types":[]},{"text":"impl Clone for StartedWith","synthetic":false,"types":[]},{"text":"impl Clone for StackValueType","synthetic":false,"types":[]}];
implementors["wasmparser"] = [{"text":"impl Clone for Range","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for BinaryReader&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for OperatorValidatorConfig","synthetic":false,"types":[]},{"text":"impl Clone for ElemSectionEntryTable","synthetic":false,"types":[]},{"text":"impl Clone for ParserInput","synthetic":false,"types":[]},{"text":"impl Clone for BinaryReaderError","synthetic":false,"types":[]},{"text":"impl Clone for CustomSectionKind","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SectionCode&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for TypeOrFuncType","synthetic":false,"types":[]},{"text":"impl Clone for ExternalKind","synthetic":false,"types":[]},{"text":"impl Clone for FuncType","synthetic":false,"types":[]},{"text":"impl Clone for ResizableLimits","synthetic":false,"types":[]},{"text":"impl Clone for TableType","synthetic":false,"types":[]},{"text":"impl Clone for MemoryType","synthetic":false,"types":[]},{"text":"impl Clone for GlobalType","synthetic":false,"types":[]},{"text":"impl Clone for ImportSectionEntryType","synthetic":false,"types":[]},{"text":"impl Clone for MemoryImmediate","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Naming&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for NameType","synthetic":false,"types":[]},{"text":"impl Clone for LinkingType","synthetic":false,"types":[]},{"text":"impl Clone for RelocType","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for BrTable&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Ieee32","synthetic":false,"types":[]},{"text":"impl Clone for Ieee64","synthetic":false,"types":[]},{"text":"impl Clone for V128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Operator&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Data&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for DataKind&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Element&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ElementKind&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ElementItems&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Export&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Global&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Import&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for InitExpr&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Name&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for OperatorsReader&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ProducersFieldValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ProducersField&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Reloc","synthetic":false,"types":[]},{"text":"impl Clone for ValidatingParserConfig","synthetic":false,"types":[]}];
implementors["wasmtime"] = [{"text":"impl Clone for Extern","synthetic":false,"types":[]},{"text":"impl Clone for Global","synthetic":false,"types":[]},{"text":"impl Clone for Table","synthetic":false,"types":[]},{"text":"impl Clone for Memory","synthetic":false,"types":[]},{"text":"impl&lt;'instance&gt; Clone for Export&lt;'instance&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Func","synthetic":false,"types":[]},{"text":"impl Clone for Instance","synthetic":false,"types":[]},{"text":"impl Clone for Module","synthetic":false,"types":[]},{"text":"impl Clone for ExternRef","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for Strategy","synthetic":false,"types":[]},{"text":"impl Clone for OptLevel","synthetic":false,"types":[]},{"text":"impl Clone for ProfilingStrategy","synthetic":false,"types":[]},{"text":"impl Clone for Engine","synthetic":false,"types":[]},{"text":"impl Clone for Store","synthetic":false,"types":[]},{"text":"impl Clone for Trap","synthetic":false,"types":[]},{"text":"impl Clone for Mutability","synthetic":false,"types":[]},{"text":"impl Clone for Limits","synthetic":false,"types":[]},{"text":"impl Clone for ValType","synthetic":false,"types":[]},{"text":"impl Clone for ExternType","synthetic":false,"types":[]},{"text":"impl Clone for FuncType","synthetic":false,"types":[]},{"text":"impl Clone for GlobalType","synthetic":false,"types":[]},{"text":"impl Clone for TableType","synthetic":false,"types":[]},{"text":"impl Clone for MemoryType","synthetic":false,"types":[]},{"text":"impl&lt;'module&gt; Clone for ImportType&lt;'module&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'module&gt; Clone for ExportType&lt;'module&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Val","synthetic":false,"types":[]}];
implementors["wasmtime_debug"] = [{"text":"impl Clone for DwarfSectionRelocTarget","synthetic":false,"types":[]}];
implementors["wasmtime_environ"] = [{"text":"impl Clone for InstructionAddressMap","synthetic":false,"types":[]},{"text":"impl Clone for FunctionAddressMap","synthetic":false,"types":[]},{"text":"impl Clone for ModuleMemoryOffset","synthetic":false,"types":[]},{"text":"impl Clone for ModuleVmctxInfo","synthetic":false,"types":[]},{"text":"impl Clone for CompiledFunction","synthetic":false,"types":[]},{"text":"impl Clone for Relocation","synthetic":false,"types":[]},{"text":"impl Clone for RelocationTarget","synthetic":false,"types":[]},{"text":"impl Clone for TrapInformation","synthetic":false,"types":[]},{"text":"impl Clone for StackMapInformation","synthetic":false,"types":[]},{"text":"impl Clone for BuiltinFunctionIndex","synthetic":false,"types":[]},{"text":"impl Clone for TableElements","synthetic":false,"types":[]},{"text":"impl Clone for EntityIndex","synthetic":false,"types":[]},{"text":"impl Clone for MemoryStyle","synthetic":false,"types":[]},{"text":"impl Clone for MemoryPlan","synthetic":false,"types":[]},{"text":"impl Clone for TableStyle","synthetic":false,"types":[]},{"text":"impl Clone for TablePlan","synthetic":false,"types":[]},{"text":"impl Clone for DataInitializerLocation","synthetic":false,"types":[]},{"text":"impl Clone for Tunables","synthetic":false,"types":[]},{"text":"impl Clone for TargetSharedSignatureIndex","synthetic":false,"types":[]},{"text":"impl Clone for CacheConfig","synthetic":false,"types":[]}];
implementors["wasmtime_jit"] = [{"text":"impl Clone for CompilationStrategy","synthetic":false,"types":[]}];
implementors["wasmtime_profiling"] = [{"text":"impl Clone for NullProfilerAgent","synthetic":false,"types":[]}];
implementors["wasmtime_runtime"] = [{"text":"impl Clone for Export","synthetic":false,"types":[]},{"text":"impl Clone for ExportFunction","synthetic":false,"types":[]},{"text":"impl Clone for ExportTable","synthetic":false,"types":[]},{"text":"impl Clone for ExportMemory","synthetic":false,"types":[]},{"text":"impl Clone for ExportGlobal","synthetic":false,"types":[]},{"text":"impl Clone for VMExternRef","synthetic":false,"types":[]},{"text":"impl Clone for Imports","synthetic":false,"types":[]},{"text":"impl Clone for TableElement","synthetic":false,"types":[]},{"text":"impl Clone for VMFunctionImport","synthetic":false,"types":[]},{"text":"impl Clone for VMTableImport","synthetic":false,"types":[]},{"text":"impl Clone for VMMemoryImport","synthetic":false,"types":[]},{"text":"impl Clone for VMGlobalImport","synthetic":false,"types":[]},{"text":"impl Clone for VMMemoryDefinition","synthetic":false,"types":[]},{"text":"impl Clone for VMTableDefinition","synthetic":false,"types":[]},{"text":"impl Clone for VMGlobalDefinition","synthetic":false,"types":[]},{"text":"impl Clone for VMSharedSignatureIndex","synthetic":false,"types":[]},{"text":"impl Clone for VMCallerCheckedAnyfunc","synthetic":false,"types":[]},{"text":"impl Clone for VMInvokeArgument","synthetic":false,"types":[]}];
implementors["wast"] = [{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Id&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Index&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for NameAnnotation&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CustomPlace","synthetic":false,"types":[]},{"text":"impl Clone for CustomPlaceAnchor","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for EventType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ExportKind&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Import&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ItemSig&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ItemKind&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for InlineImport&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ElemPayload&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ValType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for HeapType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for RefType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for StorageType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for GlobalType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Limits","synthetic":false,"types":[]},{"text":"impl Clone for Limits64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for TableType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for MemoryType","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for FunctionType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for FunctionTypeNoNames&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for StructType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for StructField&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ArrayType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ModuleType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for InstanceType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ExportType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for TypeUse&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Lexer&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for LexError","synthetic":false,"types":[]},{"text":"impl Clone for SignToken","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Parser&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Cursor&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["webpki"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for DNSName","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for DNSNameRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for InvalidDNSNameError","synthetic":false,"types":[]},{"text":"impl Clone for Time","synthetic":false,"types":[]}];
implementors["x25519_dalek"] = [{"text":"impl Clone for PublicKey","synthetic":false,"types":[]},{"text":"impl Clone for StaticSecret","synthetic":false,"types":[]}];
implementors["yamux"] = [{"text":"impl Clone for StreamId","synthetic":false,"types":[]},{"text":"impl Clone for Control","synthetic":false,"types":[]},{"text":"impl Clone for Packet","synthetic":false,"types":[]},{"text":"impl Clone for Mode","synthetic":false,"types":[]},{"text":"impl Clone for WindowUpdateMode","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]}];
implementors["zeroize"] = [{"text":"impl&lt;Z:&nbsp;Clone + Zeroize&gt; Clone for Zeroizing&lt;Z&gt;","synthetic":false,"types":[]}];
implementors["zstd_safe"] = [{"text":"impl Clone for FrameFormat","synthetic":false,"types":[]},{"text":"impl Clone for CParameter","synthetic":false,"types":[]}];
implementors["zstd_sys"] = [{"text":"impl Clone for ZSTD_CCtx_s","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_DCtx_s","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_strategy","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_cParameter","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_bounds","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_ResetDirective","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_dParameter","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_inBuffer_s","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_outBuffer_s","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_EndDirective","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_CDict_s","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_DDict_s","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_CCtx_params_s","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_Sequence","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_compressionParameters","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_frameParameters","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_parameters","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_dictContentType_e","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_dictLoadMethod_e","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_format_e","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_dictAttachPref_e","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_literalCompressionMode_e","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_customMem","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_frameProgression","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_frameType_e","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_frameHeader","synthetic":false,"types":[]},{"text":"impl Clone for ZSTD_nextInputType_e","synthetic":false,"types":[]},{"text":"impl Clone for ZDICT_params_t","synthetic":false,"types":[]},{"text":"impl Clone for ZSTDMT_CCtx_s","synthetic":false,"types":[]},{"text":"impl Clone for ZSTDMT_parameter","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()