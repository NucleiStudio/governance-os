(function() {var implementors = {};
implementors["bitvec"] = [{"text":"impl&lt;O, T&gt; Octal for BitSlice&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Octal for BitBox&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Octal for BitVec&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["env_logger"] = [{"text":"impl&lt;'a, T:&nbsp;Octal&gt; Octal for StyledValue&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;'a, I&gt; Octal for Format&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Octal,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Octal for AtFlags","synthetic":false,"types":[]},{"text":"impl Octal for OFlag","synthetic":false,"types":[]},{"text":"impl Octal for SealFlag","synthetic":false,"types":[]},{"text":"impl Octal for FdFlag","synthetic":false,"types":[]},{"text":"impl Octal for SpliceFFlags","synthetic":false,"types":[]},{"text":"impl Octal for FallocateFlags","synthetic":false,"types":[]},{"text":"impl Octal for ModuleInitFlags","synthetic":false,"types":[]},{"text":"impl Octal for DeleteModuleFlags","synthetic":false,"types":[]},{"text":"impl Octal for MsFlags","synthetic":false,"types":[]},{"text":"impl Octal for MntFlags","synthetic":false,"types":[]},{"text":"impl Octal for MQ_OFlag","synthetic":false,"types":[]},{"text":"impl Octal for FdFlag","synthetic":false,"types":[]},{"text":"impl Octal for InterfaceFlags","synthetic":false,"types":[]},{"text":"impl Octal for PollFlags","synthetic":false,"types":[]},{"text":"impl Octal for CloneFlags","synthetic":false,"types":[]},{"text":"impl Octal for EpollFlags","synthetic":false,"types":[]},{"text":"impl Octal for EpollCreateFlags","synthetic":false,"types":[]},{"text":"impl Octal for EfdFlags","synthetic":false,"types":[]},{"text":"impl Octal for MemFdCreateFlag","synthetic":false,"types":[]},{"text":"impl Octal for ProtFlags","synthetic":false,"types":[]},{"text":"impl Octal for MapFlags","synthetic":false,"types":[]},{"text":"impl Octal for MsFlags","synthetic":false,"types":[]},{"text":"impl Octal for MlockAllFlags","synthetic":false,"types":[]},{"text":"impl Octal for Options","synthetic":false,"types":[]},{"text":"impl Octal for QuotaValidFlags","synthetic":false,"types":[]},{"text":"impl Octal for SaFlags","synthetic":false,"types":[]},{"text":"impl Octal for SfdFlags","synthetic":false,"types":[]},{"text":"impl Octal for SockFlag","synthetic":false,"types":[]},{"text":"impl Octal for MsgFlags","synthetic":false,"types":[]},{"text":"impl Octal for SFlag","synthetic":false,"types":[]},{"text":"impl Octal for Mode","synthetic":false,"types":[]},{"text":"impl Octal for FsFlags","synthetic":false,"types":[]},{"text":"impl Octal for InputFlags","synthetic":false,"types":[]},{"text":"impl Octal for OutputFlags","synthetic":false,"types":[]},{"text":"impl Octal for ControlFlags","synthetic":false,"types":[]},{"text":"impl Octal for LocalFlags","synthetic":false,"types":[]},{"text":"impl Octal for WaitPidFlag","synthetic":false,"types":[]},{"text":"impl Octal for AddWatchFlags","synthetic":false,"types":[]},{"text":"impl Octal for InitFlags","synthetic":false,"types":[]},{"text":"impl Octal for AccessFlags","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Octal for BigInt","synthetic":false,"types":[]},{"text":"impl Octal for BigUint","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Octal for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Octal + Num + PartialOrd + Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["region"] = [{"text":"impl Octal for Protection","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Octal for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Octal,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'s, T&gt; Octal for SliceVec&lt;'s, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Octal,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Octal for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Octal,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()