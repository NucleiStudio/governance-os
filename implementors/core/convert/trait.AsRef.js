(function() {var implementors = {};
implementors["anyhow"] = [{"text":"impl AsRef&lt;dyn Error + 'static + Sync + Send&gt; for Error","synthetic":false,"types":[]},{"text":"impl AsRef&lt;dyn Error + 'static&gt; for Error","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A:&nbsp;Array&lt;Item = u8&gt;&gt; AsRef&lt;str&gt; for ArrayString&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; AsRef&lt;[&lt;A as Array&gt;::Item]&gt; for ArrayVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["async_std"] = [{"text":"impl&lt;'_&gt; AsRef&lt;Path&gt; for Components&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; AsRef&lt;OsStr&gt; for Components&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; AsRef&lt;Path&gt; for Component&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; AsRef&lt;Path&gt; for Iter&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; AsRef&lt;OsStr&gt; for Iter&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;OsStr&gt; for Path","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for Path","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for OsStr","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; AsRef&lt;Path&gt; for Cow&lt;'_, OsStr&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for OsString","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for str","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for String","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for PathBuf","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for Path","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for Path","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for PathBuf","synthetic":false,"types":[]},{"text":"impl AsRef&lt;OsStr&gt; for PathBuf","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for PathBuf","synthetic":false,"types":[]}];
implementors["bip39"] = [{"text":"impl AsRef&lt;str&gt; for Mnemonic","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Seed","synthetic":false,"types":[]}];
implementors["bitvec"] = [{"text":"impl&lt;O, T, '_&gt; AsRef&lt;BitSlice&lt;O, T&gt;&gt; for Iter&lt;'_, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T, '_&gt; AsRef&lt;[T]&gt; for Iter&lt;'_, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; AsRef&lt;[T]&gt; for BitSlice&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; AsRef&lt;BitSlice&lt;O, T&gt;&gt; for BitBox&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; AsRef&lt;[T]&gt; for BitBox&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; AsRef&lt;BitSlice&lt;O, T&gt;&gt; for BitVec&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; AsRef&lt;[T]&gt; for BitVec&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["blake2_rfc"] = [{"text":"impl AsRef&lt;[u8]&gt; for Blake2bResult","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Blake2sResult","synthetic":false,"types":[]}];
implementors["blake2b_simd"] = [{"text":"impl AsRef&lt;[u8]&gt; for Hash","synthetic":false,"types":[]}];
implementors["blake2s_simd"] = [{"text":"impl AsRef&lt;[u8]&gt; for Hash","synthetic":false,"types":[]}];
implementors["bstr"] = [{"text":"impl AsRef&lt;[u8]&gt; for BString","synthetic":false,"types":[]},{"text":"impl AsRef&lt;BStr&gt; for BString","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for BStr","synthetic":false,"types":[]},{"text":"impl AsRef&lt;BStr&gt; for [u8]","synthetic":false,"types":[]},{"text":"impl AsRef&lt;BStr&gt; for str","synthetic":false,"types":[]}];
implementors["bytes"] = [{"text":"impl AsRef&lt;[u8]&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for BytesMut","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T&gt; AsRef&lt;T&gt; for Owned&lt;T&gt;","synthetic":false,"types":[]}];
implementors["ed25519"] = [{"text":"impl AsRef&lt;[u8]&gt; for Signature","synthetic":false,"types":[]}];
implementors["ed25519_dalek"] = [{"text":"impl AsRef&lt;[u8]&gt; for PublicKey","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for SecretKey","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R, Target&gt; AsRef&lt;Target&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;Target&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;Target&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;L, R&gt; AsRef&lt;str&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;str&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;str&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;L, R&gt; AsRef&lt;Path&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;Path&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;Path&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;L, R&gt; AsRef&lt;OsStr&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;OsStr&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;OsStr&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;L, R&gt; AsRef&lt;CStr&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;CStr&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;CStr&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;L, R, Target&gt; AsRef&lt;[Target]&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;[Target]&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;[Target]&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["failure"] = [{"text":"impl AsRef&lt;dyn Fail + 'static&gt; for Error","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;T:&nbsp;AsRef&lt;[u8]&gt;&gt; AsRef&lt;[u8]&gt; for Window&lt;T&gt;","synthetic":false,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, N&gt; AsRef&lt;[T]&gt; for GenericArray&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl AsRef&lt;str&gt; for HeaderName","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for HeaderName","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for HeaderValue","synthetic":false,"types":[]},{"text":"impl AsRef&lt;str&gt; for Method","synthetic":false,"types":[]},{"text":"impl AsRef&lt;str&gt; for Authority","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; AsRef&lt;str&gt; for Port&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsRef&lt;str&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl AsRef&lt;str&gt; for Scheme","synthetic":false,"types":[]}];
implementors["humantime"] = [{"text":"impl AsRef&lt;Duration&gt; for Duration","synthetic":false,"types":[]},{"text":"impl AsRef&lt;SystemTime&gt; for Timestamp","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl AsRef&lt;[u8]&gt; for Chunk","synthetic":false,"types":[]}];
implementors["js_sys"] = [{"text":"impl AsRef&lt;JsValue&gt; for Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Array&gt; for Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for ArrayBuffer","synthetic":false,"types":[]},{"text":"impl AsRef&lt;ArrayBuffer&gt; for ArrayBuffer","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for ArrayBuffer","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for SharedArrayBuffer","synthetic":false,"types":[]},{"text":"impl AsRef&lt;SharedArrayBuffer&gt; for SharedArrayBuffer","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for SharedArrayBuffer","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Boolean","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Boolean&gt; for Boolean","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Boolean","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for DataView","synthetic":false,"types":[]},{"text":"impl AsRef&lt;DataView&gt; for DataView","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for DataView","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Error","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Error","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for EvalError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;EvalError&gt; for EvalError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for EvalError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Error&gt; for EvalError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Function","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Function&gt; for Function","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Function","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Generator","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Generator&gt; for Generator","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Generator","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Map","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Map&gt; for Map","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Map","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Iterator","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Iterator&gt; for Iterator","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for AsyncIterator","synthetic":false,"types":[]},{"text":"impl AsRef&lt;AsyncIterator&gt; for AsyncIterator","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for IteratorNext","synthetic":false,"types":[]},{"text":"impl AsRef&lt;IteratorNext&gt; for IteratorNext","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for IteratorNext","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Number","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Number&gt; for Number","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Number","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Date","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Date&gt; for Date","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Date","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Object","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Object","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Proxy","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Proxy&gt; for Proxy","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for RangeError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;RangeError&gt; for RangeError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Error&gt; for RangeError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for RangeError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for ReferenceError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;ReferenceError&gt; for ReferenceError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Error&gt; for ReferenceError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for ReferenceError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for RegExp","synthetic":false,"types":[]},{"text":"impl AsRef&lt;RegExp&gt; for RegExp","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for RegExp","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Set","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Set&gt; for Set","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Set","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for SyntaxError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;SyntaxError&gt; for SyntaxError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Error&gt; for SyntaxError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for SyntaxError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for TypeError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;TypeError&gt; for TypeError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Error&gt; for TypeError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for TypeError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for UriError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;UriError&gt; for UriError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Error&gt; for UriError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for UriError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for WeakMap","synthetic":false,"types":[]},{"text":"impl AsRef&lt;WeakMap&gt; for WeakMap","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for WeakMap","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for WeakSet","synthetic":false,"types":[]},{"text":"impl AsRef&lt;WeakSet&gt; for WeakSet","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for WeakSet","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for CompileError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;CompileError&gt; for CompileError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Error&gt; for CompileError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Instance","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Instance&gt; for Instance","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Instance","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for LinkError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;LinkError&gt; for LinkError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Error&gt; for LinkError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for RuntimeError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;RuntimeError&gt; for RuntimeError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Error&gt; for RuntimeError","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Module","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Module&gt; for Module","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Module","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Table","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Table&gt; for Table","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Table","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Memory","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Memory&gt; for Memory","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Memory","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for JsString","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsString&gt; for JsString","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for JsString","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Symbol","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Symbol&gt; for Symbol","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Collator","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Collator&gt; for Collator","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Collator","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for DateTimeFormat","synthetic":false,"types":[]},{"text":"impl AsRef&lt;DateTimeFormat&gt; for DateTimeFormat","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for DateTimeFormat","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for NumberFormat","synthetic":false,"types":[]},{"text":"impl AsRef&lt;NumberFormat&gt; for NumberFormat","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for NumberFormat","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for PluralRules","synthetic":false,"types":[]},{"text":"impl AsRef&lt;PluralRules&gt; for PluralRules","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for PluralRules","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Promise","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Promise&gt; for Promise","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Promise","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Int8Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Int8Array&gt; for Int8Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Int8Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Int16Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Int16Array&gt; for Int16Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Int16Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Int32Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Int32Array&gt; for Int32Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Int32Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Uint8Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Uint8Array&gt; for Uint8Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Uint8Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Uint8ClampedArray","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Uint8ClampedArray&gt; for Uint8ClampedArray","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Uint8ClampedArray","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Uint16Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Uint16Array&gt; for Uint16Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Uint16Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Uint32Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Uint32Array&gt; for Uint32Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Uint32Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Float32Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Float32Array&gt; for Float32Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Float32Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Float64Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Float64Array&gt; for Float64Array","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Object&gt; for Float64Array","synthetic":false,"types":[]}];
implementors["libp2p_core"] = [{"text":"impl AsRef&lt;[u8]&gt; for PeerId","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for SecretKey","synthetic":false,"types":[]}];
implementors["libp2p_kad"] = [{"text":"impl&lt;TKey:&nbsp;AsRef&lt;KeyBytes&gt;, TVal&gt; AsRef&lt;KeyBytes&gt; for EntryView&lt;TKey, TVal&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; AsRef&lt;KeyBytes&gt; for Key&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;KeyBytes&gt; for KeyBytes","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Key","synthetic":false,"types":[]}];
implementors["libp2p_noise"] = [{"text":"impl AsRef&lt;[u8]&gt; for X25519","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for X25519Spec","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;AsRef&lt;[u8]&gt; + Zeroize&gt; AsRef&lt;[u8]&gt; for SecretKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;AsRef&lt;[u8]&gt;&gt; AsRef&lt;[u8]&gt; for PublicKey&lt;T&gt;","synthetic":false,"types":[]}];
implementors["libp2p_wasm_ext"] = [{"text":"impl AsRef&lt;JsValue&gt; for Transport","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Transport&gt; for Transport","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for Connection","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Connection&gt; for Connection","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for ListenEvent","synthetic":false,"types":[]},{"text":"impl AsRef&lt;ListenEvent&gt; for ListenEvent","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for ConnectionEvent","synthetic":false,"types":[]},{"text":"impl AsRef&lt;ConnectionEvent&gt; for ConnectionEvent","synthetic":false,"types":[]}];
implementors["libp2p_websocket"] = [{"text":"impl AsRef&lt;[u8]&gt; for IncomingData","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'k&gt; AsRef&lt;str&gt; for Key&lt;'k&gt;","synthetic":false,"types":[]}];
implementors["memmap"] = [{"text":"impl AsRef&lt;[u8]&gt; for Mmap","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for MmapMut","synthetic":false,"types":[]}];
implementors["minicbor"] = [{"text":"impl&lt;W&gt; AsRef&lt;W&gt; for Encoder&lt;W&gt;","synthetic":false,"types":[]}];
implementors["multihash"] = [{"text":"impl&lt;T:&nbsp;TryFrom&lt;u64&gt;&gt; AsRef&lt;[u8]&gt; for MultihashGeneric&lt;T&gt;","synthetic":false,"types":[]}];
implementors["nalgebra"] = [{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 1]&gt; for Matrix&lt;N, U1, U1, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 2]&gt; for Matrix&lt;N, U1, U2, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U1, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 3]&gt; for Matrix&lt;N, U1, U3, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U1, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 4]&gt; for Matrix&lt;N, U1, U4, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U1, U4&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 5]&gt; for Matrix&lt;N, U1, U5, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U1, U5&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 6]&gt; for Matrix&lt;N, U1, U6, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U1, U6&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 7]&gt; for Matrix&lt;N, U1, U7, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U1, U7&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 8]&gt; for Matrix&lt;N, U1, U8, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U1, U8&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 9]&gt; for Matrix&lt;N, U1, U9, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U1, U9&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 10]&gt; for Matrix&lt;N, U1, U10, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U1, U10&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 11]&gt; for Matrix&lt;N, U1, U11, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U1, U11&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 12]&gt; for Matrix&lt;N, U1, U12, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U1, U12&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 13]&gt; for Matrix&lt;N, U1, U13, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U1, U13&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 14]&gt; for Matrix&lt;N, U1, U14, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U1, U14&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 15]&gt; for Matrix&lt;N, U1, U15, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U1, U15&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 16]&gt; for Matrix&lt;N, U1, U16, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U1, U16&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 2]&gt; for Matrix&lt;N, U2, U1, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 3]&gt; for Matrix&lt;N, U3, U1, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 4]&gt; for Matrix&lt;N, U4, U1, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 5]&gt; for Matrix&lt;N, U5, U1, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U5, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 6]&gt; for Matrix&lt;N, U6, U1, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U6, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 7]&gt; for Matrix&lt;N, U7, U1, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U7, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 8]&gt; for Matrix&lt;N, U8, U1, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U8, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 9]&gt; for Matrix&lt;N, U9, U1, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U9, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 10]&gt; for Matrix&lt;N, U10, U1, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U10, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 11]&gt; for Matrix&lt;N, U11, U1, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U11, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 12]&gt; for Matrix&lt;N, U12, U1, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U12, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 13]&gt; for Matrix&lt;N, U13, U1, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U13, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 14]&gt; for Matrix&lt;N, U14, U1, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U14, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 15]&gt; for Matrix&lt;N, U15, U1, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U15, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; AsRef&lt;[N; 16]&gt; for Matrix&lt;N, U16, U1, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U16, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 2]; 2]&gt; for Matrix&lt;N, U2, U2, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 2]; 3]&gt; for Matrix&lt;N, U2, U3, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U2, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 2]; 4]&gt; for Matrix&lt;N, U2, U4, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U2, U4&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 2]; 5]&gt; for Matrix&lt;N, U2, U5, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U2, U5&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 2]; 6]&gt; for Matrix&lt;N, U2, U6, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U2, U6&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 3]; 2]&gt; for Matrix&lt;N, U3, U2, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U3, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 3]; 3]&gt; for Matrix&lt;N, U3, U3, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U3, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 3]; 4]&gt; for Matrix&lt;N, U3, U4, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U3, U4&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 3]; 5]&gt; for Matrix&lt;N, U3, U5, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U3, U5&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 3]; 6]&gt; for Matrix&lt;N, U3, U6, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U3, U6&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 4]; 2]&gt; for Matrix&lt;N, U4, U2, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U4, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 4]; 3]&gt; for Matrix&lt;N, U4, U3, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U4, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 4]; 4]&gt; for Matrix&lt;N, U4, U4, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U4, U4&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 4]; 5]&gt; for Matrix&lt;N, U4, U5, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U4, U5&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 4]; 6]&gt; for Matrix&lt;N, U4, U6, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U4, U6&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 5]; 2]&gt; for Matrix&lt;N, U5, U2, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U5, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 5]; 3]&gt; for Matrix&lt;N, U5, U3, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U5, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 5]; 4]&gt; for Matrix&lt;N, U5, U4, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U5, U4&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 5]; 5]&gt; for Matrix&lt;N, U5, U5, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U5, U5&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 5]; 6]&gt; for Matrix&lt;N, U5, U6, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U5, U6&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 6]; 2]&gt; for Matrix&lt;N, U6, U2, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U6, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 6]; 3]&gt; for Matrix&lt;N, U6, U3, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U6, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 6]; 4]&gt; for Matrix&lt;N, U6, U4, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U6, U4&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 6]; 5]&gt; for Matrix&lt;N, U6, U5, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U6, U5&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, S&gt; AsRef&lt;[[N; 6]; 6]&gt; for Matrix&lt;N, U6, U6, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ContiguousStorage&lt;N, U6, U6&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; AsRef&lt;T&gt; for Unit&lt;T&gt;","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl AsRef&lt;str&gt; for Signal","synthetic":false,"types":[]},{"text":"impl AsRef&lt;sigset_t&gt; for SigSet","synthetic":false,"types":[]},{"text":"impl AsRef&lt;timespec&gt; for TimeSpec","synthetic":false,"types":[]},{"text":"impl AsRef&lt;timeval&gt; for TimeVal","synthetic":false,"types":[]}];
implementors["owning_ref"] = [{"text":"impl&lt;O, T:&nbsp;?Sized&gt; AsRef&lt;T&gt; for OwningRef&lt;O, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;O, T:&nbsp;?Sized&gt; AsRef&lt;T&gt; for OwningRefMut&lt;O, T&gt;","synthetic":false,"types":[]}];
implementors["parity_multiaddr"] = [{"text":"impl AsRef&lt;[u8]&gt; for Multiaddr","synthetic":false,"types":[]}];
implementors["primitive_types"] = [{"text":"impl AsRef&lt;[u64]&gt; for U128","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u64]&gt; for U256","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u64]&gt; for U512","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for H128","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for H160","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for H256","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for H512","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl AsRef&lt;[u8]&gt; for Literal","synthetic":false,"types":[]}];
implementors["ring"] = [{"text":"impl&lt;A&gt; AsRef&lt;[u8]&gt; for Aad&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Tag","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8; 12]&gt; for Nonce","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for PublicKey","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Digest","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Tag","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Document","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for RsaSubjectPublicKey","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Signature","synthetic":false,"types":[]}];
implementors["rocksdb"] = [{"text":"impl&lt;'a&gt; AsRef&lt;[u8]&gt; for DBPinnableSlice&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;str&gt; for Error","synthetic":false,"types":[]}];
implementors["rustls"] = [{"text":"impl AsRef&lt;[u8]&gt; for Certificate","synthetic":false,"types":[]}];
implementors["sc_network"] = [{"text":"impl AsRef&lt;str&gt; for ProtocolId","synthetic":false,"types":[]}];
implementors["sc_transaction_graph"] = [{"text":"impl&lt;Hash, Extrinsic&gt; AsRef&lt;Extrinsic&gt; for Transaction&lt;Hash, Extrinsic&gt;","synthetic":false,"types":[]}];
implementors["schnorrkel"] = [{"text":"impl AsRef&lt;[u8]&gt; for PublicKey","synthetic":false,"types":[]}];
implementors["scroll"] = [{"text":"impl AsRef&lt;u64&gt; for Uleb128","synthetic":false,"types":[]},{"text":"impl AsRef&lt;i64&gt; for Sleb128","synthetic":false,"types":[]}];
implementors["secp256k1"] = [{"text":"impl AsRef&lt;[u8]&gt; for SignatureArray","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Digest&gt; AsRef&lt;[u8]&gt; for SharedSecret&lt;D&gt;","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; AsRef&lt;[&lt;A as Array&gt;::Item]&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["soketto"] = [{"text":"impl&lt;'_&gt; AsRef&lt;[u8]&gt; for ByteSlice125&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; AsRef&lt;[u8]&gt; for Storage&lt;'_&gt;","synthetic":false,"types":[]}];
implementors["sp_application_crypto"] = [{"text":"impl AsRef&lt;Public&gt; for Public","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Public","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Signature&gt; for Signature","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Signature","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Pair&gt; for Pair","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Public&gt; for Public","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Public","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Signature&gt; for Signature","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Signature","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Pair&gt; for Pair","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Public&gt; for Public","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Public","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Signature&gt; for Signature","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Signature","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Pair&gt; for Pair","synthetic":false,"types":[]}];
implementors["sp_core"] = [{"text":"impl AsRef&lt;[u8]&gt; for AccountId32","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8; 32]&gt; for AccountId32","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Dummy","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8; 32]&gt; for Public","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Public","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8; 64]&gt; for Signature","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Signature","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8; 32]&gt; for Public","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Public","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8; 64]&gt; for Signature","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Signature","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Keypair&gt; for Pair","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Public","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8; 65]&gt; for Signature","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Signature","synthetic":false,"types":[]}];
implementors["sp_keyring"] = [{"text":"impl AsRef&lt;[u8; 32]&gt; for Keyring","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Public&gt; for Keyring","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8; 32]&gt; for Keyring","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Public&gt; for Keyring","synthetic":false,"types":[]}];
implementors["sp_runtime"] = [{"text":"impl AsRef&lt;str&gt; for Method","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for UintAuthorityId","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for RuntimeString","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for MultiSigner","synthetic":false,"types":[]}];
implementors["tempfile"] = [{"text":"impl AsRef&lt;Path&gt; for TempDir","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for TempPath","synthetic":false,"types":[]},{"text":"impl AsRef&lt;OsStr&gt; for TempPath","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for NamedTempFile","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; AsRef&lt;[&lt;A as Array&gt;::Item]&gt; for ArrayVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'s, T&gt; AsRef&lt;[T]&gt; for SliceVec&lt;'s, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; AsRef&lt;[&lt;A as Array&gt;::Item]&gt; for TinyVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl&lt;'_&gt; AsRef&lt;TcpStream&gt; for ReadHalf&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; AsRef&lt;TcpStream&gt; for WriteHalf&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;TcpStream&gt; for OwnedReadHalf","synthetic":false,"types":[]},{"text":"impl AsRef&lt;TcpStream&gt; for OwnedWriteHalf","synthetic":false,"types":[]}];
implementors["tokio_io"] = [{"text":"impl&lt;T:&nbsp;AsRef&lt;[u8]&gt;&gt; AsRef&lt;[u8]&gt; for Window&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tracing_core"] = [{"text":"impl AsRef&lt;str&gt; for Field","synthetic":false,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S:&nbsp;AsRef&lt;str&gt;&gt; AsRef&lt;str&gt; for Ascii&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;AsRef&lt;str&gt;&gt; AsRef&lt;str&gt; for UniCase&lt;S&gt;","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl AsRef&lt;str&gt; for Url","synthetic":false,"types":[]}];
implementors["wasm_bindgen"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; AsRef&lt;JsValue&gt; for Closure&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;JsValue&gt; for JsValue","synthetic":false,"types":[]}];
implementors["wasmi"] = [{"text":"impl&lt;'a&gt; AsRef&lt;[RuntimeValue]&gt; for RuntimeArgs&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["webpki"] = [{"text":"impl AsRef&lt;str&gt; for DNSName","synthetic":false,"types":[]}];
implementors["yamux"] = [{"text":"impl AsRef&lt;[u8]&gt; for Packet","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()