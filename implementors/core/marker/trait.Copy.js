(function() {var implementors = {};
implementors["adler"] = [{"text":"impl Copy for Adler32","synthetic":false,"types":[]}];
implementors["aead"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl Copy for MatchKind","synthetic":false,"types":[]},{"text":"impl Copy for MatchKind","synthetic":false,"types":[]}];
implementors["alga"] = [{"text":"impl&lt;O:&nbsp;Operator&gt; Copy for Id&lt;O&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Additive","synthetic":false,"types":[]},{"text":"impl Copy for Multiplicative","synthetic":false,"types":[]}];
implementors["ansi_term"] = [{"text":"impl Copy for Prefix","synthetic":false,"types":[]},{"text":"impl Copy for Infix","synthetic":false,"types":[]},{"text":"impl Copy for Suffix","synthetic":false,"types":[]},{"text":"impl Copy for Style","synthetic":false,"types":[]},{"text":"impl Copy for Colour","synthetic":false,"types":[]}];
implementors["arc_swap"] = [{"text":"impl&lt;G:&nbsp;Copy, T:&nbsp;Copy&gt; Copy for MapGuard&lt;G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Copy, T:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for Map&lt;A, T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for ConstantDeref&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Constant&lt;T&gt;","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A:&nbsp;Copy + Array&lt;Item = u8&gt;&gt; Copy for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Index: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for CapacityError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["asn1_der"] = [{"text":"impl Copy for DerTag","synthetic":false,"types":[]},{"text":"impl Copy for DerLength","synthetic":false,"types":[]},{"text":"impl Copy for Asn1DerError","synthetic":false,"types":[]}];
implementors["async_channel"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for RecvError","synthetic":false,"types":[]},{"text":"impl Copy for TryRecvError","synthetic":false,"types":[]}];
implementors["async_std"] = [{"text":"impl Copy for TaskId","synthetic":false,"types":[]},{"text":"impl Copy for AccessError","synthetic":false,"types":[]},{"text":"impl Copy for TimeoutError","synthetic":false,"types":[]},{"text":"impl Copy for TimeoutError","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Ancestors&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["atty"] = [{"text":"impl Copy for Stream","synthetic":false,"types":[]}];
implementors["backtrace"] = [{"text":"impl Copy for PrintFmt","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl Copy for CharacterSet","synthetic":false,"types":[]},{"text":"impl Copy for Config","synthetic":false,"types":[]}];
implementors["bincode"] = [{"text":"impl Copy for LittleEndian","synthetic":false,"types":[]},{"text":"impl Copy for BigEndian","synthetic":false,"types":[]},{"text":"impl Copy for NativeEndian","synthetic":false,"types":[]},{"text":"impl Copy for FixintEncoding","synthetic":false,"types":[]},{"text":"impl Copy for VarintEncoding","synthetic":false,"types":[]},{"text":"impl Copy for Bounded","synthetic":false,"types":[]},{"text":"impl Copy for Infinite","synthetic":false,"types":[]},{"text":"impl Copy for AllowTrailing","synthetic":false,"types":[]},{"text":"impl Copy for RejectTrailing","synthetic":false,"types":[]},{"text":"impl Copy for DefaultOptions","synthetic":false,"types":[]},{"text":"impl&lt;O:&nbsp;Copy + Options, L:&nbsp;Copy + SizeLimit&gt; Copy for WithOtherLimit&lt;O, L&gt;","synthetic":false,"types":[]},{"text":"impl&lt;O:&nbsp;Copy + Options, E:&nbsp;Copy + BincodeByteOrder&gt; Copy for WithOtherEndian&lt;O, E&gt;","synthetic":false,"types":[]}];
implementors["bip39"] = [{"text":"impl Copy for MnemonicType","synthetic":false,"types":[]},{"text":"impl Copy for Language","synthetic":false,"types":[]}];
implementors["bitvec"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for BitIdx&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for BitPos&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for BitMask&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Msb0","synthetic":false,"types":[]},{"text":"impl Copy for Lsb0","synthetic":false,"types":[]}];
implementors["blake2_rfc"] = [{"text":"impl Copy for Blake2bResult","synthetic":false,"types":[]},{"text":"impl Copy for Blake2sResult","synthetic":false,"types":[]}];
implementors["blake2b_simd"] = [{"text":"impl Copy for Hash","synthetic":false,"types":[]}];
implementors["blake2s_simd"] = [{"text":"impl Copy for Hash","synthetic":false,"types":[]}];
implementors["block_cipher"] = [{"text":"impl Copy for InvalidKeyLength","synthetic":false,"types":[]}];
implementors["block_padding"] = [{"text":"impl Copy for PadError","synthetic":false,"types":[]},{"text":"impl Copy for UnpadError","synthetic":false,"types":[]}];
implementors["bs58"] = [{"text":"impl Copy for Alphabet","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Copy for BigEndian","synthetic":false,"types":[]},{"text":"impl Copy for LittleEndian","synthetic":false,"types":[]}];
implementors["cache_padded"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for CachePadded&lt;T&gt;","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for LocalResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for FixedOffset","synthetic":false,"types":[]},{"text":"impl Copy for Local","synthetic":false,"types":[]},{"text":"impl Copy for Utc","synthetic":false,"types":[]},{"text":"impl Copy for NaiveDate","synthetic":false,"types":[]},{"text":"impl Copy for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl Copy for IsoWeek","synthetic":false,"types":[]},{"text":"impl Copy for NaiveTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Copy for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for SecondsFormat","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Copy for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Pad","synthetic":false,"types":[]},{"text":"impl Copy for ParseError","synthetic":false,"types":[]},{"text":"impl Copy for RoundingError","synthetic":false,"types":[]},{"text":"impl Copy for Weekday","synthetic":false,"types":[]},{"text":"impl Copy for Month","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl Copy for AppSettings","synthetic":false,"types":[]},{"text":"impl Copy for ArgSettings","synthetic":false,"types":[]},{"text":"impl Copy for Shell","synthetic":false,"types":[]},{"text":"impl Copy for ErrorKind","synthetic":false,"types":[]}];
implementors["concurrent_queue"] = [{"text":"impl Copy for PopError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for PushError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["cranelift_codegen"] = [{"text":"impl Copy for Reloc","synthetic":false,"types":[]},{"text":"impl Copy for CursorPosition","synthetic":false,"types":[]},{"text":"impl Copy for ValueDef","synthetic":false,"types":[]},{"text":"impl Copy for Block","synthetic":false,"types":[]},{"text":"impl Copy for Value","synthetic":false,"types":[]},{"text":"impl Copy for Inst","synthetic":false,"types":[]},{"text":"impl Copy for StackSlot","synthetic":false,"types":[]},{"text":"impl Copy for GlobalValue","synthetic":false,"types":[]},{"text":"impl Copy for Constant","synthetic":false,"types":[]},{"text":"impl Copy for Immediate","synthetic":false,"types":[]},{"text":"impl Copy for JumpTable","synthetic":false,"types":[]},{"text":"impl Copy for FuncRef","synthetic":false,"types":[]},{"text":"impl Copy for SigRef","synthetic":false,"types":[]},{"text":"impl Copy for Heap","synthetic":false,"types":[]},{"text":"impl Copy for Table","synthetic":false,"types":[]},{"text":"impl Copy for AnyEntity","synthetic":false,"types":[]},{"text":"impl Copy for AbiParam","synthetic":false,"types":[]},{"text":"impl Copy for ArgumentExtension","synthetic":false,"types":[]},{"text":"impl Copy for ArgumentPurpose","synthetic":false,"types":[]},{"text":"impl Copy for Imm64","synthetic":false,"types":[]},{"text":"impl Copy for Uimm64","synthetic":false,"types":[]},{"text":"impl Copy for Uimm32","synthetic":false,"types":[]},{"text":"impl Copy for V128Imm","synthetic":false,"types":[]},{"text":"impl Copy for Offset32","synthetic":false,"types":[]},{"text":"impl Copy for Ieee32","synthetic":false,"types":[]},{"text":"impl Copy for Ieee64","synthetic":false,"types":[]},{"text":"impl Copy for InstructionFormat","synthetic":false,"types":[]},{"text":"impl Copy for Opcode","synthetic":false,"types":[]},{"text":"impl Copy for OpcodeConstraints","synthetic":false,"types":[]},{"text":"impl Copy for ValueTypeSet","synthetic":false,"types":[]},{"text":"impl Copy for ResolvedConstraint","synthetic":false,"types":[]},{"text":"impl Copy for LibCall","synthetic":false,"types":[]},{"text":"impl Copy for MemFlags","synthetic":false,"types":[]},{"text":"impl Copy for ProgramPoint","synthetic":false,"types":[]},{"text":"impl Copy for ExpandedProgramPoint","synthetic":false,"types":[]},{"text":"impl Copy for SourceLoc","synthetic":false,"types":[]},{"text":"impl Copy for StackSlotKind","synthetic":false,"types":[]},{"text":"impl Copy for StackLayoutInfo","synthetic":false,"types":[]},{"text":"impl Copy for TrapCode","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for ValueLoc","synthetic":false,"types":[]},{"text":"impl Copy for ArgumentLoc","synthetic":false,"types":[]},{"text":"impl Copy for ValueLabel","synthetic":false,"types":[]},{"text":"impl Copy for CallConv","synthetic":false,"types":[]},{"text":"impl Copy for ConstraintKind","synthetic":false,"types":[]},{"text":"impl Copy for BranchRange","synthetic":false,"types":[]},{"text":"impl Copy for Encoding","synthetic":false,"types":[]},{"text":"impl Copy for RegClassIndex","synthetic":false,"types":[]},{"text":"impl Copy for StackRef","synthetic":false,"types":[]},{"text":"impl Copy for StackBase","synthetic":false,"types":[]},{"text":"impl Copy for StackBaseMask","synthetic":false,"types":[]},{"text":"impl Copy for LookupError","synthetic":false,"types":[]},{"text":"impl Copy for TargetFrontendConfig","synthetic":false,"types":[]},{"text":"impl Copy for Loop","synthetic":false,"types":[]},{"text":"impl Copy for InstColor","synthetic":false,"types":[]},{"text":"impl Copy for LowerInput","synthetic":false,"types":[]},{"text":"impl Copy for RelocDistance","synthetic":false,"types":[]},{"text":"impl Copy for LoweredBlock","synthetic":false,"types":[]},{"text":"impl Copy for MachLabel","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for PredicateView&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Detail","synthetic":false,"types":[]},{"text":"impl Copy for Regalloc","synthetic":false,"types":[]},{"text":"impl Copy for OptLevel","synthetic":false,"types":[]},{"text":"impl Copy for TlsModel","synthetic":false,"types":[]},{"text":"impl Copy for LibcallCallConv","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for FlagsOrIsa&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ValueLocRange","synthetic":false,"types":[]}];
implementors["cranelift_codegen_shared"] = [{"text":"impl Copy for IntCC","synthetic":false,"types":[]},{"text":"impl Copy for FloatCC","synthetic":false,"types":[]},{"text":"impl Copy for EncodingBits","synthetic":false,"types":[]},{"text":"impl Copy for OpcodePrefix","synthetic":false,"types":[]}];
implementors["cranelift_entity"] = [{"text":"impl&lt;T:&nbsp;Copy + ReservedValue&gt; Copy for PackedOption&lt;T&gt;","synthetic":false,"types":[]}];
implementors["cranelift_frontend"] = [{"text":"impl Copy for Variable","synthetic":false,"types":[]}];
implementors["cranelift_wasm"] = [{"text":"impl Copy for WasmType","synthetic":false,"types":[]},{"text":"impl Copy for GlobalVariable","synthetic":false,"types":[]},{"text":"impl Copy for ReturnMode","synthetic":false,"types":[]},{"text":"impl Copy for FuncIndex","synthetic":false,"types":[]},{"text":"impl Copy for DefinedFuncIndex","synthetic":false,"types":[]},{"text":"impl Copy for DefinedTableIndex","synthetic":false,"types":[]},{"text":"impl Copy for DefinedMemoryIndex","synthetic":false,"types":[]},{"text":"impl Copy for DefinedGlobalIndex","synthetic":false,"types":[]},{"text":"impl Copy for TableIndex","synthetic":false,"types":[]},{"text":"impl Copy for GlobalIndex","synthetic":false,"types":[]},{"text":"impl Copy for MemoryIndex","synthetic":false,"types":[]},{"text":"impl Copy for SignatureIndex","synthetic":false,"types":[]},{"text":"impl Copy for DataIndex","synthetic":false,"types":[]},{"text":"impl Copy for ElemIndex","synthetic":false,"types":[]},{"text":"impl Copy for Global","synthetic":false,"types":[]},{"text":"impl Copy for GlobalInit","synthetic":false,"types":[]},{"text":"impl Copy for Table","synthetic":false,"types":[]},{"text":"impl Copy for TableElementType","synthetic":false,"types":[]},{"text":"impl Copy for Memory","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for SendTimeoutError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for RecvError","synthetic":false,"types":[]},{"text":"impl Copy for TryRecvError","synthetic":false,"types":[]},{"text":"impl Copy for RecvTimeoutError","synthetic":false,"types":[]},{"text":"impl Copy for TrySelectError","synthetic":false,"types":[]},{"text":"impl Copy for SelectTimeoutError","synthetic":false,"types":[]},{"text":"impl Copy for TryReadyError","synthetic":false,"types":[]},{"text":"impl Copy for ReadyTimeoutError","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Steal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T&gt; Copy for Shared&lt;'g, T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl Copy for PopError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for PushError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for CachePadded&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Copy for MacError","synthetic":false,"types":[]},{"text":"impl Copy for InvalidKeyLength","synthetic":false,"types":[]}];
implementors["curve25519_dalek"] = [{"text":"impl Copy for Scalar","synthetic":false,"types":[]},{"text":"impl Copy for MontgomeryPoint","synthetic":false,"types":[]},{"text":"impl Copy for CompressedEdwardsY","synthetic":false,"types":[]},{"text":"impl Copy for EdwardsPoint","synthetic":false,"types":[]},{"text":"impl Copy for CompressedRistretto","synthetic":false,"types":[]},{"text":"impl Copy for RistrettoPoint","synthetic":false,"types":[]}];
implementors["data_encoding"] = [{"text":"impl Copy for DecodeKind","synthetic":false,"types":[]},{"text":"impl Copy for DecodeError","synthetic":false,"types":[]},{"text":"impl Copy for DecodePartial","synthetic":false,"types":[]},{"text":"impl Copy for BitOrder","synthetic":false,"types":[]},{"text":"impl Copy for SpecificationError","synthetic":false,"types":[]}];
implementors["digest"] = [{"text":"impl Copy for InvalidOutputSize","synthetic":false,"types":[]}];
implementors["dns_parser"] = [{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for QueryType","synthetic":false,"types":[]},{"text":"impl Copy for Class","synthetic":false,"types":[]},{"text":"impl Copy for QueryClass","synthetic":false,"types":[]},{"text":"impl Copy for Opcode","synthetic":false,"types":[]},{"text":"impl Copy for ResponseCode","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Name&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Header","synthetic":false,"types":[]},{"text":"impl Copy for Record","synthetic":false,"types":[]},{"text":"impl Copy for Record","synthetic":false,"types":[]},{"text":"impl Copy for Record","synthetic":false,"types":[]},{"text":"impl Copy for Record","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Record","synthetic":false,"types":[]},{"text":"impl Copy for Record","synthetic":false,"types":[]},{"text":"impl Copy for Record","synthetic":false,"types":[]},{"text":"impl Copy for Record","synthetic":false,"types":[]},{"text":"impl Copy for Record","synthetic":false,"types":[]},{"text":"impl Copy for Record","synthetic":false,"types":[]},{"text":"impl Copy for Record","synthetic":false,"types":[]},{"text":"impl Copy for Record","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Record","synthetic":false,"types":[]},{"text":"impl Copy for Record","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Record","synthetic":false,"types":[]}];
implementors["ed25519"] = [{"text":"impl Copy for Signature","synthetic":false,"types":[]}];
implementors["ed25519_dalek"] = [{"text":"impl Copy for PublicKey","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Copy, R:&nbsp;Copy&gt; Copy for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["env_logger"] = [{"text":"impl Copy for Target","synthetic":false,"types":[]},{"text":"impl Copy for WriteStyle","synthetic":false,"types":[]},{"text":"impl Copy for TimestampPrecision","synthetic":false,"types":[]}];
implementors["errno"] = [{"text":"impl Copy for Errno","synthetic":false,"types":[]}];
implementors["failure"] = [{"text":"impl&lt;E:&nbsp;Copy&gt; Copy for Compat&lt;E&gt;","synthetic":false,"types":[]}];
implementors["fake_simd"] = [{"text":"impl Copy for u32x4","synthetic":false,"types":[]},{"text":"impl Copy for u64x2","synthetic":false,"types":[]}];
implementors["finality_grandpa"] = [{"text":"impl Copy for Phase","synthetic":false,"types":[]}];
implementors["flate2"] = [{"text":"impl Copy for FlushCompress","synthetic":false,"types":[]},{"text":"impl Copy for FlushDecompress","synthetic":false,"types":[]},{"text":"impl Copy for Status","synthetic":false,"types":[]},{"text":"impl Copy for Compression","synthetic":false,"types":[]}];
implementors["form_urlencoded"] = [{"text":"impl&lt;'a&gt; Copy for Parse&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["frame_benchmarking"] = [{"text":"impl Copy for BenchmarkParameter","synthetic":false,"types":[]}];
implementors["frame_system"] = [{"text":"impl&lt;T:&nbsp;Copy + Trait&gt; Copy for Module&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Async&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for AsyncSink&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ExecuteErrorKind","synthetic":false,"types":[]},{"text":"impl Copy for Canceled","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl Copy for Canceled","synthetic":false,"types":[]}];
implementors["futures_lite"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for AssertAsync&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl Copy for Aborted","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Compat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for AllowStdIo&lt;T&gt;","synthetic":false,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T:&nbsp;Copy, N&gt; Copy for GenericArray&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::ArrayType: Copy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["gimli"] = [{"text":"impl Copy for Format","synthetic":false,"types":[]},{"text":"impl Copy for Encoding","synthetic":false,"types":[]},{"text":"impl Copy for LineEncoding","synthetic":false,"types":[]},{"text":"impl Copy for Register","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugAbbrevOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugAddrBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugAddrIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugInfoOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugLineOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugLineStrOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for LocationListsOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugLocListsBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugLocListsIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugMacinfoOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugMacroOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for RangeListsOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugRngListsBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugRngListsIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugStrOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugStrOffsetsBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugStrOffsetsIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugTypesOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for DebugTypeSignature","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugFrameOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for EhFrameOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for UnitSectionOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for SectionId","synthetic":false,"types":[]},{"text":"impl Copy for Arm","synthetic":false,"types":[]},{"text":"impl Copy for X86","synthetic":false,"types":[]},{"text":"impl Copy for X86_64","synthetic":false,"types":[]},{"text":"impl Copy for DwUt","synthetic":false,"types":[]},{"text":"impl Copy for DwCfa","synthetic":false,"types":[]},{"text":"impl Copy for DwChildren","synthetic":false,"types":[]},{"text":"impl Copy for DwTag","synthetic":false,"types":[]},{"text":"impl Copy for DwAt","synthetic":false,"types":[]},{"text":"impl Copy for DwForm","synthetic":false,"types":[]},{"text":"impl Copy for DwAte","synthetic":false,"types":[]},{"text":"impl Copy for DwLle","synthetic":false,"types":[]},{"text":"impl Copy for DwDs","synthetic":false,"types":[]},{"text":"impl Copy for DwEnd","synthetic":false,"types":[]},{"text":"impl Copy for DwAccess","synthetic":false,"types":[]},{"text":"impl Copy for DwVis","synthetic":false,"types":[]},{"text":"impl Copy for DwVirtuality","synthetic":false,"types":[]},{"text":"impl Copy for DwLang","synthetic":false,"types":[]},{"text":"impl Copy for DwAddr","synthetic":false,"types":[]},{"text":"impl Copy for DwId","synthetic":false,"types":[]},{"text":"impl Copy for DwCc","synthetic":false,"types":[]},{"text":"impl Copy for DwInl","synthetic":false,"types":[]},{"text":"impl Copy for DwOrd","synthetic":false,"types":[]},{"text":"impl Copy for DwDsc","synthetic":false,"types":[]},{"text":"impl Copy for DwIdx","synthetic":false,"types":[]},{"text":"impl Copy for DwDefaulted","synthetic":false,"types":[]},{"text":"impl Copy for DwLns","synthetic":false,"types":[]},{"text":"impl Copy for DwLne","synthetic":false,"types":[]},{"text":"impl Copy for DwLnct","synthetic":false,"types":[]},{"text":"impl Copy for DwMacro","synthetic":false,"types":[]},{"text":"impl Copy for DwRle","synthetic":false,"types":[]},{"text":"impl Copy for DwOp","synthetic":false,"types":[]},{"text":"impl Copy for DwEhPe","synthetic":false,"types":[]},{"text":"impl Copy for RunTimeEndian","synthetic":false,"types":[]},{"text":"impl Copy for LittleEndian","synthetic":false,"types":[]},{"text":"impl Copy for BigEndian","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugAddr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy + Reader&gt; Copy for DebugFrame&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy + Reader&gt; Copy for EhFrameHdr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy + Reader&gt; Copy for EhFrame&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Augmentation","synthetic":false,"types":[]},{"text":"impl Copy for Pointer","synthetic":false,"types":[]},{"text":"impl&lt;'input, Endian:&nbsp;Copy&gt; Copy for EndianSlice&lt;'input, Endian&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Endianity,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Endian:&nbsp;Copy, T:&nbsp;Copy&gt; Copy for EndianReader&lt;Endian, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Endianity,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: CloneStableDeref&lt;Target = [u8]&gt; + Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for ReaderOffsetId","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugAbbrev&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Copy for AttributeSpecification","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugLine&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy, Offset:&nbsp;Copy&gt; Copy for LineInstruction&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for LineRow","synthetic":false,"types":[]},{"text":"impl Copy for ColumnType","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy, Offset:&nbsp;Copy&gt; Copy for FileEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for FileEntryFormat","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugLoc&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugLocLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for LocationLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy + Reader&gt; Copy for LocationListEntry&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DieReference&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy, Offset:&nbsp;Copy&gt; Copy for Operation&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy, Offset:&nbsp;Copy&gt; Copy for Location&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy, Offset:&nbsp;Copy&gt; Copy for Piece&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy + Reader&gt; Copy for Expression&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy + Reader&gt; Copy for OperationIter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugRanges&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugRngLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for RangeLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Range","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugStr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugStrOffsets&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugLineStr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for UnitOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugInfo&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy, Offset:&nbsp;Copy&gt; Copy for CompilationUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy, Offset:&nbsp;Copy&gt; Copy for UnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy, Offset:&nbsp;Copy&gt; Copy for AttributeValue&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy + Reader&gt; Copy for Attribute&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'entry, 'unit, R:&nbsp;Copy + Reader&gt; Copy for AttrsIter&lt;'abbrev, 'entry, 'unit, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugTypes&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy, Offset:&nbsp;Copy&gt; Copy for TypeUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for ValueType","synthetic":false,"types":[]},{"text":"impl Copy for Value","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for InitialLengthOffset","synthetic":false,"types":[]},{"text":"impl Copy for CieId","synthetic":false,"types":[]},{"text":"impl Copy for LineRow","synthetic":false,"types":[]},{"text":"impl Copy for DirectoryId","synthetic":false,"types":[]},{"text":"impl Copy for FileId","synthetic":false,"types":[]},{"text":"impl Copy for FileInfo","synthetic":false,"types":[]},{"text":"impl Copy for LocationListId","synthetic":false,"types":[]},{"text":"impl Copy for RangeListId","synthetic":false,"types":[]},{"text":"impl Copy for StringId","synthetic":false,"types":[]},{"text":"impl Copy for LineStringId","synthetic":false,"types":[]},{"text":"impl Copy for UnitId","synthetic":false,"types":[]},{"text":"impl Copy for UnitEntryId","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for Address","synthetic":false,"types":[]},{"text":"impl Copy for Reference","synthetic":false,"types":[]},{"text":"impl Copy for ConvertError","synthetic":false,"types":[]}];
implementors["governance_os_pallet_bylaws"] = [{"text":"impl&lt;T:&nbsp;Copy + Trait&gt; Copy for Module&lt;T&gt;","synthetic":false,"types":[]}];
implementors["governance_os_pallet_coin_voting"] = [{"text":"impl Copy for VoteCountingStrategy","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Trait&gt; Copy for Module&lt;T&gt;","synthetic":false,"types":[]}];
implementors["governance_os_pallet_compat"] = [{"text":"impl&lt;T:&nbsp;Copy + Trait&gt; Copy for Module&lt;T&gt;","synthetic":false,"types":[]}];
implementors["governance_os_pallet_conviction_voting"] = [{"text":"impl&lt;T:&nbsp;Copy + Trait&gt; Copy for Module&lt;T&gt;","synthetic":false,"types":[]}];
implementors["governance_os_pallet_organizations"] = [{"text":"impl&lt;T:&nbsp;Copy + Trait&gt; Copy for Module&lt;T&gt;","synthetic":false,"types":[]}];
implementors["governance_os_pallet_plcr_voting"] = [{"text":"impl&lt;Balance:&nbsp;Copy, Hash:&nbsp;Copy&gt; Copy for VoteData&lt;Balance, Hash&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Trait&gt; Copy for Module&lt;T&gt;","synthetic":false,"types":[]}];
implementors["governance_os_pallet_tokens"] = [{"text":"impl&lt;T:&nbsp;Copy + Trait&gt; Copy for Module&lt;T&gt;","synthetic":false,"types":[]}];
implementors["governance_os_primitives"] = [{"text":"impl Copy for CurrencyId","synthetic":false,"types":[]}];
implementors["governance_os_runtime"] = [{"text":"impl Copy for Runtime","synthetic":false,"types":[]}];
implementors["h2"] = [{"text":"impl Copy for Reason","synthetic":false,"types":[]}];
implementors["hex"] = [{"text":"impl Copy for FromHexError","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl Copy for StatusCode","synthetic":false,"types":[]},{"text":"impl Copy for Version","synthetic":false,"types":[]}];
implementors["httparse"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Status&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Header&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["httpdate"] = [{"text":"impl Copy for HttpDate","synthetic":false,"types":[]}];
implementors["humantime"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for Duration","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["idna"] = [{"text":"impl Copy for Flags","synthetic":false,"types":[]}];
implementors["ip_network"] = [{"text":"impl Copy for IpNetwork","synthetic":false,"types":[]},{"text":"impl Copy for Ipv4Network","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6MulticastScope","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6Network","synthetic":false,"types":[]}];
implementors["ipnet"] = [{"text":"impl Copy for IpAddrRange","synthetic":false,"types":[]},{"text":"impl Copy for Ipv4AddrRange","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6AddrRange","synthetic":false,"types":[]},{"text":"impl Copy for IpNet","synthetic":false,"types":[]},{"text":"impl Copy for Ipv4Net","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6Net","synthetic":false,"types":[]},{"text":"impl Copy for IpSubnets","synthetic":false,"types":[]},{"text":"impl Copy for Ipv4Subnets","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6Subnets","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for MinMaxResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Position&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for FoldWhile&lt;T&gt;","synthetic":false,"types":[]}];
implementors["itoa"] = [{"text":"impl Copy for Buffer","synthetic":false,"types":[]}];
implementors["jsonrpc_core"] = [{"text":"impl Copy for Compatibility","synthetic":false,"types":[]},{"text":"impl Copy for Version","synthetic":false,"types":[]}];
implementors["jsonrpc_http_server"] = [{"text":"impl Copy for RestApi","synthetic":false,"types":[]}];
implementors["jsonrpc_pubsub"] = [{"text":"impl Copy for RandomStringIdProvider","synthetic":false,"types":[]}];
implementors["kvdb_rocksdb"] = [{"text":"impl Copy for CompactionProfile","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Copy for DIR","synthetic":false,"types":[]},{"text":"impl Copy for group","synthetic":false,"types":[]},{"text":"impl Copy for utimbuf","synthetic":false,"types":[]},{"text":"impl Copy for timeval","synthetic":false,"types":[]},{"text":"impl Copy for timespec","synthetic":false,"types":[]},{"text":"impl Copy for rlimit","synthetic":false,"types":[]},{"text":"impl Copy for rusage","synthetic":false,"types":[]},{"text":"impl Copy for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Copy for hostent","synthetic":false,"types":[]},{"text":"impl Copy for iovec","synthetic":false,"types":[]},{"text":"impl Copy for pollfd","synthetic":false,"types":[]},{"text":"impl Copy for winsize","synthetic":false,"types":[]},{"text":"impl Copy for linger","synthetic":false,"types":[]},{"text":"impl Copy for sigval","synthetic":false,"types":[]},{"text":"impl Copy for itimerval","synthetic":false,"types":[]},{"text":"impl Copy for tms","synthetic":false,"types":[]},{"text":"impl Copy for servent","synthetic":false,"types":[]},{"text":"impl Copy for protoent","synthetic":false,"types":[]},{"text":"impl Copy for FILE","synthetic":false,"types":[]},{"text":"impl Copy for fpos_t","synthetic":false,"types":[]},{"text":"impl Copy for timezone","synthetic":false,"types":[]},{"text":"impl Copy for in_addr","synthetic":false,"types":[]},{"text":"impl Copy for ip_mreq","synthetic":false,"types":[]},{"text":"impl Copy for ip_mreq_source","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Copy for addrinfo","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_ll","synthetic":false,"types":[]},{"text":"impl Copy for fd_set","synthetic":false,"types":[]},{"text":"impl Copy for tm","synthetic":false,"types":[]},{"text":"impl Copy for sched_param","synthetic":false,"types":[]},{"text":"impl Copy for Dl_info","synthetic":false,"types":[]},{"text":"impl Copy for lconv","synthetic":false,"types":[]},{"text":"impl Copy for in_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for ifaddrs","synthetic":false,"types":[]},{"text":"impl Copy for in6_rtmsg","synthetic":false,"types":[]},{"text":"impl Copy for arpreq","synthetic":false,"types":[]},{"text":"impl Copy for arpreq_old","synthetic":false,"types":[]},{"text":"impl Copy for arphdr","synthetic":false,"types":[]},{"text":"impl Copy for mmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for epoll_event","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Copy for utsname","synthetic":false,"types":[]},{"text":"impl Copy for sigevent","synthetic":false,"types":[]},{"text":"impl Copy for fpos64_t","synthetic":false,"types":[]},{"text":"impl Copy for rlimit64","synthetic":false,"types":[]},{"text":"impl Copy for glob_t","synthetic":false,"types":[]},{"text":"impl Copy for passwd","synthetic":false,"types":[]},{"text":"impl Copy for spwd","synthetic":false,"types":[]},{"text":"impl Copy for dqblk","synthetic":false,"types":[]},{"text":"impl Copy for signalfd_siginfo","synthetic":false,"types":[]},{"text":"impl Copy for itimerspec","synthetic":false,"types":[]},{"text":"impl Copy for fsid_t","synthetic":false,"types":[]},{"text":"impl Copy for packet_mreq","synthetic":false,"types":[]},{"text":"impl Copy for cpu_set_t","synthetic":false,"types":[]},{"text":"impl Copy for if_nameindex","synthetic":false,"types":[]},{"text":"impl Copy for msginfo","synthetic":false,"types":[]},{"text":"impl Copy for sembuf","synthetic":false,"types":[]},{"text":"impl Copy for input_event","synthetic":false,"types":[]},{"text":"impl Copy for input_id","synthetic":false,"types":[]},{"text":"impl Copy for input_absinfo","synthetic":false,"types":[]},{"text":"impl Copy for input_keymap_entry","synthetic":false,"types":[]},{"text":"impl Copy for input_mask","synthetic":false,"types":[]},{"text":"impl Copy for ff_replay","synthetic":false,"types":[]},{"text":"impl Copy for ff_trigger","synthetic":false,"types":[]},{"text":"impl Copy for ff_envelope","synthetic":false,"types":[]},{"text":"impl Copy for ff_constant_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_ramp_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_condition_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_periodic_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_rumble_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_effect","synthetic":false,"types":[]},{"text":"impl Copy for dl_phdr_info","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Ehdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Ehdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Sym","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Sym","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Phdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Phdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Shdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Shdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Chdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Chdr","synthetic":false,"types":[]},{"text":"impl Copy for ucred","synthetic":false,"types":[]},{"text":"impl Copy for mntent","synthetic":false,"types":[]},{"text":"impl Copy for posix_spawn_file_actions_t","synthetic":false,"types":[]},{"text":"impl Copy for posix_spawnattr_t","synthetic":false,"types":[]},{"text":"impl Copy for genlmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for in6_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for arpd_request","synthetic":false,"types":[]},{"text":"impl Copy for inotify_event","synthetic":false,"types":[]},{"text":"impl Copy for fanotify_response","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_vm","synthetic":false,"types":[]},{"text":"impl Copy for regmatch_t","synthetic":false,"types":[]},{"text":"impl Copy for sock_extended_err","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_nl","synthetic":false,"types":[]},{"text":"impl Copy for dirent","synthetic":false,"types":[]},{"text":"impl Copy for dirent64","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_alg","synthetic":false,"types":[]},{"text":"impl Copy for af_alg_iv","synthetic":false,"types":[]},{"text":"impl Copy for mq_attr","synthetic":false,"types":[]},{"text":"impl Copy for statx","synthetic":false,"types":[]},{"text":"impl Copy for statx_timestamp","synthetic":false,"types":[]},{"text":"impl Copy for aiocb","synthetic":false,"types":[]},{"text":"impl Copy for __exit_status","synthetic":false,"types":[]},{"text":"impl Copy for __timeval","synthetic":false,"types":[]},{"text":"impl Copy for glob64_t","synthetic":false,"types":[]},{"text":"impl Copy for msghdr","synthetic":false,"types":[]},{"text":"impl Copy for cmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for termios","synthetic":false,"types":[]},{"text":"impl Copy for mallinfo","synthetic":false,"types":[]},{"text":"impl Copy for nlmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for nlmsgerr","synthetic":false,"types":[]},{"text":"impl Copy for nl_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for nl_mmap_req","synthetic":false,"types":[]},{"text":"impl Copy for nl_mmap_hdr","synthetic":false,"types":[]},{"text":"impl Copy for nlattr","synthetic":false,"types":[]},{"text":"impl Copy for rtentry","synthetic":false,"types":[]},{"text":"impl Copy for timex","synthetic":false,"types":[]},{"text":"impl Copy for ntptimeval","synthetic":false,"types":[]},{"text":"impl Copy for regex_t","synthetic":false,"types":[]},{"text":"impl Copy for utmpx","synthetic":false,"types":[]},{"text":"impl Copy for sigset_t","synthetic":false,"types":[]},{"text":"impl Copy for sysinfo","synthetic":false,"types":[]},{"text":"impl Copy for msqid_ds","synthetic":false,"types":[]},{"text":"impl Copy for sigaction","synthetic":false,"types":[]},{"text":"impl Copy for statfs","synthetic":false,"types":[]},{"text":"impl Copy for flock","synthetic":false,"types":[]},{"text":"impl Copy for flock64","synthetic":false,"types":[]},{"text":"impl Copy for siginfo_t","synthetic":false,"types":[]},{"text":"impl Copy for stack_t","synthetic":false,"types":[]},{"text":"impl Copy for stat","synthetic":false,"types":[]},{"text":"impl Copy for stat64","synthetic":false,"types":[]},{"text":"impl Copy for statfs64","synthetic":false,"types":[]},{"text":"impl Copy for statvfs64","synthetic":false,"types":[]},{"text":"impl Copy for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Copy for _libc_fpxreg","synthetic":false,"types":[]},{"text":"impl Copy for _libc_xmmreg","synthetic":false,"types":[]},{"text":"impl Copy for _libc_fpstate","synthetic":false,"types":[]},{"text":"impl Copy for user_regs_struct","synthetic":false,"types":[]},{"text":"impl Copy for user","synthetic":false,"types":[]},{"text":"impl Copy for mcontext_t","synthetic":false,"types":[]},{"text":"impl Copy for ipc_perm","synthetic":false,"types":[]},{"text":"impl Copy for shmid_ds","synthetic":false,"types":[]},{"text":"impl Copy for termios2","synthetic":false,"types":[]},{"text":"impl Copy for ip_mreqn","synthetic":false,"types":[]},{"text":"impl Copy for user_fpregs_struct","synthetic":false,"types":[]},{"text":"impl Copy for ucontext_t","synthetic":false,"types":[]},{"text":"impl Copy for statvfs","synthetic":false,"types":[]},{"text":"impl Copy for max_align_t","synthetic":false,"types":[]},{"text":"impl Copy for sem_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Copy for fanotify_event_metadata","synthetic":false,"types":[]},{"text":"impl Copy for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Copy for in6_addr","synthetic":false,"types":[]}];
implementors["libp2p_core"] = [{"text":"impl&lt;TOutboundOpenInfo:&nbsp;Copy, TCustom:&nbsp;Copy&gt; Copy for ConnectionHandlerEvent&lt;TOutboundOpenInfo, TCustom&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ListenerId","synthetic":false,"types":[]},{"text":"impl&lt;TDialInfo:&nbsp;Copy&gt; Copy for SubstreamEndpoint&lt;TDialInfo&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ConnectionId","synthetic":false,"types":[]},{"text":"impl Copy for Endpoint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for IncomingInfo&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, TPeerId:&nbsp;Copy&gt; Copy for OutgoingInfo&lt;'a, TPeerId&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Copy, B:&nbsp;Copy&gt; Copy for EitherError&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Copy, B:&nbsp;Copy&gt; Copy for EitherOutput&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Copy + StreamMuxer, B:&nbsp;Copy + StreamMuxer&gt; Copy for EitherOutbound&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::OutboundSubstream: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::OutboundSubstream: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Copy, B:&nbsp;Copy&gt; Copy for EitherListenStream&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Copy, B:&nbsp;Copy&gt; Copy for EitherFuture&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Copy, B:&nbsp;Copy&gt; Copy for EitherFuture2&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Copy, B:&nbsp;Copy&gt; Copy for EitherTransport&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Copy, B:&nbsp;Copy&gt; Copy for OrTransport&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for Map&lt;T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for MapErr&lt;T, F&gt;","synthetic":false,"types":[]},{"text":"impl Copy for MemoryTransport","synthetic":false,"types":[]},{"text":"impl Copy for MemoryTransportError","synthetic":false,"types":[]},{"text":"impl&lt;InnerTrans:&nbsp;Copy&gt; Copy for TransportTimeout&lt;InnerTrans&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy, U:&nbsp;Copy&gt; Copy for Upgrade&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for OptionalTransport&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for DeniedUpgrade","synthetic":false,"types":[]}];
implementors["libp2p_deflate"] = [{"text":"impl Copy for DeflateConfig","synthetic":false,"types":[]}];
implementors["libp2p_kad"] = [{"text":"impl Copy for NodeStatus","synthetic":false,"types":[]},{"text":"impl Copy for Distance","synthetic":false,"types":[]},{"text":"impl Copy for KadConnectionType","synthetic":false,"types":[]},{"text":"impl Copy for KademliaBucketInserts","synthetic":false,"types":[]},{"text":"impl Copy for Quorum","synthetic":false,"types":[]},{"text":"impl Copy for AddProviderContext","synthetic":false,"types":[]},{"text":"impl Copy for PutRecordContext","synthetic":false,"types":[]},{"text":"impl Copy for QueryId","synthetic":false,"types":[]}];
implementors["libp2p_mplex"] = [{"text":"impl Copy for MaxBufferBehaviour","synthetic":false,"types":[]}];
implementors["libp2p_ping"] = [{"text":"impl Copy for Ping","synthetic":false,"types":[]}];
implementors["libp2p_plaintext"] = [{"text":"impl Copy for PlainText1Config","synthetic":false,"types":[]}];
implementors["libp2p_pnet"] = [{"text":"impl Copy for PreSharedKey","synthetic":false,"types":[]},{"text":"impl Copy for Fingerprint","synthetic":false,"types":[]},{"text":"impl Copy for PnetConfig","synthetic":false,"types":[]}];
implementors["libp2p_request_response"] = [{"text":"impl Copy for RequestId","synthetic":false,"types":[]}];
implementors["libp2p_swarm"] = [{"text":"impl Copy for DialPeerCondition","synthetic":false,"types":[]},{"text":"impl&lt;TUpgrade:&nbsp;Copy, TInfo:&nbsp;Copy&gt; Copy for SubstreamProtocol&lt;TUpgrade, TInfo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;TConnectionUpgrade:&nbsp;Copy, TOutboundOpenInfo:&nbsp;Copy, TCustom:&nbsp;Copy, TErr:&nbsp;Copy&gt; Copy for ProtocolsHandlerEvent&lt;TConnectionUpgrade, TOutboundOpenInfo, TCustom, TErr&gt;","synthetic":false,"types":[]},{"text":"impl Copy for KeepAlive","synthetic":false,"types":[]}];
implementors["librocksdb_sys"] = [{"text":"impl Copy for __fsid_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_backup_engine_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_backup_engine_info_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_restore_options_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_cache_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_compactionfilter_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_compactionfiltercontext_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_compactionfilterfactory_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_comparator_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_dbpath_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_env_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_fifo_compaction_options_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_filelock_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_filterpolicy_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_flushoptions_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_iterator_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_logger_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_mergeoperator_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_options_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_compactoptions_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_block_based_table_options_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_cuckoo_table_options_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_randomfile_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_readoptions_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_seqfile_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_slicetransform_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_snapshot_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_writablefile_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_writebatch_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_writebatch_wi_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_writeoptions_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_universal_compaction_options_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_livefiles_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_column_family_handle_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_envoptions_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_ingestexternalfileoptions_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_sstfilewriter_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_ratelimiter_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_perfcontext_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_pinnableslice_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_transactiondb_options_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_transactiondb_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_transaction_options_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_optimistictransactiondb_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_optimistictransaction_options_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_transaction_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_checkpoint_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_wal_iterator_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_wal_readoptions_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_memory_consumers_t","synthetic":false,"types":[]},{"text":"impl Copy for rocksdb_memory_usage_t","synthetic":false,"types":[]},{"text":"impl Copy for __va_list_tag","synthetic":false,"types":[]}];
implementors["libz_sys"] = [{"text":"impl Copy for gz_header","synthetic":false,"types":[]},{"text":"impl Copy for z_stream","synthetic":false,"types":[]}];
implementors["linregress"] = [{"text":"impl Copy for RegressionDataBuilder","synthetic":false,"types":[]},{"text":"impl Copy for InvalidValueHandling","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Copy for Level","synthetic":false,"types":[]},{"text":"impl Copy for LevelFilter","synthetic":false,"types":[]}];
implementors["memory_db"] = [{"text":"impl&lt;T&gt; Copy for MemCounter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Copy for NoopTracker&lt;T&gt;","synthetic":false,"types":[]}];
implementors["memory_units"] = [{"text":"impl Copy for Bytes","synthetic":false,"types":[]},{"text":"impl Copy for Words","synthetic":false,"types":[]},{"text":"impl Copy for Pages","synthetic":false,"types":[]},{"text":"impl Copy for Words","synthetic":false,"types":[]},{"text":"impl Copy for Pages","synthetic":false,"types":[]}];
implementors["minicbor"] = [{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for Tag","synthetic":false,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Copy for CompressionStrategy","synthetic":false,"types":[]},{"text":"impl Copy for TDEFLFlush","synthetic":false,"types":[]},{"text":"impl Copy for TDEFLStatus","synthetic":false,"types":[]},{"text":"impl Copy for CompressionLevel","synthetic":false,"types":[]},{"text":"impl Copy for TINFLStatus","synthetic":false,"types":[]},{"text":"impl Copy for MZFlush","synthetic":false,"types":[]},{"text":"impl Copy for MZStatus","synthetic":false,"types":[]},{"text":"impl Copy for MZError","synthetic":false,"types":[]},{"text":"impl Copy for DataFormat","synthetic":false,"types":[]},{"text":"impl Copy for StreamResult","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl Copy for PollOpt","synthetic":false,"types":[]},{"text":"impl Copy for Ready","synthetic":false,"types":[]},{"text":"impl Copy for Event","synthetic":false,"types":[]},{"text":"impl Copy for UnixReady","synthetic":false,"types":[]},{"text":"impl Copy for Token","synthetic":false,"types":[]}];
implementors["multihash"] = [{"text":"impl&lt;'a, T:&nbsp;Copy&gt; Copy for MultihashRefGeneric&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for EncodeError","synthetic":false,"types":[]},{"text":"impl Copy for DecodeError","synthetic":false,"types":[]},{"text":"impl Copy for Code","synthetic":false,"types":[]}];
implementors["multistream_select"] = [{"text":"impl Copy for Version","synthetic":false,"types":[]}];
implementors["nalgebra"] = [{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for X&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for XY&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for XYZ&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for XYZW&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for XYZWA&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for XYZWAB&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for IJKW&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M2x2&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M2x3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M2x4&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M2x5&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M2x6&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M3x2&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M3x3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M3x4&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M3x5&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M3x6&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M4x2&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M4x3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M4x4&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M4x5&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M4x6&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M5x2&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M5x3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M5x4&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M5x5&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M5x6&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M6x2&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M6x3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M6x4&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M6x5&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M6x6&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Dynamic","synthetic":false,"types":[]},{"text":"impl Copy for U1","synthetic":false,"types":[]},{"text":"impl Copy for U0","synthetic":false,"types":[]},{"text":"impl Copy for U2","synthetic":false,"types":[]},{"text":"impl Copy for U3","synthetic":false,"types":[]},{"text":"impl Copy for U4","synthetic":false,"types":[]},{"text":"impl Copy for U5","synthetic":false,"types":[]},{"text":"impl Copy for U6","synthetic":false,"types":[]},{"text":"impl Copy for U7","synthetic":false,"types":[]},{"text":"impl Copy for U8","synthetic":false,"types":[]},{"text":"impl Copy for U9","synthetic":false,"types":[]},{"text":"impl Copy for U10","synthetic":false,"types":[]},{"text":"impl Copy for U11","synthetic":false,"types":[]},{"text":"impl Copy for U12","synthetic":false,"types":[]},{"text":"impl Copy for U13","synthetic":false,"types":[]},{"text":"impl Copy for U14","synthetic":false,"types":[]},{"text":"impl Copy for U15","synthetic":false,"types":[]},{"text":"impl Copy for U16","synthetic":false,"types":[]},{"text":"impl Copy for U17","synthetic":false,"types":[]},{"text":"impl Copy for U18","synthetic":false,"types":[]},{"text":"impl Copy for U19","synthetic":false,"types":[]},{"text":"impl Copy for U20","synthetic":false,"types":[]},{"text":"impl Copy for U21","synthetic":false,"types":[]},{"text":"impl Copy for U22","synthetic":false,"types":[]},{"text":"impl Copy for U23","synthetic":false,"types":[]},{"text":"impl Copy for U24","synthetic":false,"types":[]},{"text":"impl Copy for U25","synthetic":false,"types":[]},{"text":"impl Copy for U26","synthetic":false,"types":[]},{"text":"impl Copy for U27","synthetic":false,"types":[]},{"text":"impl Copy for U28","synthetic":false,"types":[]},{"text":"impl Copy for U29","synthetic":false,"types":[]},{"text":"impl Copy for U30","synthetic":false,"types":[]},{"text":"impl Copy for U31","synthetic":false,"types":[]},{"text":"impl Copy for U32","synthetic":false,"types":[]},{"text":"impl Copy for U33","synthetic":false,"types":[]},{"text":"impl Copy for U34","synthetic":false,"types":[]},{"text":"impl Copy for U35","synthetic":false,"types":[]},{"text":"impl Copy for U36","synthetic":false,"types":[]},{"text":"impl Copy for U37","synthetic":false,"types":[]},{"text":"impl Copy for U38","synthetic":false,"types":[]},{"text":"impl Copy for U39","synthetic":false,"types":[]},{"text":"impl Copy for U40","synthetic":false,"types":[]},{"text":"impl Copy for U41","synthetic":false,"types":[]},{"text":"impl Copy for U42","synthetic":false,"types":[]},{"text":"impl Copy for U43","synthetic":false,"types":[]},{"text":"impl Copy for U44","synthetic":false,"types":[]},{"text":"impl Copy for U45","synthetic":false,"types":[]},{"text":"impl Copy for U46","synthetic":false,"types":[]},{"text":"impl Copy for U47","synthetic":false,"types":[]},{"text":"impl Copy for U48","synthetic":false,"types":[]},{"text":"impl Copy for U49","synthetic":false,"types":[]},{"text":"impl Copy for U50","synthetic":false,"types":[]},{"text":"impl Copy for U51","synthetic":false,"types":[]},{"text":"impl Copy for U52","synthetic":false,"types":[]},{"text":"impl Copy for U53","synthetic":false,"types":[]},{"text":"impl Copy for U54","synthetic":false,"types":[]},{"text":"impl Copy for U55","synthetic":false,"types":[]},{"text":"impl Copy for U56","synthetic":false,"types":[]},{"text":"impl Copy for U57","synthetic":false,"types":[]},{"text":"impl Copy for U58","synthetic":false,"types":[]},{"text":"impl Copy for U59","synthetic":false,"types":[]},{"text":"impl Copy for U60","synthetic":false,"types":[]},{"text":"impl Copy for U61","synthetic":false,"types":[]},{"text":"impl Copy for U62","synthetic":false,"types":[]},{"text":"impl Copy for U63","synthetic":false,"types":[]},{"text":"impl Copy for U64","synthetic":false,"types":[]},{"text":"impl Copy for U65","synthetic":false,"types":[]},{"text":"impl Copy for U66","synthetic":false,"types":[]},{"text":"impl Copy for U67","synthetic":false,"types":[]},{"text":"impl Copy for U68","synthetic":false,"types":[]},{"text":"impl Copy for U69","synthetic":false,"types":[]},{"text":"impl Copy for U70","synthetic":false,"types":[]},{"text":"impl Copy for U71","synthetic":false,"types":[]},{"text":"impl Copy for U72","synthetic":false,"types":[]},{"text":"impl Copy for U73","synthetic":false,"types":[]},{"text":"impl Copy for U74","synthetic":false,"types":[]},{"text":"impl Copy for U75","synthetic":false,"types":[]},{"text":"impl Copy for U76","synthetic":false,"types":[]},{"text":"impl Copy for U77","synthetic":false,"types":[]},{"text":"impl Copy for U78","synthetic":false,"types":[]},{"text":"impl Copy for U79","synthetic":false,"types":[]},{"text":"impl Copy for U80","synthetic":false,"types":[]},{"text":"impl Copy for U81","synthetic":false,"types":[]},{"text":"impl Copy for U82","synthetic":false,"types":[]},{"text":"impl Copy for U83","synthetic":false,"types":[]},{"text":"impl Copy for U84","synthetic":false,"types":[]},{"text":"impl Copy for U85","synthetic":false,"types":[]},{"text":"impl Copy for U86","synthetic":false,"types":[]},{"text":"impl Copy for U87","synthetic":false,"types":[]},{"text":"impl Copy for U88","synthetic":false,"types":[]},{"text":"impl Copy for U89","synthetic":false,"types":[]},{"text":"impl Copy for U90","synthetic":false,"types":[]},{"text":"impl Copy for U91","synthetic":false,"types":[]},{"text":"impl Copy for U92","synthetic":false,"types":[]},{"text":"impl Copy for U93","synthetic":false,"types":[]},{"text":"impl Copy for U94","synthetic":false,"types":[]},{"text":"impl Copy for U95","synthetic":false,"types":[]},{"text":"impl Copy for U96","synthetic":false,"types":[]},{"text":"impl Copy for U97","synthetic":false,"types":[]},{"text":"impl Copy for U98","synthetic":false,"types":[]},{"text":"impl Copy for U99","synthetic":false,"types":[]},{"text":"impl Copy for U100","synthetic":false,"types":[]},{"text":"impl Copy for U101","synthetic":false,"types":[]},{"text":"impl Copy for U102","synthetic":false,"types":[]},{"text":"impl Copy for U103","synthetic":false,"types":[]},{"text":"impl Copy for U104","synthetic":false,"types":[]},{"text":"impl Copy for U105","synthetic":false,"types":[]},{"text":"impl Copy for U106","synthetic":false,"types":[]},{"text":"impl Copy for U107","synthetic":false,"types":[]},{"text":"impl Copy for U108","synthetic":false,"types":[]},{"text":"impl Copy for U109","synthetic":false,"types":[]},{"text":"impl Copy for U110","synthetic":false,"types":[]},{"text":"impl Copy for U111","synthetic":false,"types":[]},{"text":"impl Copy for U112","synthetic":false,"types":[]},{"text":"impl Copy for U113","synthetic":false,"types":[]},{"text":"impl Copy for U114","synthetic":false,"types":[]},{"text":"impl Copy for U115","synthetic":false,"types":[]},{"text":"impl Copy for U116","synthetic":false,"types":[]},{"text":"impl Copy for U117","synthetic":false,"types":[]},{"text":"impl Copy for U118","synthetic":false,"types":[]},{"text":"impl Copy for U119","synthetic":false,"types":[]},{"text":"impl Copy for U120","synthetic":false,"types":[]},{"text":"impl Copy for U121","synthetic":false,"types":[]},{"text":"impl Copy for U122","synthetic":false,"types":[]},{"text":"impl Copy for U123","synthetic":false,"types":[]},{"text":"impl Copy for U124","synthetic":false,"types":[]},{"text":"impl Copy for U125","synthetic":false,"types":[]},{"text":"impl Copy for U126","synthetic":false,"types":[]},{"text":"impl Copy for U127","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar, R:&nbsp;Copy + Dim, C:&nbsp;Copy + Dim, S:&nbsp;Copy&gt; Copy for Matrix&lt;N, R, C, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N, R, C&gt; Copy for ArrayStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: DimName,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: DimName,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Value: Mul&lt;C::Value&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Prod&lt;R::Value, C::Value&gt;: ArrayLength&lt;N&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;GenericArray&lt;N, Prod&lt;R::Value, C::Value&gt;&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Scalar, R:&nbsp;Dim, C:&nbsp;Dim, RStride:&nbsp;Dim, CStride:&nbsp;Dim&gt; Copy for SliceStorage&lt;'a, N, R, C, RStride, CStride&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Unit&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, D:&nbsp;DimName&gt; Copy for Point&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;DefaultAllocator as Allocator&lt;N, D&gt;&gt;::Buffer: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, D:&nbsp;DimName&gt; Copy for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;DefaultAllocator as Allocator&lt;N, D, D&gt;&gt;::Buffer: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField&gt; Copy for Quaternion&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar, D:&nbsp;DimName&gt; Copy for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Owned&lt;N, D&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField, D:&nbsp;DimName + Copy, R:&nbsp;Rotation&lt;Point&lt;N, D&gt;&gt; + Copy&gt; Copy for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Owned&lt;N, D&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField, D:&nbsp;DimName + Copy, R:&nbsp;Rotation&lt;Point&lt;N, D&gt;&gt; + Copy&gt; Copy for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Owned&lt;N, D&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for TGeneral","synthetic":false,"types":[]},{"text":"impl Copy for TProjective","synthetic":false,"types":[]},{"text":"impl Copy for TAffine","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField, D:&nbsp;DimNameAdd&lt;U1&gt; + Copy, C:&nbsp;TCategory&gt; Copy for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Owned&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField&gt; Copy for Orthographic3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField&gt; Copy for Perspective3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, R:&nbsp;DimMin&lt;C&gt;, C:&nbsp;Dim&gt; Copy for Bidiagonal&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DimMinimum&lt;R, C&gt;: DimSub&lt;U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt; + Allocator&lt;N, DimMinimum&lt;R, C&gt;&gt; + Allocator&lt;N, DimDiff&lt;DimMinimum&lt;R, C&gt;, U1&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixMN&lt;N, R, C&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;VectorN&lt;N, DimMinimum&lt;R, C&gt;&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;VectorN&lt;N, DimDiff&lt;DimMinimum&lt;R, C&gt;, U1&gt;&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, D:&nbsp;Dim&gt; Copy for Cholesky&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixN&lt;N, D&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, R:&nbsp;DimMin&lt;C&gt;, C:&nbsp;Dim&gt; Copy for FullPivLU&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt; + Allocator&lt;(usize, usize), DimMinimum&lt;R, C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixMN&lt;N, R, C&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;PermutationSequence&lt;DimMinimum&lt;R, C&gt;&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + ComplexField&gt; Copy for GivensRotation&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::RealField: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, D:&nbsp;DimSub&lt;U1&gt;&gt; Copy for Hessenberg&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimDiff&lt;D, U1&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixN&lt;N, D&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;VectorN&lt;N, DimDiff&lt;D, U1&gt;&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, R:&nbsp;DimMin&lt;C&gt;, C:&nbsp;Dim&gt; Copy for LU&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt; + Allocator&lt;(usize, usize), DimMinimum&lt;R, C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixMN&lt;N, R, C&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;PermutationSequence&lt;DimMinimum&lt;R, C&gt;&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Dim&gt; Copy for PermutationSequence&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;(usize, usize), D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;VectorN&lt;(usize, usize), D&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, R:&nbsp;DimMin&lt;C&gt;, C:&nbsp;Dim&gt; Copy for QR&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt; + Allocator&lt;N, DimMinimum&lt;R, C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixMN&lt;N, R, C&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;VectorN&lt;N, DimMinimum&lt;R, C&gt;&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, D:&nbsp;Dim&gt; Copy for Schur&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixN&lt;N, D&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, R:&nbsp;DimMin&lt;C&gt;, C:&nbsp;Dim&gt; Copy for SVD&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimMinimum&lt;R, C&gt;, C&gt; + Allocator&lt;N, R, DimMinimum&lt;R, C&gt;&gt; + Allocator&lt;N::RealField, DimMinimum&lt;R, C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixMN&lt;N, R, DimMinimum&lt;R, C&gt;&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixMN&lt;N, DimMinimum&lt;R, C&gt;, C&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;VectorN&lt;N::RealField, DimMinimum&lt;R, C&gt;&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, D:&nbsp;Dim&gt; Copy for SymmetricEigen&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N::RealField, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixN&lt;N, D&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;VectorN&lt;N::RealField, D&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, D:&nbsp;DimSub&lt;U1&gt;&gt; Copy for SymmetricTridiagonal&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimDiff&lt;D, U1&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixN&lt;N, D&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;VectorN&lt;N, DimDiff&lt;D, U1&gt;&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Copy for Entry","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for Errno","synthetic":false,"types":[]},{"text":"impl Copy for AtFlags","synthetic":false,"types":[]},{"text":"impl Copy for OFlag","synthetic":false,"types":[]},{"text":"impl Copy for SealFlag","synthetic":false,"types":[]},{"text":"impl Copy for FdFlag","synthetic":false,"types":[]},{"text":"impl Copy for FlockArg","synthetic":false,"types":[]},{"text":"impl Copy for SpliceFFlags","synthetic":false,"types":[]},{"text":"impl Copy for FallocateFlags","synthetic":false,"types":[]},{"text":"impl Copy for PosixFadviseAdvice","synthetic":false,"types":[]},{"text":"impl Copy for ModuleInitFlags","synthetic":false,"types":[]},{"text":"impl Copy for DeleteModuleFlags","synthetic":false,"types":[]},{"text":"impl Copy for MsFlags","synthetic":false,"types":[]},{"text":"impl Copy for MntFlags","synthetic":false,"types":[]},{"text":"impl Copy for MQ_OFlag","synthetic":false,"types":[]},{"text":"impl Copy for FdFlag","synthetic":false,"types":[]},{"text":"impl Copy for MqAttr","synthetic":false,"types":[]},{"text":"impl Copy for InterfaceFlags","synthetic":false,"types":[]},{"text":"impl Copy for PollFd","synthetic":false,"types":[]},{"text":"impl Copy for PollFlags","synthetic":false,"types":[]},{"text":"impl Copy for OpenptyResult","synthetic":false,"types":[]},{"text":"impl Copy for ForkptyResult","synthetic":false,"types":[]},{"text":"impl Copy for CloneFlags","synthetic":false,"types":[]},{"text":"impl Copy for CpuSet","synthetic":false,"types":[]},{"text":"impl Copy for AioFsyncMode","synthetic":false,"types":[]},{"text":"impl Copy for LioOpcode","synthetic":false,"types":[]},{"text":"impl Copy for LioMode","synthetic":false,"types":[]},{"text":"impl Copy for AioCancelStat","synthetic":false,"types":[]},{"text":"impl Copy for EpollFlags","synthetic":false,"types":[]},{"text":"impl Copy for EpollOp","synthetic":false,"types":[]},{"text":"impl Copy for EpollCreateFlags","synthetic":false,"types":[]},{"text":"impl Copy for EpollEvent","synthetic":false,"types":[]},{"text":"impl Copy for EfdFlags","synthetic":false,"types":[]},{"text":"impl Copy for MemFdCreateFlag","synthetic":false,"types":[]},{"text":"impl Copy for ProtFlags","synthetic":false,"types":[]},{"text":"impl Copy for MapFlags","synthetic":false,"types":[]},{"text":"impl Copy for MmapAdvise","synthetic":false,"types":[]},{"text":"impl Copy for MsFlags","synthetic":false,"types":[]},{"text":"impl Copy for MlockAllFlags","synthetic":false,"types":[]},{"text":"impl Copy for Request","synthetic":false,"types":[]},{"text":"impl Copy for Event","synthetic":false,"types":[]},{"text":"impl Copy for Options","synthetic":false,"types":[]},{"text":"impl Copy for QuotaType","synthetic":false,"types":[]},{"text":"impl Copy for QuotaFmt","synthetic":false,"types":[]},{"text":"impl Copy for QuotaValidFlags","synthetic":false,"types":[]},{"text":"impl Copy for Dqblk","synthetic":false,"types":[]},{"text":"impl Copy for RebootMode","synthetic":false,"types":[]},{"text":"impl Copy for FdSet","synthetic":false,"types":[]},{"text":"impl Copy for Signal","synthetic":false,"types":[]},{"text":"impl Copy for SignalIterator","synthetic":false,"types":[]},{"text":"impl Copy for SaFlags","synthetic":false,"types":[]},{"text":"impl Copy for SigmaskHow","synthetic":false,"types":[]},{"text":"impl Copy for SigSet","synthetic":false,"types":[]},{"text":"impl Copy for SigHandler","synthetic":false,"types":[]},{"text":"impl Copy for SigAction","synthetic":false,"types":[]},{"text":"impl Copy for SigevNotify","synthetic":false,"types":[]},{"text":"impl Copy for SigEvent","synthetic":false,"types":[]},{"text":"impl Copy for SfdFlags","synthetic":false,"types":[]},{"text":"impl Copy for AddressFamily","synthetic":false,"types":[]},{"text":"impl Copy for InetAddr","synthetic":false,"types":[]},{"text":"impl Copy for IpAddr","synthetic":false,"types":[]},{"text":"impl Copy for Ipv4Addr","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6Addr","synthetic":false,"types":[]},{"text":"impl Copy for UnixAddr","synthetic":false,"types":[]},{"text":"impl Copy for SockAddr","synthetic":false,"types":[]},{"text":"impl Copy for NetlinkAddr","synthetic":false,"types":[]},{"text":"impl Copy for AlgAddr","synthetic":false,"types":[]},{"text":"impl Copy for LinkAddr","synthetic":false,"types":[]},{"text":"impl Copy for VsockAddr","synthetic":false,"types":[]},{"text":"impl Copy for ReuseAddr","synthetic":false,"types":[]},{"text":"impl Copy for ReusePort","synthetic":false,"types":[]},{"text":"impl Copy for TcpNoDelay","synthetic":false,"types":[]},{"text":"impl Copy for Linger","synthetic":false,"types":[]},{"text":"impl Copy for IpAddMembership","synthetic":false,"types":[]},{"text":"impl Copy for IpDropMembership","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6AddMembership","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6DropMembership","synthetic":false,"types":[]},{"text":"impl Copy for IpMulticastTtl","synthetic":false,"types":[]},{"text":"impl Copy for IpMulticastLoop","synthetic":false,"types":[]},{"text":"impl Copy for ReceiveTimeout","synthetic":false,"types":[]},{"text":"impl Copy for SendTimeout","synthetic":false,"types":[]},{"text":"impl Copy for Broadcast","synthetic":false,"types":[]},{"text":"impl Copy for OobInline","synthetic":false,"types":[]},{"text":"impl Copy for SocketError","synthetic":false,"types":[]},{"text":"impl Copy for KeepAlive","synthetic":false,"types":[]},{"text":"impl Copy for PeerCredentials","synthetic":false,"types":[]},{"text":"impl Copy for TcpKeepIdle","synthetic":false,"types":[]},{"text":"impl Copy for RcvBuf","synthetic":false,"types":[]},{"text":"impl Copy for SndBuf","synthetic":false,"types":[]},{"text":"impl Copy for RcvBufForce","synthetic":false,"types":[]},{"text":"impl Copy for SndBufForce","synthetic":false,"types":[]},{"text":"impl Copy for SockType","synthetic":false,"types":[]},{"text":"impl Copy for AcceptConn","synthetic":false,"types":[]},{"text":"impl Copy for OriginalDst","synthetic":false,"types":[]},{"text":"impl Copy for ReceiveTimestamp","synthetic":false,"types":[]},{"text":"impl Copy for IpTransparent","synthetic":false,"types":[]},{"text":"impl Copy for Mark","synthetic":false,"types":[]},{"text":"impl Copy for PassCred","synthetic":false,"types":[]},{"text":"impl Copy for TcpCongestion","synthetic":false,"types":[]},{"text":"impl Copy for Ipv4PacketInfo","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6RecvPacketInfo","synthetic":false,"types":[]},{"text":"impl Copy for AlgSetAeadAuthSize","synthetic":false,"types":[]},{"text":"impl Copy for SockType","synthetic":false,"types":[]},{"text":"impl Copy for SockProtocol","synthetic":false,"types":[]},{"text":"impl Copy for SockFlag","synthetic":false,"types":[]},{"text":"impl Copy for MsgFlags","synthetic":false,"types":[]},{"text":"impl Copy for UnixCredentials","synthetic":false,"types":[]},{"text":"impl Copy for IpMembershipRequest","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6MembershipRequest","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for RecvMsg&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for CmsgIterator&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for ControlMessage&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for SockLevel","synthetic":false,"types":[]},{"text":"impl Copy for Shutdown","synthetic":false,"types":[]},{"text":"impl Copy for SFlag","synthetic":false,"types":[]},{"text":"impl Copy for Mode","synthetic":false,"types":[]},{"text":"impl Copy for FchmodatFlags","synthetic":false,"types":[]},{"text":"impl Copy for UtimensatFlags","synthetic":false,"types":[]},{"text":"impl Copy for Statfs","synthetic":false,"types":[]},{"text":"impl Copy for FsType","synthetic":false,"types":[]},{"text":"impl Copy for FsFlags","synthetic":false,"types":[]},{"text":"impl Copy for Statvfs","synthetic":false,"types":[]},{"text":"impl Copy for SysInfo","synthetic":false,"types":[]},{"text":"impl Copy for BaudRate","synthetic":false,"types":[]},{"text":"impl Copy for SetArg","synthetic":false,"types":[]},{"text":"impl Copy for FlushArg","synthetic":false,"types":[]},{"text":"impl Copy for FlowArg","synthetic":false,"types":[]},{"text":"impl Copy for SpecialCharacterIndices","synthetic":false,"types":[]},{"text":"impl Copy for InputFlags","synthetic":false,"types":[]},{"text":"impl Copy for OutputFlags","synthetic":false,"types":[]},{"text":"impl Copy for ControlFlags","synthetic":false,"types":[]},{"text":"impl Copy for LocalFlags","synthetic":false,"types":[]},{"text":"impl Copy for TimeSpec","synthetic":false,"types":[]},{"text":"impl Copy for TimeVal","synthetic":false,"types":[]},{"text":"impl Copy for RemoteIoVec","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for IoVec&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for UtsName","synthetic":false,"types":[]},{"text":"impl Copy for WaitPidFlag","synthetic":false,"types":[]},{"text":"impl Copy for WaitStatus","synthetic":false,"types":[]},{"text":"impl Copy for AddWatchFlags","synthetic":false,"types":[]},{"text":"impl Copy for InitFlags","synthetic":false,"types":[]},{"text":"impl Copy for Inotify","synthetic":false,"types":[]},{"text":"impl Copy for WatchDescriptor","synthetic":false,"types":[]},{"text":"impl Copy for UContext","synthetic":false,"types":[]},{"text":"impl Copy for Uid","synthetic":false,"types":[]},{"text":"impl Copy for Gid","synthetic":false,"types":[]},{"text":"impl Copy for Pid","synthetic":false,"types":[]},{"text":"impl Copy for ForkResult","synthetic":false,"types":[]},{"text":"impl Copy for FchownatFlags","synthetic":false,"types":[]},{"text":"impl Copy for Whence","synthetic":false,"types":[]},{"text":"impl Copy for LinkatFlags","synthetic":false,"types":[]},{"text":"impl Copy for UnlinkatFlags","synthetic":false,"types":[]},{"text":"impl Copy for PathconfVar","synthetic":false,"types":[]},{"text":"impl Copy for SysconfVar","synthetic":false,"types":[]},{"text":"impl Copy for AccessFlags","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["nohash_hasher"] = [{"text":"impl&lt;T&gt; Copy for NoHashHasher&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Copy for Sign","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Copy&gt; Copy for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ParseRatioError","synthetic":false,"types":[]}];
implementors["object"] = [{"text":"impl Copy for Architecture","synthetic":false,"types":[]},{"text":"impl Copy for AddressSize","synthetic":false,"types":[]},{"text":"impl Copy for BinaryFormat","synthetic":false,"types":[]},{"text":"impl Copy for SectionKind","synthetic":false,"types":[]},{"text":"impl Copy for SymbolKind","synthetic":false,"types":[]},{"text":"impl Copy for SymbolScope","synthetic":false,"types":[]},{"text":"impl Copy for RelocationKind","synthetic":false,"types":[]},{"text":"impl Copy for RelocationEncoding","synthetic":false,"types":[]},{"text":"impl Copy for FileFlags","synthetic":false,"types":[]},{"text":"impl Copy for SectionFlags","synthetic":false,"types":[]},{"text":"impl&lt;Section:&nbsp;Copy&gt; Copy for SymbolFlags&lt;Section&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Endianness","synthetic":false,"types":[]},{"text":"impl Copy for LittleEndian","synthetic":false,"types":[]},{"text":"impl Copy for BigEndian","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for U16Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for U32Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for U64Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for I16Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for I32Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for I64Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Copy for Bytes&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Copy for StringTable&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Copy for SectionTable&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, Elf:&nbsp;Copy + FileHeader&gt; Copy for SectionTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf::SectionHeader: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, Elf:&nbsp;Copy + FileHeader&gt; Copy for SymbolTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf::Sym: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, Mach:&nbsp;Copy + MachHeader&gt; Copy for SymbolTable&lt;'data, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach::Nlist: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for SectionIndex","synthetic":false,"types":[]},{"text":"impl Copy for SymbolIndex","synthetic":false,"types":[]},{"text":"impl Copy for SymbolSection","synthetic":false,"types":[]},{"text":"impl Copy for RelocationTarget","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Copy for CompressedData&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl Copy for CompressionFormat","synthetic":false,"types":[]},{"text":"impl Copy for StandardSegment","synthetic":false,"types":[]},{"text":"impl Copy for StandardSection","synthetic":false,"types":[]},{"text":"impl Copy for SectionId","synthetic":false,"types":[]},{"text":"impl Copy for SymbolSection","synthetic":false,"types":[]},{"text":"impl Copy for SymbolId","synthetic":false,"types":[]},{"text":"impl Copy for Mangling","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for FileHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for FileHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Ident","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SectionHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SectionHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for CompressionHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for CompressionHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Sym32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Sym64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Syminfo32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Syminfo64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Rel32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Rela32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Rel64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Rela64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for ProgramHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for ProgramHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Dyn32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Dyn64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for NoteHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for NoteHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Copy for FatHeader","synthetic":false,"types":[]},{"text":"impl Copy for FatArch32","synthetic":false,"types":[]},{"text":"impl Copy for FatArch64","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for MachHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for MachHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for LoadCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for LcStr&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SegmentCommand32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SegmentCommand64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Section32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Section64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Fvmlib&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for FvmlibCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Dylib&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for DylibCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SubFrameworkCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SubClientCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SubUmbrellaCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SubLibraryCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for PreboundDylibCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for DylinkerCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for ThreadCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for RoutinesCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for RoutinesCommand_64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SymtabCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for DysymtabCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for DylibTableOfContents&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for DylibModule32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for DylibModule64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for DylibReference&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for TwolevelHintsCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for TwolevelHint&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for PrebindCksumCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for UuidCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for RpathCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for LinkeditDataCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for EncryptionInfoCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for EncryptionInfoCommand64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for VersionMinCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for BuildVersionCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for BuildToolVersion&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for DyldInfoCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for LinkerOptionCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SymSegCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for IdentCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for FvmfileCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for EntryPointCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SourceVersionCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for DataInCodeEntry&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for NoteCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Nlist32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Nlist64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Relocation&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Copy for RelocationInfo","synthetic":false,"types":[]},{"text":"impl Copy for ScatteredRelocationInfo","synthetic":false,"types":[]},{"text":"impl Copy for ImageDosHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageOs2Header","synthetic":false,"types":[]},{"text":"impl Copy for ImageVxdHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageFileHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageDataDirectory","synthetic":false,"types":[]},{"text":"impl Copy for ImageOptionalHeader32","synthetic":false,"types":[]},{"text":"impl Copy for ImageRomOptionalHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageOptionalHeader64","synthetic":false,"types":[]},{"text":"impl Copy for ImageNtHeaders64","synthetic":false,"types":[]},{"text":"impl Copy for ImageNtHeaders32","synthetic":false,"types":[]},{"text":"impl Copy for ImageRomHeaders","synthetic":false,"types":[]},{"text":"impl Copy for Guid","synthetic":false,"types":[]},{"text":"impl Copy for AnonObjectHeader","synthetic":false,"types":[]},{"text":"impl Copy for AnonObjectHeaderV2","synthetic":false,"types":[]},{"text":"impl Copy for AnonObjectHeaderBigobj","synthetic":false,"types":[]},{"text":"impl Copy for ImageSectionHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageSymbol","synthetic":false,"types":[]},{"text":"impl Copy for ImageSymbolBytes","synthetic":false,"types":[]},{"text":"impl Copy for ImageSymbolEx","synthetic":false,"types":[]},{"text":"impl Copy for ImageSymbolExBytes","synthetic":false,"types":[]},{"text":"impl Copy for ImageAuxSymbolTokenDef","synthetic":false,"types":[]},{"text":"impl Copy for ImageAuxSymbolFunction","synthetic":false,"types":[]},{"text":"impl Copy for ImageAuxSymbolFunctionBeginEnd","synthetic":false,"types":[]},{"text":"impl Copy for ImageAuxSymbolWeak","synthetic":false,"types":[]},{"text":"impl Copy for ImageAuxSymbolSection","synthetic":false,"types":[]},{"text":"impl Copy for ImageAuxSymbolCrc","synthetic":false,"types":[]},{"text":"impl Copy for ImageRelocation","synthetic":false,"types":[]},{"text":"impl Copy for ImageLinenumber","synthetic":false,"types":[]},{"text":"impl Copy for ImageBaseRelocation","synthetic":false,"types":[]},{"text":"impl Copy for ImageArchiveMemberHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageExportDirectory","synthetic":false,"types":[]},{"text":"impl Copy for ImageImportByName","synthetic":false,"types":[]},{"text":"impl Copy for ImageTlsDirectory64","synthetic":false,"types":[]},{"text":"impl Copy for ImageTlsDirectory32","synthetic":false,"types":[]},{"text":"impl Copy for ImageImportDescriptor","synthetic":false,"types":[]},{"text":"impl Copy for ImageBoundImportDescriptor","synthetic":false,"types":[]},{"text":"impl Copy for ImageBoundForwarderRef","synthetic":false,"types":[]},{"text":"impl Copy for ImageDelayloadDescriptor","synthetic":false,"types":[]},{"text":"impl Copy for ImageResourceDirectory","synthetic":false,"types":[]},{"text":"impl Copy for ImageResourceDirectoryEntry","synthetic":false,"types":[]},{"text":"impl Copy for ImageResourceDirectoryString","synthetic":false,"types":[]},{"text":"impl Copy for ImageResourceDirStringU","synthetic":false,"types":[]},{"text":"impl Copy for ImageResourceDataEntry","synthetic":false,"types":[]},{"text":"impl Copy for ImageLoadConfigCodeIntegrity","synthetic":false,"types":[]},{"text":"impl Copy for ImageDynamicRelocationTable","synthetic":false,"types":[]},{"text":"impl Copy for ImageDynamicRelocation32","synthetic":false,"types":[]},{"text":"impl Copy for ImageDynamicRelocation64","synthetic":false,"types":[]},{"text":"impl Copy for ImageDynamicRelocation32V2","synthetic":false,"types":[]},{"text":"impl Copy for ImageDynamicRelocation64V2","synthetic":false,"types":[]},{"text":"impl Copy for ImagePrologueDynamicRelocationHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageEpilogueDynamicRelocationHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageLoadConfigDirectory32","synthetic":false,"types":[]},{"text":"impl Copy for ImageLoadConfigDirectory64","synthetic":false,"types":[]},{"text":"impl Copy for ImageHotPatchInfo","synthetic":false,"types":[]},{"text":"impl Copy for ImageHotPatchBase","synthetic":false,"types":[]},{"text":"impl Copy for ImageHotPatchHashes","synthetic":false,"types":[]},{"text":"impl Copy for ImageArmRuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Copy for ImageArm64RuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Copy for ImageAlpha64RuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Copy for ImageAlphaRuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Copy for ImageRuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Copy for ImageEnclaveConfig32","synthetic":false,"types":[]},{"text":"impl Copy for ImageEnclaveConfig64","synthetic":false,"types":[]},{"text":"impl Copy for ImageEnclaveImport","synthetic":false,"types":[]},{"text":"impl Copy for ImageDebugDirectory","synthetic":false,"types":[]},{"text":"impl Copy for ImageCoffSymbolsHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageDebugMisc","synthetic":false,"types":[]},{"text":"impl Copy for ImageFunctionEntry","synthetic":false,"types":[]},{"text":"impl Copy for ImageFunctionEntry64","synthetic":false,"types":[]},{"text":"impl Copy for ImageSeparateDebugHeader","synthetic":false,"types":[]},{"text":"impl Copy for NonPagedDebugInfo","synthetic":false,"types":[]},{"text":"impl Copy for ImageArchitectureEntry","synthetic":false,"types":[]},{"text":"impl Copy for ImportObjectHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageCor20Header","synthetic":false,"types":[]}];
implementors["pallet_aura"] = [{"text":"impl&lt;T:&nbsp;Copy + Trait&gt; Copy for Module&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_authorship"] = [{"text":"impl&lt;T:&nbsp;Copy + Trait&gt; Copy for Module&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_finality_tracker"] = [{"text":"impl&lt;T:&nbsp;Copy + Trait&gt; Copy for Module&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_grandpa"] = [{"text":"impl Copy for GrandpaTimeSlot","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Trait&gt; Copy for Module&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_randomness_collective_flip"] = [{"text":"impl&lt;T:&nbsp;Copy + Trait&gt; Copy for Module&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_session"] = [{"text":"impl&lt;T:&nbsp;Copy + Trait&gt; Copy for Module&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_timestamp"] = [{"text":"impl&lt;T:&nbsp;Copy + Trait&gt; Copy for Module&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_transaction_payment"] = [{"text":"impl&lt;T:&nbsp;Copy + Trait&gt; Copy for Module&lt;T&gt;","synthetic":false,"types":[]}];
implementors["parity_scale_codec"] = [{"text":"impl Copy for OptionBool","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Compact&lt;T&gt;","synthetic":false,"types":[]}];
implementors["parity_wasm"] = [{"text":"impl Copy for VarUint32","synthetic":false,"types":[]},{"text":"impl Copy for VarUint64","synthetic":false,"types":[]},{"text":"impl Copy for VarUint7","synthetic":false,"types":[]},{"text":"impl Copy for VarInt7","synthetic":false,"types":[]},{"text":"impl Copy for Uint8","synthetic":false,"types":[]},{"text":"impl Copy for VarInt32","synthetic":false,"types":[]},{"text":"impl Copy for VarInt64","synthetic":false,"types":[]},{"text":"impl Copy for Uint32","synthetic":false,"types":[]},{"text":"impl Copy for Uint64","synthetic":false,"types":[]},{"text":"impl Copy for VarUint1","synthetic":false,"types":[]},{"text":"impl Copy for ImportCountType","synthetic":false,"types":[]},{"text":"impl Copy for ValueType","synthetic":false,"types":[]},{"text":"impl Copy for BlockType","synthetic":false,"types":[]},{"text":"impl Copy for TableElementType","synthetic":false,"types":[]},{"text":"impl Copy for GlobalType","synthetic":false,"types":[]},{"text":"impl Copy for TableType","synthetic":false,"types":[]},{"text":"impl Copy for ResizableLimits","synthetic":false,"types":[]},{"text":"impl Copy for MemoryType","synthetic":false,"types":[]},{"text":"impl Copy for External","synthetic":false,"types":[]},{"text":"impl Copy for Internal","synthetic":false,"types":[]},{"text":"impl Copy for Func","synthetic":false,"types":[]},{"text":"impl Copy for Local","synthetic":false,"types":[]},{"text":"impl Copy for RelocationEntry","synthetic":false,"types":[]}];
implementors["parity_ws"] = [{"text":"impl Copy for OpCode","synthetic":false,"types":[]},{"text":"impl Copy for CloseCode","synthetic":false,"types":[]},{"text":"impl Copy for Settings","synthetic":false,"types":[]},{"text":"impl Copy for Builder","synthetic":false,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Copy for WaitTimeoutResult","synthetic":false,"types":[]},{"text":"impl Copy for OnceState","synthetic":false,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Copy for ParkResult","synthetic":false,"types":[]},{"text":"impl Copy for UnparkResult","synthetic":false,"types":[]},{"text":"impl Copy for RequeueOp","synthetic":false,"types":[]},{"text":"impl Copy for FilterOp","synthetic":false,"types":[]},{"text":"impl Copy for UnparkToken","synthetic":false,"types":[]},{"text":"impl Copy for ParkToken","synthetic":false,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Copy for SIMPLE_ENCODE_SET","synthetic":false,"types":[]},{"text":"impl Copy for QUERY_ENCODE_SET","synthetic":false,"types":[]},{"text":"impl Copy for DEFAULT_ENCODE_SET","synthetic":false,"types":[]},{"text":"impl Copy for PATH_SEGMENT_ENCODE_SET","synthetic":false,"types":[]},{"text":"impl Copy for USERINFO_ENCODE_SET","synthetic":false,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Copy for YesS3","synthetic":false,"types":[]},{"text":"impl Copy for NoS3","synthetic":false,"types":[]},{"text":"impl Copy for YesS4","synthetic":false,"types":[]},{"text":"impl Copy for NoS4","synthetic":false,"types":[]},{"text":"impl Copy for YesA1","synthetic":false,"types":[]},{"text":"impl Copy for NoA1","synthetic":false,"types":[]},{"text":"impl Copy for YesA2","synthetic":false,"types":[]},{"text":"impl Copy for NoA2","synthetic":false,"types":[]},{"text":"impl Copy for YesNI","synthetic":false,"types":[]},{"text":"impl Copy for NoNI","synthetic":false,"types":[]},{"text":"impl&lt;S3:&nbsp;Copy, S4:&nbsp;Copy, NI:&nbsp;Copy&gt; Copy for SseMachine&lt;S3, S4, NI&gt;","synthetic":false,"types":[]},{"text":"impl&lt;NI:&nbsp;Copy&gt; Copy for Avx2Machine&lt;NI&gt;","synthetic":false,"types":[]},{"text":"impl Copy for vec128_storage","synthetic":false,"types":[]},{"text":"impl Copy for vec256_storage","synthetic":false,"types":[]},{"text":"impl Copy for vec512_storage","synthetic":false,"types":[]}];
implementors["primitive_types"] = [{"text":"impl Copy for U128","synthetic":false,"types":[]},{"text":"impl Copy for U256","synthetic":false,"types":[]},{"text":"impl Copy for U512","synthetic":false,"types":[]},{"text":"impl Copy for H128","synthetic":false,"types":[]},{"text":"impl Copy for H160","synthetic":false,"types":[]},{"text":"impl Copy for H256","synthetic":false,"types":[]},{"text":"impl Copy for H512","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Copy for Span","synthetic":false,"types":[]},{"text":"impl Copy for Delimiter","synthetic":false,"types":[]},{"text":"impl Copy for Spacing","synthetic":false,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl Copy for SpanRange","synthetic":false,"types":[]}];
implementors["prometheus"] = [{"text":"impl Copy for MetricType","synthetic":false,"types":[]}];
implementors["prost"] = [{"text":"impl Copy for EncodeError","synthetic":false,"types":[]}];
implementors["pwasm_utils"] = [{"text":"impl Copy for Metering","synthetic":false,"types":[]},{"text":"impl Copy for InstructionType","synthetic":false,"types":[]},{"text":"impl Copy for SourceTarget","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Copy for Bernoulli","synthetic":false,"types":[]},{"text":"impl Copy for BernoulliError","synthetic":false,"types":[]},{"text":"impl Copy for Binomial","synthetic":false,"types":[]},{"text":"impl Copy for Cauchy","synthetic":false,"types":[]},{"text":"impl Copy for Exp1","synthetic":false,"types":[]},{"text":"impl Copy for Exp","synthetic":false,"types":[]},{"text":"impl Copy for Gamma","synthetic":false,"types":[]},{"text":"impl Copy for ChiSquared","synthetic":false,"types":[]},{"text":"impl Copy for FisherF","synthetic":false,"types":[]},{"text":"impl Copy for StudentT","synthetic":false,"types":[]},{"text":"impl Copy for Beta","synthetic":false,"types":[]},{"text":"impl Copy for StandardNormal","synthetic":false,"types":[]},{"text":"impl Copy for Normal","synthetic":false,"types":[]},{"text":"impl Copy for LogNormal","synthetic":false,"types":[]},{"text":"impl Copy for Pareto","synthetic":false,"types":[]},{"text":"impl Copy for Poisson","synthetic":false,"types":[]},{"text":"impl Copy for Triangular","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Copy + SampleUniform&gt; Copy for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Copy&gt; Copy for UniformInt&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Copy&gt; Copy for UniformFloat&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl Copy for UniformDuration","synthetic":false,"types":[]},{"text":"impl Copy for UnitCircle","synthetic":false,"types":[]},{"text":"impl Copy for UnitSphereSurface","synthetic":false,"types":[]},{"text":"impl Copy for Weibull","synthetic":false,"types":[]},{"text":"impl Copy for WeightedError","synthetic":false,"types":[]},{"text":"impl Copy for OpenClosed01","synthetic":false,"types":[]},{"text":"impl Copy for Open01","synthetic":false,"types":[]},{"text":"impl Copy for Standard","synthetic":false,"types":[]},{"text":"impl Copy for ThreadRng","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl Copy for OsRng","synthetic":false,"types":[]}];
implementors["raw_cpuid"] = [{"text":"impl Copy for CpuIdResult","synthetic":false,"types":[]},{"text":"impl Copy for CacheInfoType","synthetic":false,"types":[]},{"text":"impl Copy for CacheInfo","synthetic":false,"types":[]},{"text":"impl Copy for CacheParameter","synthetic":false,"types":[]}];
implementors["regalloc"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Range&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for InstIx","synthetic":false,"types":[]},{"text":"impl Copy for BlockIx","synthetic":false,"types":[]},{"text":"impl Copy for RegClass","synthetic":false,"types":[]},{"text":"impl Copy for Reg","synthetic":false,"types":[]},{"text":"impl Copy for RealReg","synthetic":false,"types":[]},{"text":"impl Copy for VirtualReg","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy + Clone + PartialEq + Eq + Hash + PartialOrd + Ord + Debug&gt; Copy for Writable&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Copy for SpillSlot","synthetic":false,"types":[]},{"text":"impl Copy for RegClassInfo","synthetic":false,"types":[]},{"text":"impl Copy for AlgorithmWithDefaults","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl&lt;'t&gt; Copy for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Copy for Match&lt;'t&gt;","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Copy for Span","synthetic":false,"types":[]},{"text":"impl Copy for Position","synthetic":false,"types":[]},{"text":"impl Copy for ClassSetBinaryOpKind","synthetic":false,"types":[]},{"text":"impl Copy for Flag","synthetic":false,"types":[]},{"text":"impl Copy for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Copy for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Copy for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Copy for Utf8Range","synthetic":false,"types":[]}];
implementors["region"] = [{"text":"impl Copy for Protection","synthetic":false,"types":[]},{"text":"impl Copy for Region","synthetic":false,"types":[]}];
implementors["ring"] = [{"text":"impl&lt;B:&nbsp;Copy&gt; Copy for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Positive&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Digest","synthetic":false,"types":[]},{"text":"impl Copy for Unspecified","synthetic":false,"types":[]},{"text":"impl Copy for KeyRejected","synthetic":false,"types":[]},{"text":"impl Copy for Algorithm","synthetic":false,"types":[]},{"text":"impl Copy for Algorithm","synthetic":false,"types":[]},{"text":"impl Copy for Tag","synthetic":false,"types":[]},{"text":"impl Copy for Algorithm","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Copy&gt; Copy for RsaPublicKeyComponents&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AsRef&lt;[u8]&gt; + Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Signature","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Copy&gt; Copy for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["rocksdb"] = [{"text":"impl Copy for DBCompressionType","synthetic":false,"types":[]},{"text":"impl Copy for DBCompactionStyle","synthetic":false,"types":[]},{"text":"impl Copy for DBRecoveryMode","synthetic":false,"types":[]},{"text":"impl Copy for UniversalCompactionStopStyle","synthetic":false,"types":[]},{"text":"impl Copy for BottommostLevelCompaction","synthetic":false,"types":[]},{"text":"impl Copy for PerfStatsLevel","synthetic":false,"types":[]},{"text":"impl Copy for PerfMetric","synthetic":false,"types":[]}];
implementors["rustc_hex"] = [{"text":"impl Copy for FromHexError","synthetic":false,"types":[]}];
implementors["rustls"] = [{"text":"impl Copy for ProtocolVersion","synthetic":false,"types":[]},{"text":"impl Copy for HashAlgorithm","synthetic":false,"types":[]},{"text":"impl Copy for SignatureAlgorithm","synthetic":false,"types":[]},{"text":"impl Copy for ClientCertificateType","synthetic":false,"types":[]},{"text":"impl Copy for Compression","synthetic":false,"types":[]},{"text":"impl Copy for ContentType","synthetic":false,"types":[]},{"text":"impl Copy for HandshakeType","synthetic":false,"types":[]},{"text":"impl Copy for AlertLevel","synthetic":false,"types":[]},{"text":"impl Copy for AlertDescription","synthetic":false,"types":[]},{"text":"impl Copy for HeartbeatMessageType","synthetic":false,"types":[]},{"text":"impl Copy for ExtensionType","synthetic":false,"types":[]},{"text":"impl Copy for ServerNameType","synthetic":false,"types":[]},{"text":"impl Copy for NamedCurve","synthetic":false,"types":[]},{"text":"impl Copy for NamedGroup","synthetic":false,"types":[]},{"text":"impl Copy for CipherSuite","synthetic":false,"types":[]},{"text":"impl Copy for ECPointFormat","synthetic":false,"types":[]},{"text":"impl Copy for HeartbeatMode","synthetic":false,"types":[]},{"text":"impl Copy for ECCurveType","synthetic":false,"types":[]},{"text":"impl Copy for SignatureScheme","synthetic":false,"types":[]},{"text":"impl Copy for PSKKeyExchangeMode","synthetic":false,"types":[]},{"text":"impl Copy for KeyUpdateRequest","synthetic":false,"types":[]},{"text":"impl Copy for CertificateStatusType","synthetic":false,"types":[]},{"text":"impl Copy for SessionID","synthetic":false,"types":[]}];
implementors["ryu"] = [{"text":"impl Copy for Buffer","synthetic":false,"types":[]}];
implementors["sc_cli"] = [{"text":"impl Copy for WasmExecutionMethod","synthetic":false,"types":[]},{"text":"impl Copy for TracingReceiver","synthetic":false,"types":[]},{"text":"impl Copy for NodeKeyType","synthetic":false,"types":[]},{"text":"impl Copy for CryptoScheme","synthetic":false,"types":[]},{"text":"impl Copy for OutputType","synthetic":false,"types":[]},{"text":"impl Copy for ExecutionStrategy","synthetic":false,"types":[]},{"text":"impl Copy for RpcMethods","synthetic":false,"types":[]},{"text":"impl Copy for Database","synthetic":false,"types":[]}];
implementors["sc_client_api"] = [{"text":"impl Copy for NewBlockState","synthetic":false,"types":[]},{"text":"impl Copy for MemorySize","synthetic":false,"types":[]}];
implementors["sc_client_db"] = [{"text":"impl Copy for KeyTracker","synthetic":false,"types":[]},{"text":"impl Copy for ReadWriteTracker","synthetic":false,"types":[]}];
implementors["sc_consensus_slots"] = [{"text":"impl Copy for SignedDuration","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for SlotDuration&lt;T&gt;","synthetic":false,"types":[]}];
implementors["sc_executor"] = [{"text":"impl Copy for WasmExecutionMethod","synthetic":false,"types":[]}];
implementors["sc_executor_common"] = [{"text":"impl Copy for SupervisorFuncIndex","synthetic":false,"types":[]}];
implementors["sc_network"] = [{"text":"impl Copy for TransactionImport","synthetic":false,"types":[]}];
implementors["sc_network_gossip"] = [{"text":"impl Copy for MessageIntent","synthetic":false,"types":[]}];
implementors["sc_peerset"] = [{"text":"impl Copy for ReputationChange","synthetic":false,"types":[]},{"text":"impl Copy for IncomingIndex","synthetic":false,"types":[]}];
implementors["sc_rpc_api"] = [{"text":"impl Copy for DenyUnsafe","synthetic":false,"types":[]}];
implementors["sc_service"] = [{"text":"impl Copy for RpcMethods","synthetic":false,"types":[]}];
implementors["schnorrkel"] = [{"text":"impl Copy for RistrettoBoth","synthetic":false,"types":[]},{"text":"impl Copy for PublicKey","synthetic":false,"types":[]},{"text":"impl Copy for Signature","synthetic":false,"types":[]},{"text":"impl Copy for VRFOutput","synthetic":false,"types":[]},{"text":"impl Copy for ChainCode","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Copy&gt; Copy for ExtendedKey&lt;K&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ECQVCertSecret","synthetic":false,"types":[]},{"text":"impl Copy for ECQVCertPublic","synthetic":false,"types":[]},{"text":"impl Copy for MultiSignatureStage","synthetic":false,"types":[]},{"text":"impl Copy for SignatureError","synthetic":false,"types":[]},{"text":"impl Copy for Commitment","synthetic":false,"types":[]},{"text":"impl Copy for Cosignature","synthetic":false,"types":[]}];
implementors["scroll"] = [{"text":"impl Copy for StrCtx","synthetic":false,"types":[]},{"text":"impl Copy for Endian","synthetic":false,"types":[]},{"text":"impl Copy for Uleb128","synthetic":false,"types":[]},{"text":"impl Copy for Sleb128","synthetic":false,"types":[]}];
implementors["sct"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["secp256k1"] = [{"text":"impl Copy for RecoveryId","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl&lt;E&gt; Copy for UnitDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for BoolDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for IsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for UsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for F32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for F64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for CharDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for StrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl Copy for IgnoredAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Unexpected&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Copy for Category","synthetic":false,"types":[]}];
implementors["sharded_slab"] = [{"text":"impl Copy for DefaultConfig","synthetic":false,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl Copy for SigId","synthetic":false,"types":[]}];
implementors["slog"] = [{"text":"impl Copy for Discard","synthetic":false,"types":[]},{"text":"impl Copy for Level","synthetic":false,"types":[]},{"text":"impl Copy for FilterLevel","synthetic":false,"types":[]}];
implementors["snow"] = [{"text":"impl Copy for HandshakePattern","synthetic":false,"types":[]},{"text":"impl Copy for HandshakeModifier","synthetic":false,"types":[]},{"text":"impl Copy for BaseChoice","synthetic":false,"types":[]},{"text":"impl Copy for DHChoice","synthetic":false,"types":[]},{"text":"impl Copy for CipherChoice","synthetic":false,"types":[]},{"text":"impl Copy for HashChoice","synthetic":false,"types":[]}];
implementors["socket2"] = [{"text":"impl Copy for Domain","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for Protocol","synthetic":false,"types":[]}];
implementors["soketto"] = [{"text":"impl Copy for OpCode","synthetic":false,"types":[]},{"text":"impl Copy for Mode","synthetic":false,"types":[]}];
implementors["sp_api"] = [{"text":"impl&lt;'a, Block:&nbsp;Copy + BlockT&gt; Copy for InitializeBlock&lt;'a, Block&gt;","synthetic":false,"types":[]}];
implementors["sp_arithmetic"] = [{"text":"impl Copy for Percent","synthetic":false,"types":[]},{"text":"impl Copy for PerU16","synthetic":false,"types":[]},{"text":"impl Copy for Permill","synthetic":false,"types":[]},{"text":"impl Copy for Perbill","synthetic":false,"types":[]},{"text":"impl Copy for Perquintill","synthetic":false,"types":[]},{"text":"impl Copy for FixedI64","synthetic":false,"types":[]},{"text":"impl Copy for FixedI128","synthetic":false,"types":[]},{"text":"impl Copy for FixedU128","synthetic":false,"types":[]},{"text":"impl Copy for Rational128","synthetic":false,"types":[]}];
implementors["sp_consensus"] = [{"text":"impl Copy for BlockOrigin","synthetic":false,"types":[]},{"text":"impl Copy for ForkChoiceStrategy","synthetic":false,"types":[]},{"text":"impl Copy for RecordProof","synthetic":false,"types":[]},{"text":"impl Copy for NoNetwork","synthetic":false,"types":[]}];
implementors["sp_core"] = [{"text":"impl Copy for DeriveJunction","synthetic":false,"types":[]},{"text":"impl Copy for PublicError","synthetic":false,"types":[]},{"text":"impl Copy for Ss58AddressFormat","synthetic":false,"types":[]},{"text":"impl Copy for ParseError","synthetic":false,"types":[]},{"text":"impl Copy for KeyTypeId","synthetic":false,"types":[]},{"text":"impl Copy for CryptoTypeId","synthetic":false,"types":[]},{"text":"impl Copy for Public","synthetic":false,"types":[]},{"text":"impl Copy for PublicError","synthetic":false,"types":[]},{"text":"impl Copy for Public","synthetic":false,"types":[]},{"text":"impl Copy for PublicError","synthetic":false,"types":[]},{"text":"impl Copy for StorageKind","synthetic":false,"types":[]},{"text":"impl Copy for HttpRequestId","synthetic":false,"types":[]},{"text":"impl Copy for HttpError","synthetic":false,"types":[]},{"text":"impl Copy for HttpRequestStatus","synthetic":false,"types":[]},{"text":"impl Copy for Timestamp","synthetic":false,"types":[]},{"text":"impl Copy for Duration","synthetic":false,"types":[]},{"text":"impl Copy for Capability","synthetic":false,"types":[]},{"text":"impl Copy for Capabilities","synthetic":false,"types":[]},{"text":"impl Copy for MissingHostFunctions","synthetic":false,"types":[]},{"text":"impl Copy for LogLevel","synthetic":false,"types":[]}];
implementors["sp_keyring"] = [{"text":"impl Copy for Keyring","synthetic":false,"types":[]},{"text":"impl Copy for Keyring","synthetic":false,"types":[]}];
implementors["sp_rpc"] = [{"text":"impl Copy for NumberOrHex","synthetic":false,"types":[]}];
implementors["sp_runtime"] = [{"text":"impl Copy for Era","synthetic":false,"types":[]},{"text":"impl&lt;Block:&nbsp;BlockT&gt; Copy for BlockId&lt;Block&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for OpaqueDigestItemId&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for InvalidTransaction","synthetic":false,"types":[]},{"text":"impl Copy for UnknownTransaction","synthetic":false,"types":[]},{"text":"impl Copy for TransactionValidityError","synthetic":false,"types":[]},{"text":"impl Copy for TransactionSource","synthetic":false,"types":[]},{"text":"impl Copy for ModuleId","synthetic":false,"types":[]},{"text":"impl Copy for DispatchError","synthetic":false,"types":[]},{"text":"impl&lt;Info:&nbsp;Copy&gt; Copy for DispatchErrorWithPostInfo&lt;Info&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Info: Eq + PartialEq + Clone + Copy + Encode + Decode + Printable,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sp_state_machine"] = [{"text":"impl Copy for ExecutionStrategy","synthetic":false,"types":[]}];
implementors["sp_storage"] = [{"text":"impl Copy for ChildType","synthetic":false,"types":[]}];
implementors["sp_wasm_interface"] = [{"text":"impl Copy for ValueType","synthetic":false,"types":[]},{"text":"impl Copy for Value","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + PointerType&gt; Copy for Pointer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ReturnValue","synthetic":false,"types":[]}];
implementors["statrs"] = [{"text":"impl Copy for Bernoulli","synthetic":false,"types":[]},{"text":"impl Copy for Beta","synthetic":false,"types":[]},{"text":"impl Copy for Binomial","synthetic":false,"types":[]},{"text":"impl Copy for Cauchy","synthetic":false,"types":[]},{"text":"impl Copy for Chi","synthetic":false,"types":[]},{"text":"impl Copy for ChiSquared","synthetic":false,"types":[]},{"text":"impl Copy for DiscreteUniform","synthetic":false,"types":[]},{"text":"impl Copy for Erlang","synthetic":false,"types":[]},{"text":"impl Copy for Exponential","synthetic":false,"types":[]},{"text":"impl Copy for FisherSnedecor","synthetic":false,"types":[]},{"text":"impl Copy for Gamma","synthetic":false,"types":[]},{"text":"impl Copy for Geometric","synthetic":false,"types":[]},{"text":"impl Copy for Hypergeometric","synthetic":false,"types":[]},{"text":"impl Copy for InverseGamma","synthetic":false,"types":[]},{"text":"impl Copy for LogNormal","synthetic":false,"types":[]},{"text":"impl Copy for Normal","synthetic":false,"types":[]},{"text":"impl Copy for Pareto","synthetic":false,"types":[]},{"text":"impl Copy for Poisson","synthetic":false,"types":[]},{"text":"impl Copy for StudentsT","synthetic":false,"types":[]},{"text":"impl Copy for Triangular","synthetic":false,"types":[]},{"text":"impl Copy for Uniform","synthetic":false,"types":[]},{"text":"impl Copy for Weibull","synthetic":false,"types":[]},{"text":"impl Copy for RankTieBreaker","synthetic":false,"types":[]}];
implementors["stream_cipher"] = [{"text":"impl Copy for LoopError","synthetic":false,"types":[]},{"text":"impl Copy for InvalidKeyNonceLength","synthetic":false,"types":[]},{"text":"impl Copy for OverflowError","synthetic":false,"types":[]}];
implementors["strum"] = [{"text":"impl Copy for ParseError","synthetic":false,"types":[]}];
implementors["substrate_bip39"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["subtle"] = [{"text":"impl Copy for Choice","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Copy for Underscore","synthetic":false,"types":[]},{"text":"impl Copy for Abstract","synthetic":false,"types":[]},{"text":"impl Copy for As","synthetic":false,"types":[]},{"text":"impl Copy for Async","synthetic":false,"types":[]},{"text":"impl Copy for Auto","synthetic":false,"types":[]},{"text":"impl Copy for Await","synthetic":false,"types":[]},{"text":"impl Copy for Become","synthetic":false,"types":[]},{"text":"impl Copy for Box","synthetic":false,"types":[]},{"text":"impl Copy for Break","synthetic":false,"types":[]},{"text":"impl Copy for Const","synthetic":false,"types":[]},{"text":"impl Copy for Continue","synthetic":false,"types":[]},{"text":"impl Copy for Crate","synthetic":false,"types":[]},{"text":"impl Copy for Default","synthetic":false,"types":[]},{"text":"impl Copy for Do","synthetic":false,"types":[]},{"text":"impl Copy for Dyn","synthetic":false,"types":[]},{"text":"impl Copy for Else","synthetic":false,"types":[]},{"text":"impl Copy for Enum","synthetic":false,"types":[]},{"text":"impl Copy for Extern","synthetic":false,"types":[]},{"text":"impl Copy for Final","synthetic":false,"types":[]},{"text":"impl Copy for Fn","synthetic":false,"types":[]},{"text":"impl Copy for For","synthetic":false,"types":[]},{"text":"impl Copy for If","synthetic":false,"types":[]},{"text":"impl Copy for Impl","synthetic":false,"types":[]},{"text":"impl Copy for In","synthetic":false,"types":[]},{"text":"impl Copy for Let","synthetic":false,"types":[]},{"text":"impl Copy for Loop","synthetic":false,"types":[]},{"text":"impl Copy for Macro","synthetic":false,"types":[]},{"text":"impl Copy for Match","synthetic":false,"types":[]},{"text":"impl Copy for Mod","synthetic":false,"types":[]},{"text":"impl Copy for Move","synthetic":false,"types":[]},{"text":"impl Copy for Mut","synthetic":false,"types":[]},{"text":"impl Copy for Override","synthetic":false,"types":[]},{"text":"impl Copy for Priv","synthetic":false,"types":[]},{"text":"impl Copy for Pub","synthetic":false,"types":[]},{"text":"impl Copy for Ref","synthetic":false,"types":[]},{"text":"impl Copy for Return","synthetic":false,"types":[]},{"text":"impl Copy for SelfType","synthetic":false,"types":[]},{"text":"impl Copy for SelfValue","synthetic":false,"types":[]},{"text":"impl Copy for Static","synthetic":false,"types":[]},{"text":"impl Copy for Struct","synthetic":false,"types":[]},{"text":"impl Copy for Super","synthetic":false,"types":[]},{"text":"impl Copy for Trait","synthetic":false,"types":[]},{"text":"impl Copy for Try","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for Typeof","synthetic":false,"types":[]},{"text":"impl Copy for Union","synthetic":false,"types":[]},{"text":"impl Copy for Unsafe","synthetic":false,"types":[]},{"text":"impl Copy for Unsized","synthetic":false,"types":[]},{"text":"impl Copy for Use","synthetic":false,"types":[]},{"text":"impl Copy for Virtual","synthetic":false,"types":[]},{"text":"impl Copy for Where","synthetic":false,"types":[]},{"text":"impl Copy for While","synthetic":false,"types":[]},{"text":"impl Copy for Yield","synthetic":false,"types":[]},{"text":"impl Copy for Add","synthetic":false,"types":[]},{"text":"impl Copy for AddEq","synthetic":false,"types":[]},{"text":"impl Copy for And","synthetic":false,"types":[]},{"text":"impl Copy for AndAnd","synthetic":false,"types":[]},{"text":"impl Copy for AndEq","synthetic":false,"types":[]},{"text":"impl Copy for At","synthetic":false,"types":[]},{"text":"impl Copy for Bang","synthetic":false,"types":[]},{"text":"impl Copy for Caret","synthetic":false,"types":[]},{"text":"impl Copy for CaretEq","synthetic":false,"types":[]},{"text":"impl Copy for Colon","synthetic":false,"types":[]},{"text":"impl Copy for Colon2","synthetic":false,"types":[]},{"text":"impl Copy for Comma","synthetic":false,"types":[]},{"text":"impl Copy for Div","synthetic":false,"types":[]},{"text":"impl Copy for DivEq","synthetic":false,"types":[]},{"text":"impl Copy for Dollar","synthetic":false,"types":[]},{"text":"impl Copy for Dot","synthetic":false,"types":[]},{"text":"impl Copy for Dot2","synthetic":false,"types":[]},{"text":"impl Copy for Dot3","synthetic":false,"types":[]},{"text":"impl Copy for DotDotEq","synthetic":false,"types":[]},{"text":"impl Copy for Eq","synthetic":false,"types":[]},{"text":"impl Copy for EqEq","synthetic":false,"types":[]},{"text":"impl Copy for Ge","synthetic":false,"types":[]},{"text":"impl Copy for Gt","synthetic":false,"types":[]},{"text":"impl Copy for Le","synthetic":false,"types":[]},{"text":"impl Copy for Lt","synthetic":false,"types":[]},{"text":"impl Copy for MulEq","synthetic":false,"types":[]},{"text":"impl Copy for Ne","synthetic":false,"types":[]},{"text":"impl Copy for Or","synthetic":false,"types":[]},{"text":"impl Copy for OrEq","synthetic":false,"types":[]},{"text":"impl Copy for OrOr","synthetic":false,"types":[]},{"text":"impl Copy for Pound","synthetic":false,"types":[]},{"text":"impl Copy for Question","synthetic":false,"types":[]},{"text":"impl Copy for RArrow","synthetic":false,"types":[]},{"text":"impl Copy for LArrow","synthetic":false,"types":[]},{"text":"impl Copy for Rem","synthetic":false,"types":[]},{"text":"impl Copy for RemEq","synthetic":false,"types":[]},{"text":"impl Copy for FatArrow","synthetic":false,"types":[]},{"text":"impl Copy for Semi","synthetic":false,"types":[]},{"text":"impl Copy for Shl","synthetic":false,"types":[]},{"text":"impl Copy for ShlEq","synthetic":false,"types":[]},{"text":"impl Copy for Shr","synthetic":false,"types":[]},{"text":"impl Copy for ShrEq","synthetic":false,"types":[]},{"text":"impl Copy for Star","synthetic":false,"types":[]},{"text":"impl Copy for Sub","synthetic":false,"types":[]},{"text":"impl Copy for SubEq","synthetic":false,"types":[]},{"text":"impl Copy for Tilde","synthetic":false,"types":[]},{"text":"impl Copy for Brace","synthetic":false,"types":[]},{"text":"impl Copy for Bracket","synthetic":false,"types":[]},{"text":"impl Copy for Paren","synthetic":false,"types":[]},{"text":"impl Copy for Group","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Cursor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for AttrStyle","synthetic":false,"types":[]},{"text":"impl Copy for BinOp","synthetic":false,"types":[]},{"text":"impl Copy for RangeLimits","synthetic":false,"types":[]},{"text":"impl Copy for TraitBoundModifier","synthetic":false,"types":[]},{"text":"impl Copy for UnOp","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Copy for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]}];
implementors["synstructure"] = [{"text":"impl Copy for AddBounds","synthetic":false,"types":[]},{"text":"impl Copy for BindStyle","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for VariantAst&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["target_lexicon"] = [{"text":"impl Copy for Architecture","synthetic":false,"types":[]},{"text":"impl Copy for ArmArchitecture","synthetic":false,"types":[]},{"text":"impl Copy for Aarch64Architecture","synthetic":false,"types":[]},{"text":"impl Copy for OperatingSystem","synthetic":false,"types":[]},{"text":"impl Copy for Environment","synthetic":false,"types":[]},{"text":"impl Copy for BinaryFormat","synthetic":false,"types":[]},{"text":"impl Copy for Endianness","synthetic":false,"types":[]},{"text":"impl Copy for PointerWidth","synthetic":false,"types":[]},{"text":"impl Copy for CallingConvention","synthetic":false,"types":[]}];
implementors["termcolor"] = [{"text":"impl Copy for ColorChoice","synthetic":false,"types":[]},{"text":"impl Copy for Color","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Copy for Duration","synthetic":false,"types":[]},{"text":"impl Copy for OutOfRangeError","synthetic":false,"types":[]},{"text":"impl Copy for Timespec","synthetic":false,"types":[]},{"text":"impl Copy for PreciseTime","synthetic":false,"types":[]},{"text":"impl Copy for SteadyTime","synthetic":false,"types":[]},{"text":"impl Copy for Tm","synthetic":false,"types":[]},{"text":"impl Copy for ParseError","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Copy + Array&gt; Copy for ArrayVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl Copy for Builder","synthetic":false,"types":[]}];
implementors["tokio_codec"] = [{"text":"impl Copy for BytesCodec","synthetic":false,"types":[]}];
implementors["tokio_io"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for AllowStdIo&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tokio_uds"] = [{"text":"impl Copy for UCred","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Copy for BytesCodec","synthetic":false,"types":[]},{"text":"impl Copy for Builder","synthetic":false,"types":[]}];
implementors["tracing_core"] = [{"text":"impl Copy for Level","synthetic":false,"types":[]},{"text":"impl Copy for LevelFilter","synthetic":false,"types":[]}];
implementors["tracing_subscriber"] = [{"text":"impl Copy for Json","synthetic":false,"types":[]},{"text":"impl Copy for Compact","synthetic":false,"types":[]},{"text":"impl Copy for Full","synthetic":false,"types":[]},{"text":"impl Copy for SystemTime","synthetic":false,"types":[]},{"text":"impl Copy for Uptime","synthetic":false,"types":[]}];
implementors["trie_db"] = [{"text":"impl&lt;'a&gt; Copy for NodeHandle&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;HO:&nbsp;Copy&gt; Copy for ChildReference&lt;HO&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for NibbleSlice&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["twox_hash"] = [{"text":"impl Copy for XxHash64","synthetic":false,"types":[]},{"text":"impl Copy for XxHash32","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl Copy for B0","synthetic":false,"types":[]},{"text":"impl Copy for B1","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Copy + Unsigned + NonZero&gt; Copy for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Copy + Unsigned + NonZero&gt; Copy for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Z0","synthetic":false,"types":[]},{"text":"impl Copy for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Copy, B:&nbsp;Copy&gt; Copy for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Copy, A:&nbsp;Copy&gt; Copy for TArr&lt;V, A&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Greater","synthetic":false,"types":[]},{"text":"impl Copy for Less","synthetic":false,"types":[]},{"text":"impl Copy for Equal","synthetic":false,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S:&nbsp;Copy&gt; Copy for UniCase&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Copy&gt; Copy for Ascii&lt;S&gt;","synthetic":false,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Copy for Level","synthetic":false,"types":[]},{"text":"impl Copy for BidiClass","synthetic":false,"types":[]}];
implementors["universal_hash"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["untrusted"] = [{"text":"impl&lt;'a&gt; Copy for Input&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for EndOfInput","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl Copy for ParseError","synthetic":false,"types":[]},{"text":"impl Copy for SyntaxViolation","synthetic":false,"types":[]},{"text":"impl Copy for Position","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Parse&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for ParseOptions&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["void"] = [{"text":"impl Copy for Void","synthetic":false,"types":[]}];
implementors["wasm_bindgen"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Clamped&lt;T&gt;","synthetic":false,"types":[]}];
implementors["wasm_bindgen_backend"] = [{"text":"impl Copy for TypeKind","synthetic":false,"types":[]},{"text":"impl Copy for TypeLocation","synthetic":false,"types":[]}];
implementors["wasmi"] = [{"text":"impl Copy for F32","synthetic":false,"types":[]},{"text":"impl Copy for F64","synthetic":false,"types":[]},{"text":"impl Copy for ValueType","synthetic":false,"types":[]},{"text":"impl Copy for RuntimeValue","synthetic":false,"types":[]}];
implementors["wasmi_validation"] = [{"text":"impl Copy for StartedWith","synthetic":false,"types":[]},{"text":"impl Copy for StackValueType","synthetic":false,"types":[]}];
implementors["wasmparser"] = [{"text":"impl Copy for Range","synthetic":false,"types":[]},{"text":"impl Copy for OperatorValidatorConfig","synthetic":false,"types":[]},{"text":"impl Copy for ElemSectionEntryTable","synthetic":false,"types":[]},{"text":"impl Copy for ParserInput","synthetic":false,"types":[]},{"text":"impl Copy for CustomSectionKind","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for SectionCode&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for TypeOrFuncType","synthetic":false,"types":[]},{"text":"impl Copy for ExternalKind","synthetic":false,"types":[]},{"text":"impl Copy for ResizableLimits","synthetic":false,"types":[]},{"text":"impl Copy for TableType","synthetic":false,"types":[]},{"text":"impl Copy for MemoryType","synthetic":false,"types":[]},{"text":"impl Copy for GlobalType","synthetic":false,"types":[]},{"text":"impl Copy for ImportSectionEntryType","synthetic":false,"types":[]},{"text":"impl Copy for MemoryImmediate","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Naming&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for NameType","synthetic":false,"types":[]},{"text":"impl Copy for LinkingType","synthetic":false,"types":[]},{"text":"impl Copy for RelocType","synthetic":false,"types":[]},{"text":"impl Copy for Ieee32","synthetic":false,"types":[]},{"text":"impl Copy for Ieee64","synthetic":false,"types":[]},{"text":"impl Copy for V128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Data&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for DataKind&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for ElementItems&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Export&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Global&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Import&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for InitExpr&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Name&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for ProducersFieldValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for ProducersField&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Reloc","synthetic":false,"types":[]},{"text":"impl Copy for ValidatingParserConfig","synthetic":false,"types":[]}];
implementors["wasmtime"] = [{"text":"impl Copy for ProfilingStrategy","synthetic":false,"types":[]},{"text":"impl Copy for Mutability","synthetic":false,"types":[]}];
implementors["wasmtime_environ"] = [{"text":"impl Copy for RelocationTarget","synthetic":false,"types":[]},{"text":"impl Copy for BuiltinFunctionIndex","synthetic":false,"types":[]},{"text":"impl Copy for TargetSharedSignatureIndex","synthetic":false,"types":[]}];
implementors["wasmtime_jit"] = [{"text":"impl Copy for CompilationStrategy","synthetic":false,"types":[]}];
implementors["wasmtime_profiling"] = [{"text":"impl Copy for NullProfilerAgent","synthetic":false,"types":[]}];
implementors["wasmtime_runtime"] = [{"text":"impl Copy for VMFunctionImport","synthetic":false,"types":[]},{"text":"impl Copy for VMTableImport","synthetic":false,"types":[]},{"text":"impl Copy for VMMemoryImport","synthetic":false,"types":[]},{"text":"impl Copy for VMGlobalImport","synthetic":false,"types":[]},{"text":"impl Copy for VMMemoryDefinition","synthetic":false,"types":[]},{"text":"impl Copy for VMTableDefinition","synthetic":false,"types":[]},{"text":"impl Copy for VMGlobalDefinition","synthetic":false,"types":[]},{"text":"impl Copy for VMSharedSignatureIndex","synthetic":false,"types":[]},{"text":"impl Copy for VMInvokeArgument","synthetic":false,"types":[]}];
implementors["wast"] = [{"text":"impl Copy for Span","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Id&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Index&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for NameAnnotation&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for CustomPlace","synthetic":false,"types":[]},{"text":"impl Copy for CustomPlaceAnchor","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for InlineImport&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for ValType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for HeapType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for RefType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for StorageType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for GlobalType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Limits","synthetic":false,"types":[]},{"text":"impl Copy for Limits64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for TableType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for MemoryType","synthetic":false,"types":[]},{"text":"impl Copy for SignToken","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Parser&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Cursor&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["webpki"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for DNSNameRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for InvalidDNSNameError","synthetic":false,"types":[]},{"text":"impl Copy for Time","synthetic":false,"types":[]}];
implementors["x25519_dalek"] = [{"text":"impl Copy for PublicKey","synthetic":false,"types":[]}];
implementors["yamux"] = [{"text":"impl Copy for StreamId","synthetic":false,"types":[]},{"text":"impl Copy for Mode","synthetic":false,"types":[]},{"text":"impl Copy for WindowUpdateMode","synthetic":false,"types":[]}];
implementors["zstd_safe"] = [{"text":"impl Copy for FrameFormat","synthetic":false,"types":[]},{"text":"impl Copy for CParameter","synthetic":false,"types":[]}];
implementors["zstd_sys"] = [{"text":"impl Copy for ZSTD_CCtx_s","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_DCtx_s","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_strategy","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_cParameter","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_bounds","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_ResetDirective","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_dParameter","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_inBuffer_s","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_outBuffer_s","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_EndDirective","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_CDict_s","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_DDict_s","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_CCtx_params_s","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_Sequence","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_compressionParameters","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_frameParameters","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_parameters","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_dictContentType_e","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_dictLoadMethod_e","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_format_e","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_dictAttachPref_e","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_literalCompressionMode_e","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_customMem","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_frameProgression","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_frameType_e","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_frameHeader","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_nextInputType_e","synthetic":false,"types":[]},{"text":"impl Copy for ZDICT_params_t","synthetic":false,"types":[]},{"text":"impl Copy for ZSTDMT_CCtx_s","synthetic":false,"types":[]},{"text":"impl Copy for ZSTDMT_parameter","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()