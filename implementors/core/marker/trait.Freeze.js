(function() {var implementors = {};
implementors["addr2line"] = [{"text":"impl&lt;R&gt; Freeze for Context&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, R&gt; Freeze for FrameIter&lt;'ctx, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, R&gt; Freeze for Frame&lt;'ctx, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for FunctionName&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Location&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["adler"] = [{"text":"impl Freeze for Adler32","synthetic":true,"types":[]}];
implementors["aead"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'msg, 'aad&gt; Freeze for Payload&lt;'msg, 'aad&gt;","synthetic":true,"types":[]}];
implementors["aes_gcm"] = [{"text":"impl&lt;Aes, NonceSize&gt; Freeze for AesGcm&lt;Aes, NonceSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Aes: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["aes_soft"] = [{"text":"impl Freeze for Aes128","synthetic":true,"types":[]},{"text":"impl Freeze for Aes192","synthetic":true,"types":[]},{"text":"impl Freeze for Aes256","synthetic":true,"types":[]}];
implementors["ahash"] = [{"text":"impl Freeze for AHasher","synthetic":true,"types":[]},{"text":"impl Freeze for ABuildHasher","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Freeze for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Freeze for FindIter&lt;'a, 'b, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Freeze for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Freeze for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Match","synthetic":true,"types":[]},{"text":"impl Freeze for MatchKind","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Freeze for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Searcher","synthetic":true,"types":[]},{"text":"impl Freeze for MatchKind","synthetic":true,"types":[]}];
implementors["alga"] = [{"text":"impl&lt;O&gt; Freeze for Id&lt;O&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Additive","synthetic":true,"types":[]},{"text":"impl Freeze for Multiplicative","synthetic":true,"types":[]}];
implementors["ansi_term"] = [{"text":"impl Freeze for Prefix","synthetic":true,"types":[]},{"text":"impl Freeze for Infix","synthetic":true,"types":[]},{"text":"impl Freeze for Suffix","synthetic":true,"types":[]},{"text":"impl Freeze for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Freeze for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Freeze for ANSIGenericStrings&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Colour","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["approx"] = [{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; Freeze for AbsDiff&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; Freeze for Relative&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; Freeze for Ulps&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["arc_swap"] = [{"text":"impl&lt;'l, T&gt; Freeze for Guard&lt;'l, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&nbsp;=&nbsp;Global&gt; !Freeze for ArcSwapAny&lt;T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DirectDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Freeze for DynGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; Freeze for MapGuard&lt;G, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; Freeze for Map&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ConstantDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Constant&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; Freeze for Cache&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; Freeze for MapCache&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Shard","synthetic":true,"types":[]},{"text":"impl Freeze for Global","synthetic":true,"types":[]},{"text":"impl !Freeze for PrivateUnsharded","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for PrivateSharded&lt;S&gt;","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Freeze for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for Drain&lt;'a, A&gt;","synthetic":true,"types":[]}];
implementors["asn1_der"] = [{"text":"impl Freeze for DerObject","synthetic":true,"types":[]},{"text":"impl Freeze for DerLength","synthetic":true,"types":[]},{"text":"impl Freeze for DerValue","synthetic":true,"types":[]},{"text":"impl Freeze for DerTag","synthetic":true,"types":[]},{"text":"impl Freeze for Asn1DerError","synthetic":true,"types":[]}];
implementors["async_channel"] = [{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]}];
implementors["async_executor"] = [{"text":"impl&lt;'a&gt; !Freeze for Executor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for LocalExecutor&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["async_global_executor"] = [{"text":"impl Freeze for GlobalExecutorConfig","synthetic":true,"types":[]}];
implementors["async_io"] = [{"text":"impl Freeze for Timer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Async&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["async_mutex"] = [{"text":"impl&lt;T&gt; !Freeze for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Freeze for MutexGuardArc&lt;T&gt;","synthetic":true,"types":[]}];
implementors["async_std"] = [{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Task","synthetic":true,"types":[]},{"text":"impl Freeze for TaskId","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for JoinHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AccessError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TimeoutError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for FromFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for FromIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for RepeatWith&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U&gt; Freeze for Chain&lt;S, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Cloned&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Copied&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Freeze for Filter&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, St, F&gt; Freeze for Scan&lt;S, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Freeze for SkipWhile&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for StepBy&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Freeze for TakeWhile&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, R&gt; Freeze for Merge&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Stream&gt;::Item as IntoStream&gt;::IntoStream: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F&gt; Freeze for FlatMap&lt;S, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TimeoutError","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Timeout&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Interval","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Pending&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; Freeze for Successors&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for IntoInnerError&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Empty","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Bytes&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Repeat","synthetic":true,"types":[]},{"text":"impl Freeze for Sink","synthetic":true,"types":[]},{"text":"impl !Freeze for Stderr","synthetic":true,"types":[]},{"text":"impl !Freeze for Stdin","synthetic":true,"types":[]},{"text":"impl !Freeze for Stdout","synthetic":true,"types":[]},{"text":"impl Freeze for UnixDatagram","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UnixListener","synthetic":true,"types":[]},{"text":"impl Freeze for UnixStream","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for RwLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Barrier","synthetic":true,"types":[]},{"text":"impl Freeze for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RecvError","synthetic":true,"types":[]},{"text":"impl !Freeze for Condvar","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DirBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for DirEntry","synthetic":true,"types":[]},{"text":"impl Freeze for File","synthetic":true,"types":[]},{"text":"impl Freeze for OpenOptions","synthetic":true,"types":[]},{"text":"impl Freeze for ReadDir","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Ancestors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Components&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Path","synthetic":true,"types":[]},{"text":"impl Freeze for PathBuf","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TcpListener","synthetic":true,"types":[]},{"text":"impl Freeze for TcpStream","synthetic":true,"types":[]},{"text":"impl Freeze for UdpSocket","synthetic":true,"types":[]}];
implementors["async_task"] = [{"text":"impl Freeze for Runnable","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Task&lt;T&gt;","synthetic":true,"types":[]}];
implementors["async_tls"] = [{"text":"impl&lt;IO&gt; Freeze for Accept&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TlsAcceptor","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Freeze for Connect&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TlsConnector","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Freeze for TlsStream&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Freeze for TlsStream&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["atomic"] = [{"text":"impl&lt;T&gt; !Freeze for Atomic&lt;T&gt;","synthetic":true,"types":[]}];
implementors["atomic_waker"] = [{"text":"impl !Freeze for AtomicWaker","synthetic":true,"types":[]}];
implementors["atty"] = [{"text":"impl Freeze for Stream","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl Freeze for Frame","synthetic":true,"types":[]},{"text":"impl Freeze for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; Freeze for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Backtrace","synthetic":true,"types":[]},{"text":"impl Freeze for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl Freeze for BacktraceSymbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PrintFmt","synthetic":true,"types":[]}];
implementors["base58"] = [{"text":"impl Freeze for FromBase58Error","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for DecodeError","synthetic":true,"types":[]},{"text":"impl Freeze for CharacterSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Freeze for EncoderWriter&lt;'a, W&gt;","synthetic":true,"types":[]}];
implementors["bincode"] = [{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl&lt;W, O&gt; Freeze for Serializer&lt;W, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for BigEndian","synthetic":true,"types":[]},{"text":"impl Freeze for LittleEndian","synthetic":true,"types":[]},{"text":"impl Freeze for NativeEndian","synthetic":true,"types":[]},{"text":"impl Freeze for FixintEncoding","synthetic":true,"types":[]},{"text":"impl Freeze for VarintEncoding","synthetic":true,"types":[]},{"text":"impl Freeze for Bounded","synthetic":true,"types":[]},{"text":"impl Freeze for Infinite","synthetic":true,"types":[]},{"text":"impl Freeze for AllowTrailing","synthetic":true,"types":[]},{"text":"impl Freeze for RejectTrailing","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultOptions","synthetic":true,"types":[]},{"text":"impl&lt;O, L&gt; Freeze for WithOtherLimit&lt;O, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, E&gt; Freeze for WithOtherEndian&lt;O, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, I&gt; Freeze for WithOtherIntEncoding&lt;O, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; Freeze for WithOtherTrailing&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, O&gt; Freeze for Deserializer&lt;R, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'storage&gt; Freeze for SliceReader&lt;'storage&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for IoReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bip39"] = [{"text":"impl Freeze for Mnemonic","synthetic":true,"types":[]},{"text":"impl Freeze for Seed","synthetic":true,"types":[]},{"text":"impl Freeze for Language","synthetic":true,"types":[]},{"text":"impl Freeze for MnemonicType","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]}];
implementors["bitvec"] = [{"text":"impl&lt;T&gt; Freeze for BitIdx&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BitPos&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BitMask&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Msb0","synthetic":true,"types":[]},{"text":"impl Freeze for Lsb0","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; Freeze for BitSlice&lt;O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for Iter&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for IterMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for Chunks&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for ChunksExact&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for ChunksExactMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for ChunksMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for RChunks&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for RChunksExact&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for RChunksExactMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for RChunksMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; Freeze for Split&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; Freeze for SplitMut&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; Freeze for RSplit&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; Freeze for RSplitMut&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; Freeze for SplitN&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; Freeze for SplitNMut&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; Freeze for RSplitN&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; Freeze for RSplitNMut&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for Windows&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for BitMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; Freeze for BitBox&lt;O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; Freeze for IntoIter&lt;O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; Freeze for BitVec&lt;O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for Drain&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; Freeze for IntoIter&lt;O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, I&gt; Freeze for Splice&lt;'a, O, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["blake2"] = [{"text":"impl Freeze for Blake2b","synthetic":true,"types":[]},{"text":"impl Freeze for VarBlake2b","synthetic":true,"types":[]},{"text":"impl Freeze for Blake2s","synthetic":true,"types":[]},{"text":"impl Freeze for VarBlake2s","synthetic":true,"types":[]}];
implementors["blake2_rfc"] = [{"text":"impl Freeze for Blake2bResult","synthetic":true,"types":[]},{"text":"impl Freeze for Blake2b","synthetic":true,"types":[]},{"text":"impl Freeze for Blake2sResult","synthetic":true,"types":[]},{"text":"impl Freeze for Blake2s","synthetic":true,"types":[]}];
implementors["blake2b_simd"] = [{"text":"impl Freeze for Params","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for Hash","synthetic":true,"types":[]},{"text":"impl Freeze for Params","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for HashManyJob&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["blake2s_simd"] = [{"text":"impl Freeze for Params","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for Hash","synthetic":true,"types":[]},{"text":"impl Freeze for Params","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for HashManyJob&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize&gt; Freeze for BlockBuffer&lt;BlockSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["block_cipher"] = [{"text":"impl Freeze for InvalidKeyLength","synthetic":true,"types":[]}];
implementors["block_padding"] = [{"text":"impl Freeze for PadError","synthetic":true,"types":[]},{"text":"impl Freeze for UnpadError","synthetic":true,"types":[]},{"text":"impl Freeze for ZeroPadding","synthetic":true,"types":[]},{"text":"impl Freeze for Pkcs7","synthetic":true,"types":[]},{"text":"impl Freeze for AnsiX923","synthetic":true,"types":[]},{"text":"impl Freeze for Iso7816","synthetic":true,"types":[]},{"text":"impl Freeze for NoPadding","synthetic":true,"types":[]}];
implementors["blocking"] = [{"text":"impl&lt;T&gt; Freeze for Unblock&lt;T&gt;","synthetic":true,"types":[]}];
implementors["bs58"] = [{"text":"impl Freeze for Alphabet","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for DecodeBuilder&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for EncodeBuilder&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["bstr"] = [{"text":"impl Freeze for BStr","synthetic":true,"types":[]},{"text":"impl Freeze for BString","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Bytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; Freeze for FieldsWith&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Find&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FindReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Finder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FinderReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Lines&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LinesWithTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Split&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SplitN&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SplitNReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SplitReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DrainBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CharIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Chars&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8Chunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8Chunks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Error","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for ByteLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for ByteRecords&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bumpalo"] = [{"text":"impl !Freeze for Bump","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ChunkIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["byte_slice_cast"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Freeze for BigEndian","synthetic":true,"types":[]},{"text":"impl Freeze for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl !Freeze for Bytes","synthetic":true,"types":[]},{"text":"impl !Freeze for BytesMut","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["c_linked_list"] = [{"text":"impl&lt;T, N&gt; Freeze for CLinkedListMut&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N&gt; Freeze for CLinkedListMutIter&lt;'a, T, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N&gt; Freeze for CLinkedListMutIterMut&lt;'a, T, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; Freeze for CLinkedListConst&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N&gt; Freeze for CLinkedListConstIter&lt;'a, T, N&gt;","synthetic":true,"types":[]}];
implementors["cache_padded"] = [{"text":"impl&lt;T&gt; Freeze for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["chacha20"] = [{"text":"impl&lt;R&gt; Freeze for Cipher&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for XChaCha20","synthetic":true,"types":[]}];
implementors["chacha20poly1305"] = [{"text":"impl Freeze for XChaCha20Poly1305","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for ChaChaPoly1305&lt;C&gt;","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;Tz&gt; Freeze for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; Freeze for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl Freeze for ParseMonthError","synthetic":true,"types":[]},{"text":"impl Freeze for SecondsFormat","synthetic":true,"types":[]},{"text":"impl Freeze for RoundingError","synthetic":true,"types":[]},{"text":"impl Freeze for Weekday","synthetic":true,"types":[]},{"text":"impl Freeze for Month","synthetic":true,"types":[]},{"text":"impl Freeze for FixedOffset","synthetic":true,"types":[]},{"text":"impl Freeze for Local","synthetic":true,"types":[]},{"text":"impl Freeze for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NaiveDate","synthetic":true,"types":[]},{"text":"impl Freeze for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl Freeze for IsoWeek","synthetic":true,"types":[]},{"text":"impl Freeze for NaiveTime","synthetic":true,"types":[]},{"text":"impl Freeze for Parsed","synthetic":true,"types":[]},{"text":"impl Freeze for InternalNumeric","synthetic":true,"types":[]},{"text":"impl Freeze for InternalFixed","synthetic":true,"types":[]},{"text":"impl Freeze for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Pad","synthetic":true,"types":[]},{"text":"impl Freeze for Numeric","synthetic":true,"types":[]},{"text":"impl Freeze for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["clap"] = [{"text":"impl&lt;'a, 'b&gt; !Freeze for App&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for Arg&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ArgGroup&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ArgMatches&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OsValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SubCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for AppSettings","synthetic":true,"types":[]},{"text":"impl Freeze for ArgSettings","synthetic":true,"types":[]},{"text":"impl Freeze for Shell","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]}];
implementors["concurrent_queue"] = [{"text":"impl&lt;T&gt; !Freeze for ConcurrentQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cpuid_bool"] = [{"text":"impl !Freeze for LazyBool","synthetic":true,"types":[]}];
implementors["cranelift_bforest"] = [{"text":"impl&lt;K, V&gt; Freeze for Map&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, C&gt; Freeze for MapCursor&lt;'a, K, V, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for MapForest&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for MapIter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for Set&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, C&gt; Freeze for SetCursor&lt;'a, K, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for SetForest&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for SetIter&lt;'a, K&gt;","synthetic":true,"types":[]}];
implementors["cranelift_codegen"] = [{"text":"impl Freeze for Context","synthetic":true,"types":[]},{"text":"impl Freeze for ValueLocRange","synthetic":true,"types":[]},{"text":"impl Freeze for CodegenError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MemoryCodeSink&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NullRelocSink","synthetic":true,"types":[]},{"text":"impl Freeze for NullStackmapSink","synthetic":true,"types":[]},{"text":"impl Freeze for NullTrapSink","synthetic":true,"types":[]},{"text":"impl Freeze for Stackmap","synthetic":true,"types":[]},{"text":"impl Freeze for RegDiversions","synthetic":true,"types":[]},{"text":"impl Freeze for CodeInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Reloc","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CFGPrinter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Freeze for FuncCursor&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Freeze for EncCursor&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CursorPosition","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for DisplayList&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DominatorTree","synthetic":true,"types":[]},{"text":"impl Freeze for DominatorTreePreorder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ChildIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BlockPredecessor","synthetic":true,"types":[]},{"text":"impl Freeze for ControlFlowGraph","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PredIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f, IIB&gt; Freeze for InsertBuilder&lt;'f, IIB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IIB: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Freeze for ReplaceBuilder&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AbiParam","synthetic":true,"types":[]},{"text":"impl Freeze for ExtFuncData","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for HeapData","synthetic":true,"types":[]},{"text":"impl Freeze for MemFlags","synthetic":true,"types":[]},{"text":"impl Freeze for ProgramPoint","synthetic":true,"types":[]},{"text":"impl Freeze for SourceLoc","synthetic":true,"types":[]},{"text":"impl Freeze for TableData","synthetic":true,"types":[]},{"text":"impl Freeze for ValueLabel","synthetic":true,"types":[]},{"text":"impl Freeze for ValueLabelStart","synthetic":true,"types":[]},{"text":"impl Freeze for ArgumentExtension","synthetic":true,"types":[]},{"text":"impl Freeze for ArgumentPurpose","synthetic":true,"types":[]},{"text":"impl Freeze for ExternalName","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalValueData","synthetic":true,"types":[]},{"text":"impl Freeze for HeapStyle","synthetic":true,"types":[]},{"text":"impl Freeze for LibCall","synthetic":true,"types":[]},{"text":"impl Freeze for ExpandedProgramPoint","synthetic":true,"types":[]},{"text":"impl Freeze for TrapCode","synthetic":true,"types":[]},{"text":"impl Freeze for ArgumentLoc","synthetic":true,"types":[]},{"text":"impl Freeze for ValueLoc","synthetic":true,"types":[]},{"text":"impl Freeze for ValueLabelAssignments","synthetic":true,"types":[]},{"text":"impl Freeze for ConstantData","synthetic":true,"types":[]},{"text":"impl Freeze for ConstantPoolEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ConstantPool","synthetic":true,"types":[]},{"text":"impl Freeze for DataFlowGraph","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DisplayInst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ValueDef","synthetic":true,"types":[]},{"text":"impl Freeze for Block","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl Freeze for Inst","synthetic":true,"types":[]},{"text":"impl Freeze for StackSlot","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalValue","synthetic":true,"types":[]},{"text":"impl Freeze for Constant","synthetic":true,"types":[]},{"text":"impl Freeze for Immediate","synthetic":true,"types":[]},{"text":"impl Freeze for JumpTable","synthetic":true,"types":[]},{"text":"impl Freeze for FuncRef","synthetic":true,"types":[]},{"text":"impl Freeze for SigRef","synthetic":true,"types":[]},{"text":"impl Freeze for Heap","synthetic":true,"types":[]},{"text":"impl Freeze for Table","synthetic":true,"types":[]},{"text":"impl Freeze for AnyEntity","synthetic":true,"types":[]},{"text":"impl Freeze for Function","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DisplayFunctionAnnotations&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DisplayFunction&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for InstOffsetIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Imm64","synthetic":true,"types":[]},{"text":"impl Freeze for Uimm64","synthetic":true,"types":[]},{"text":"impl Freeze for Uimm32","synthetic":true,"types":[]},{"text":"impl Freeze for V128Imm","synthetic":true,"types":[]},{"text":"impl Freeze for Offset32","synthetic":true,"types":[]},{"text":"impl Freeze for Ieee32","synthetic":true,"types":[]},{"text":"impl Freeze for Ieee64","synthetic":true,"types":[]},{"text":"impl Freeze for VariableArgs","synthetic":true,"types":[]},{"text":"impl Freeze for OpcodeConstraints","synthetic":true,"types":[]},{"text":"impl Freeze for ValueTypeSet","synthetic":true,"types":[]},{"text":"impl Freeze for InstructionFormat","synthetic":true,"types":[]},{"text":"impl Freeze for InstructionData","synthetic":true,"types":[]},{"text":"impl Freeze for Opcode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BranchInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CallInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ResolvedConstraint","synthetic":true,"types":[]},{"text":"impl Freeze for JumpTableData","synthetic":true,"types":[]},{"text":"impl Freeze for Layout","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Freeze for Blocks&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Freeze for Insts&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StackSlotData","synthetic":true,"types":[]},{"text":"impl Freeze for StackLayoutInfo","synthetic":true,"types":[]},{"text":"impl Freeze for StackSlots","synthetic":true,"types":[]},{"text":"impl Freeze for StackSlotKind","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for BranchRange","synthetic":true,"types":[]},{"text":"impl Freeze for OperandConstraint","synthetic":true,"types":[]},{"text":"impl Freeze for RecipeConstraints","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Encodings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for EncInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Encoding","synthetic":true,"types":[]},{"text":"impl Freeze for StackBaseMask","synthetic":true,"types":[]},{"text":"impl Freeze for StackRef","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for TargetFrontendConfig","synthetic":true,"types":[]},{"text":"impl Freeze for CallConv","synthetic":true,"types":[]},{"text":"impl Freeze for ConstraintKind","synthetic":true,"types":[]},{"text":"impl Freeze for StackBase","synthetic":true,"types":[]},{"text":"impl Freeze for LookupError","synthetic":true,"types":[]},{"text":"impl Freeze for UnwindInfo","synthetic":true,"types":[]},{"text":"impl Freeze for UnwindInfo","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterMappingError","synthetic":true,"types":[]},{"text":"impl Freeze for UnwindInfo","synthetic":true,"types":[]},{"text":"impl Freeze for RegBank","synthetic":true,"types":[]},{"text":"impl Freeze for RegClassData","synthetic":true,"types":[]},{"text":"impl Freeze for RegClassIndex","synthetic":true,"types":[]},{"text":"impl Freeze for RegInfo","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DisplayRegUnit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Loop","synthetic":true,"types":[]},{"text":"impl Freeze for LoopAnalysis","synthetic":true,"types":[]},{"text":"impl Freeze for MachCompileResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MachTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for InstColor","synthetic":true,"types":[]},{"text":"impl Freeze for LowerInput","synthetic":true,"types":[]},{"text":"impl&lt;'func, I&gt; Freeze for Lower&lt;'func, I&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RelocDistance","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for VCode&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for VCodeBuilder&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BlockLoweringOrder","synthetic":true,"types":[]},{"text":"impl Freeze for LoweredBlock","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MachBuffer&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as MachInst&gt;::LabelUse: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for MachBufferFinalized","synthetic":true,"types":[]},{"text":"impl Freeze for MachLabel","synthetic":true,"types":[]},{"text":"impl Freeze for MachSrcLoc","synthetic":true,"types":[]},{"text":"impl Freeze for MachStackMap","synthetic":true,"types":[]},{"text":"impl Freeze for TargetIsaAdapter","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PredicateView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Flags","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FlagsOrIsa&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SetError","synthetic":true,"types":[]},{"text":"impl Freeze for Regalloc","synthetic":true,"types":[]},{"text":"impl Freeze for OptLevel","synthetic":true,"types":[]},{"text":"impl Freeze for TlsModel","synthetic":true,"types":[]},{"text":"impl Freeze for LibcallCallConv","synthetic":true,"types":[]},{"text":"impl Freeze for Template","synthetic":true,"types":[]},{"text":"impl Freeze for Descriptor","synthetic":true,"types":[]},{"text":"impl Freeze for Detail","synthetic":true,"types":[]},{"text":"impl Freeze for PassTimes","synthetic":true,"types":[]},{"text":"impl Freeze for TimingToken","synthetic":true,"types":[]},{"text":"impl Freeze for VerifierError","synthetic":true,"types":[]},{"text":"impl Freeze for VerifierErrors","synthetic":true,"types":[]},{"text":"impl Freeze for PlainWriter","synthetic":true,"types":[]}];
implementors["cranelift_codegen_shared"] = [{"text":"impl Freeze for IntCC","synthetic":true,"types":[]},{"text":"impl Freeze for FloatCC","synthetic":true,"types":[]},{"text":"impl Freeze for EncodingBits","synthetic":true,"types":[]},{"text":"impl Freeze for OpcodePrefix","synthetic":true,"types":[]}];
implementors["cranelift_entity"] = [{"text":"impl&lt;K, V&gt; Freeze for BoxedSlice&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for Keys&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for EntityList&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ListPool&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for SecondaryMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for PrimaryMap&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for EntitySet&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for SparseMap&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PackedOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cranelift_frontend"] = [{"text":"impl&lt;'a&gt; Freeze for FunctionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionBuilderContext","synthetic":true,"types":[]},{"text":"impl Freeze for Switch","synthetic":true,"types":[]},{"text":"impl Freeze for Variable","synthetic":true,"types":[]}];
implementors["cranelift_wasm"] = [{"text":"impl Freeze for DummyEnvironment","synthetic":true,"types":[]},{"text":"impl Freeze for WasmFuncType","synthetic":true,"types":[]},{"text":"impl Freeze for FuncTranslator","synthetic":true,"types":[]},{"text":"impl Freeze for FuncTranslationState","synthetic":true,"types":[]},{"text":"impl Freeze for ModuleTranslationState","synthetic":true,"types":[]},{"text":"impl Freeze for DataIndex","synthetic":true,"types":[]},{"text":"impl Freeze for DefinedFuncIndex","synthetic":true,"types":[]},{"text":"impl Freeze for DefinedGlobalIndex","synthetic":true,"types":[]},{"text":"impl Freeze for DefinedMemoryIndex","synthetic":true,"types":[]},{"text":"impl Freeze for DefinedTableIndex","synthetic":true,"types":[]},{"text":"impl Freeze for ElemIndex","synthetic":true,"types":[]},{"text":"impl Freeze for FuncIndex","synthetic":true,"types":[]},{"text":"impl Freeze for Global","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalIndex","synthetic":true,"types":[]},{"text":"impl Freeze for Memory","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryIndex","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureIndex","synthetic":true,"types":[]},{"text":"impl Freeze for Table","synthetic":true,"types":[]},{"text":"impl Freeze for TableIndex","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalVariable","synthetic":true,"types":[]},{"text":"impl Freeze for ReturnMode","synthetic":true,"types":[]},{"text":"impl Freeze for WasmError","synthetic":true,"types":[]},{"text":"impl Freeze for WasmType","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalInit","synthetic":true,"types":[]},{"text":"impl Freeze for TableElementType","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Freeze for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl Freeze for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Freeze for TryReadyError","synthetic":true,"types":[]},{"text":"impl Freeze for TrySelectError","synthetic":true,"types":[]},{"text":"impl Freeze for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !Freeze for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Stealer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Injector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T&gt; !Freeze for Atomic&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g, T, P&gt; Freeze for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Owned&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; Freeze for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Collector","synthetic":true,"types":[]},{"text":"impl Freeze for LocalHandle","synthetic":true,"types":[]},{"text":"impl Freeze for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T&gt; !Freeze for ArrayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for SegQueue&lt;T&gt;","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; Freeze for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Backoff","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for AtomicCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Parker","synthetic":true,"types":[]},{"text":"impl Freeze for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for ShardedLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; Freeze for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Freeze for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; Freeze for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Freeze for InvalidKeyLength","synthetic":true,"types":[]},{"text":"impl Freeze for MacError","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for MacResult&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cuckoofilter"] = [{"text":"impl&lt;H&gt; Freeze for CuckooFilter&lt;H&gt;","synthetic":true,"types":[]}];
implementors["curve25519_dalek"] = [{"text":"impl Freeze for Scalar","synthetic":true,"types":[]},{"text":"impl Freeze for MontgomeryPoint","synthetic":true,"types":[]},{"text":"impl Freeze for CompressedEdwardsY","synthetic":true,"types":[]},{"text":"impl Freeze for EdwardsPoint","synthetic":true,"types":[]},{"text":"impl Freeze for VartimeEdwardsPrecomputation","synthetic":true,"types":[]},{"text":"impl Freeze for EdwardsBasepointTable","synthetic":true,"types":[]},{"text":"impl Freeze for CompressedRistretto","synthetic":true,"types":[]},{"text":"impl Freeze for RistrettoPoint","synthetic":true,"types":[]},{"text":"impl Freeze for VartimeRistrettoPrecomputation","synthetic":true,"types":[]},{"text":"impl Freeze for RistrettoBasepointTable","synthetic":true,"types":[]}];
implementors["data_encoding"] = [{"text":"impl Freeze for DecodeError","synthetic":true,"types":[]},{"text":"impl Freeze for DecodePartial","synthetic":true,"types":[]},{"text":"impl Freeze for Encoding","synthetic":true,"types":[]},{"text":"impl Freeze for Translate","synthetic":true,"types":[]},{"text":"impl Freeze for Wrap","synthetic":true,"types":[]},{"text":"impl Freeze for Specification","synthetic":true,"types":[]},{"text":"impl Freeze for SpecificationError","synthetic":true,"types":[]},{"text":"impl Freeze for DecodeKind","synthetic":true,"types":[]},{"text":"impl Freeze for BitOrder","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl Freeze for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["directories"] = [{"text":"impl Freeze for BaseDirs","synthetic":true,"types":[]},{"text":"impl Freeze for UserDirs","synthetic":true,"types":[]},{"text":"impl Freeze for ProjectDirs","synthetic":true,"types":[]}];
implementors["dns_parser"] = [{"text":"impl&lt;'a&gt; Freeze for Question&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ResourceRecord&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Packet&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Header","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for QueryType","synthetic":true,"types":[]},{"text":"impl Freeze for Class","synthetic":true,"types":[]},{"text":"impl Freeze for QueryClass","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseCode","synthetic":true,"types":[]},{"text":"impl Freeze for Opcode","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Record","synthetic":true,"types":[]},{"text":"impl Freeze for Record","synthetic":true,"types":[]},{"text":"impl Freeze for Record","synthetic":true,"types":[]},{"text":"impl Freeze for Record","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Record","synthetic":true,"types":[]},{"text":"impl Freeze for Record","synthetic":true,"types":[]},{"text":"impl Freeze for Record","synthetic":true,"types":[]},{"text":"impl Freeze for Record","synthetic":true,"types":[]},{"text":"impl Freeze for Record","synthetic":true,"types":[]},{"text":"impl Freeze for Record","synthetic":true,"types":[]},{"text":"impl Freeze for Record","synthetic":true,"types":[]},{"text":"impl Freeze for Record","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Record","synthetic":true,"types":[]},{"text":"impl Freeze for Record","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecordIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Record","synthetic":true,"types":[]}];
implementors["ed25519"] = [{"text":"impl Freeze for Signature","synthetic":true,"types":[]}];
implementors["ed25519_dalek"] = [{"text":"impl Freeze for Keypair","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for SecretKey","synthetic":true,"types":[]},{"text":"impl Freeze for ExpandedSecretKey","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Freeze for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["env_logger"] = [{"text":"impl&lt;'a&gt; Freeze for Env&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Logger","synthetic":true,"types":[]},{"text":"impl !Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Target","synthetic":true,"types":[]},{"text":"impl Freeze for WriteStyle","synthetic":true,"types":[]},{"text":"impl !Freeze for Filter","synthetic":true,"types":[]},{"text":"impl !Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for StyledValue&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Formatter","synthetic":true,"types":[]},{"text":"impl Freeze for Color","synthetic":true,"types":[]},{"text":"impl Freeze for TimestampPrecision","synthetic":true,"types":[]}];
implementors["erased_serde"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["errno"] = [{"text":"impl Freeze for Errno","synthetic":true,"types":[]}];
implementors["event_listener"] = [{"text":"impl !Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for EventListener","synthetic":true,"types":[]}];
implementors["exit_future"] = [{"text":"impl Freeze for Exit","synthetic":true,"types":[]},{"text":"impl Freeze for Signal","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl !Freeze for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !Freeze for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for SyncFailure&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Freeze for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["fake_simd"] = [{"text":"impl Freeze for u32x4","synthetic":true,"types":[]},{"text":"impl Freeze for u64x2","synthetic":true,"types":[]}];
implementors["fallible_iterator"] = [{"text":"impl&lt;T, F&gt; Freeze for Map&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Convert&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Filter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for FilterMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Freeze for FlatMap&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFallibleIterator&gt;::IntoFallibleIter: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as FallibleIterator&gt;::Item as IntoFallibleIterator&gt;::IntoFallibleIter: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Fuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Iterator&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for MapErr&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Peekable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as FallibleIterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, St, F&gt; Freeze for Scan&lt;I, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for SkipWhile&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for TakeWhile&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Cycle&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Zip&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fastrand"] = [{"text":"impl !Freeze for Rng","synthetic":true,"types":[]}];
implementors["finality_grandpa"] = [{"text":"impl&lt;H, N&gt; Freeze for Prevote&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Freeze for Precommit&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Freeze for PrimaryPropose&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Id, V, S&gt; Freeze for Equivocation&lt;Id, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Freeze for SignedMessage&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Freeze for Commit&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Freeze for SignedPrevote&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Freeze for SignedPrecommit&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Freeze for CompactCommit&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Freeze for CatchUp&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Freeze for CommitValidationResult&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Freeze for HistoricalVotes&lt;H, N, S, Id&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Freeze for Message&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Freeze for State&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Id, H, N&gt; Freeze for RoundParams&lt;Id, H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Id, H, N, Signature&gt; Freeze for Round&lt;Id, H, N, Signature&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Phase","synthetic":true,"types":[]},{"text":"impl&lt;H, N, V&gt; Freeze for VoteGraph&lt;H, N, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Id&gt; Freeze for VoterSet&lt;Id&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for VoterInfo","synthetic":true,"types":[]},{"text":"impl Freeze for GoodCommit","synthetic":true,"types":[]},{"text":"impl Freeze for BadCommit","synthetic":true,"types":[]},{"text":"impl Freeze for GoodCatchUp","synthetic":true,"types":[]},{"text":"impl Freeze for BadCatchUp","synthetic":true,"types":[]},{"text":"impl&lt;Id, Timer, Input, Output&gt; Freeze for RoundData&lt;Id, Timer, Input, Output&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Timer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N, E, GlobalIn, GlobalOut&gt; Freeze for Voter&lt;H, N, E, GlobalIn, GlobalOut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;GlobalIn: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;GlobalOut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Freeze for CommunicationOut&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CommitProcessingOutcome","synthetic":true,"types":[]},{"text":"impl Freeze for CatchUpProcessingOutcome","synthetic":true,"types":[]},{"text":"impl&lt;O&gt; Freeze for Callback&lt;O&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Freeze for CommunicationIn&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Id&gt; Freeze for RoundState&lt;Id&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Id&gt; Freeze for VoterState&lt;Id&gt;","synthetic":true,"types":[]}];
implementors["flate2"] = [{"text":"impl Freeze for Crc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for CrcReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for CrcWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for GzBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for GzHeader","synthetic":true,"types":[]},{"text":"impl Freeze for Compress","synthetic":true,"types":[]},{"text":"impl Freeze for CompressError","synthetic":true,"types":[]},{"text":"impl Freeze for Decompress","synthetic":true,"types":[]},{"text":"impl Freeze for DecompressError","synthetic":true,"types":[]},{"text":"impl Freeze for Compression","synthetic":true,"types":[]},{"text":"impl Freeze for Status","synthetic":true,"types":[]},{"text":"impl Freeze for FlushCompress","synthetic":true,"types":[]},{"text":"impl Freeze for FlushDecompress","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DeflateDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for GzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for GzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for ZlibDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Freeze for FnvHasher","synthetic":true,"types":[]}];
implementors["fork_tree"] = [{"text":"impl&lt;H, N, V&gt; Freeze for ForkTree&lt;H, N, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Error&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Freeze for FinalizationResult&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["form_urlencoded"] = [{"text":"impl&lt;'a&gt; Freeze for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Serializer&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["frame_benchmarking"] = [{"text":"impl Freeze for BenchmarkBatch","synthetic":true,"types":[]},{"text":"impl Freeze for BenchmarkResults","synthetic":true,"types":[]},{"text":"impl Freeze for BenchmarkConfig","synthetic":true,"types":[]},{"text":"impl Freeze for Analysis","synthetic":true,"types":[]},{"text":"impl Freeze for BenchmarkParameter","synthetic":true,"types":[]},{"text":"impl Freeze for BenchmarkSelector","synthetic":true,"types":[]},{"text":"impl Freeze for HostFunctions","synthetic":true,"types":[]}];
implementors["frame_benchmarking_cli"] = [{"text":"impl Freeze for BenchmarkCmd","synthetic":true,"types":[]}];
implementors["frame_executive"] = [{"text":"impl&lt;System, Block, Context, UnsignedValidator, AllModules, OnRuntimeUpgrade&gt; Freeze for Executive&lt;System, Block, Context, UnsignedValidator, AllModules, OnRuntimeUpgrade&gt;","synthetic":true,"types":[]}];
implementors["frame_metadata"] = [{"text":"impl Freeze for FunctionMetadata","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionArgumentMetadata","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for FnEncode&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OuterEventMetadata","synthetic":true,"types":[]},{"text":"impl Freeze for EventMetadata","synthetic":true,"types":[]},{"text":"impl Freeze for StorageEntryMetadata","synthetic":true,"types":[]},{"text":"impl Freeze for ModuleConstantMetadata","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorMetadata","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultByteGetter","synthetic":true,"types":[]},{"text":"impl Freeze for StorageMetadata","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeMetadataPrefixed","synthetic":true,"types":[]},{"text":"impl Freeze for ExtrinsicMetadata","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeMetadataV12","synthetic":true,"types":[]},{"text":"impl Freeze for ModuleMetadata","synthetic":true,"types":[]},{"text":"impl&lt;B, O&gt; Freeze for DecodeDifferent&lt;B, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for StorageHasher","synthetic":true,"types":[]},{"text":"impl Freeze for StorageEntryType","synthetic":true,"types":[]},{"text":"impl Freeze for StorageEntryModifier","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeMetadata","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeMetadataDeprecated","synthetic":true,"types":[]}];
implementors["frame_support"] = [{"text":"impl Freeze for Twox256","synthetic":true,"types":[]},{"text":"impl Freeze for Twox128","synthetic":true,"types":[]},{"text":"impl Freeze for Blake2_256","synthetic":true,"types":[]},{"text":"impl Freeze for Blake2_128","synthetic":true,"types":[]},{"text":"impl Freeze for Identity","synthetic":true,"types":[]},{"text":"impl Freeze for Twox64Concat","synthetic":true,"types":[]},{"text":"impl Freeze for Blake2_128Concat","synthetic":true,"types":[]},{"text":"impl Freeze for Never","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeLogger","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PrefixIterator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for StorageIterator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, T, H&gt; Freeze for StorageKeyIterator&lt;K, T, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; Freeze for FilterStackGuard&lt;F, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; Freeze for ClearFilterGuard&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as FilterStack&lt;T&gt;&gt;::Stack: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, Created, Removed, K, T&gt; Freeze for StorageMapShim&lt;S, Created, Removed, K, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Balance, Imbalance, Part1, Target1, Part2, Target2&gt; Freeze for SplitTwoWays&lt;Balance, Imbalance, Part1, Target1, Part2, Target2&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for WithdrawReasons","synthetic":true,"types":[]},{"text":"impl Freeze for TestRandomness","synthetic":true,"types":[]},{"text":"impl Freeze for CallMetadata","synthetic":true,"types":[]},{"text":"impl Freeze for ExistenceRequirement","synthetic":true,"types":[]},{"text":"impl&lt;B, P&gt; Freeze for SignedImbalance&lt;B, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Imbalance&lt;B&gt;&gt;::Opposite: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BalanceStatus","synthetic":true,"types":[]},{"text":"impl Freeze for WithdrawReason","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber&gt; Freeze for DispatchTime&lt;BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DispatchInfo","synthetic":true,"types":[]},{"text":"impl Freeze for PostDispatchInfo","synthetic":true,"types":[]},{"text":"impl&lt;WD, CD, PF&gt; Freeze for FunctionOf&lt;WD, CD, PF&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CD: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;PF: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;WD: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeDbWeight","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; Freeze for WeightToFeeCoefficient&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IdentityFee&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Pays","synthetic":true,"types":[]},{"text":"impl Freeze for DispatchClass","synthetic":true,"types":[]},{"text":"impl Freeze for BlockExecutionWeight","synthetic":true,"types":[]},{"text":"impl Freeze for ExtrinsicBaseWeight","synthetic":true,"types":[]},{"text":"impl Freeze for RocksDbWeight","synthetic":true,"types":[]},{"text":"impl Freeze for ParityDbWeight","synthetic":true,"types":[]},{"text":"impl Freeze for FrameTransactionPriority","synthetic":true,"types":[]}];
implementors["frame_support_procedural_tools"] = [{"text":"impl Freeze for StopParse","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for Braces&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for Brackets&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for Parens&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, T, V&gt; Freeze for PunctuatedInner&lt;P, T, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NoTrailing","synthetic":true,"types":[]},{"text":"impl Freeze for Trailing","synthetic":true,"types":[]},{"text":"impl Freeze for Meta","synthetic":true,"types":[]},{"text":"impl Freeze for OuterAttributes","synthetic":true,"types":[]}];
implementors["frame_system"] = [{"text":"impl&lt;T&gt; Freeze for CheckMortality&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CheckGenesis&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CheckNonce&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CheckSpecVersion&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CheckTxVersion&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CheckWeight&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; Freeze for EventRecord&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Index, AccountData&gt; Freeze for AccountInfo&lt;Index, AccountData&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountData: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for LastRuntimeUpgradeInfo","synthetic":true,"types":[]},{"text":"impl Freeze for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Account&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BlockHash&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LastRuntimeUpgrade","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; Freeze for EnsureRoot&lt;AccountId&gt;","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; Freeze for EnsureSigned&lt;AccountId&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Who, AccountId&gt; Freeze for EnsureSignedBy&lt;Who, AccountId&gt;","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; Freeze for EnsureNone&lt;AccountId&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for EnsureNever&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, L, R&gt; Freeze for EnsureOneOf&lt;AccountId, L, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CallOnCreatedAccount&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CallKillAccount&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ChainContext&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Phase","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; Freeze for RawOrigin&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; Freeze for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Error&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for InitKind","synthetic":true,"types":[]},{"text":"impl Freeze for RefStatus","synthetic":true,"types":[]},{"text":"impl Freeze for ForAll","synthetic":true,"types":[]},{"text":"impl Freeze for ForAny","synthetic":true,"types":[]},{"text":"impl&lt;T, OverarchingCall&gt; Freeze for SubmitTransaction&lt;T, OverarchingCall&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, C, X&gt; Freeze for Signer&lt;T, C, X&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Account&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as SigningTypes&gt;::Public: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;T&gt; Freeze for Async&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AsyncSink&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for Empty&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Freeze for Lazy&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for FutureResult&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Freeze for LoopFn&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Freeze for AndThen&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Flatten&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;A as Future&gt;::Item as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Fuse&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Join&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C&gt; Freeze for Join3&lt;A, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; Freeze for Join4&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E&gt; Freeze for Join5&lt;A, B, C, D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Future&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Freeze for Map&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Freeze for MapErr&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, E&gt; Freeze for FromErr&lt;A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Freeze for OrElse&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for SelectNext&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Select2&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Freeze for Then&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Freeze for Inspect&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for CatchUnwind&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for JoinAll&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SelectAll&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SelectOk&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Shared&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SharedItem&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SharedError&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for ExecuteError&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for Loop&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ExecuteErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Freeze for IterOk&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for IterResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for Repeat&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Freeze for AndThen&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Freeze for Chain&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Concat&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Concat2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for Empty&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for Filter&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut, T&gt; Freeze for Fold&lt;S, F, Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Freeze for ForEach&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; Freeze for FromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for StreamFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for InspectErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for MapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Freeze for Merge&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Error: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for Once&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Freeze for OrElse&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Peekable&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Freeze for Select&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; Freeze for SkipWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; Freeze for TakeWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Freeze for Then&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Freeze for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Freeze for Zip&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S1 as Stream&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Forward&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Buffered&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for BufferUnordered&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for CatchUnwind&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Chunks&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Collect&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for SplitSink&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I1, I2&gt; Freeze for MergedItem&lt;I1, I2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for FuturesUnordered&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; Freeze for IterMut&lt;'a, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Buffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, Fut&gt; Freeze for With&lt;S, U, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, St&gt; Freeze for WithFlatMap&lt;S, U, F, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Flush&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Send&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for SendAll&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for SinkMapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; Freeze for SinkFromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Fanout&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Sink&gt;::SinkItem: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Sink&gt;::SinkItem: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Task","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Spawn&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NotifyHandle","synthetic":true,"types":[]},{"text":"impl !Freeze for AtomicTask","synthetic":true,"types":[]},{"text":"impl Freeze for UnparkEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BiLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for BiLockGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BiLockAcquire&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BiLockAcquired&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Canceled","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Execute&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; Freeze for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Execute&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; Freeze for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Execute&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for SpawnHandle&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Execute&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Canceled","synthetic":true,"types":[]}];
implementors["futures_codec"] = [{"text":"impl Freeze for BytesCodec","synthetic":true,"types":[]},{"text":"impl Freeze for LengthCodec","synthetic":true,"types":[]},{"text":"impl Freeze for LinesCodec","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; Freeze for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["futures_core"] = [{"text":"impl&lt;'a, T&gt; Freeze for FutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SpawnError","synthetic":true,"types":[]}];
implementors["futures_cpupool"] = [{"text":"impl Freeze for CpuPool","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for CpuFuture&lt;T, E&gt;","synthetic":true,"types":[]}];
implementors["futures_diagnose"] = [{"text":"impl&lt;T&gt; Freeze for DiagnoseFuture&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DiagSpawn&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["futures_executor"] = [{"text":"impl&lt;S&gt; Freeze for BlockingStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for LocalPool","synthetic":true,"types":[]},{"text":"impl Freeze for LocalSpawner","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadPool","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadPoolBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Enter","synthetic":true,"types":[]},{"text":"impl Freeze for EnterError","synthetic":true,"types":[]}];
implementors["futures_lite"] = [{"text":"impl&lt;T&gt; Freeze for Pending&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PollOnce&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for YieldNow","synthetic":true,"types":[]},{"text":"impl&lt;F1, F2&gt; Freeze for Zip&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F1 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F2 as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F1, F2&gt; Freeze for TryZip&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F1 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F2 as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F1, F2&gt; Freeze for Or&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F1, F2&gt; Freeze for Race&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for CatchUnwind&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for BlockOn&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Pending&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for RepeatWith&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Freeze for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Freeze for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Freeze for NextFuture&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Freeze for TryNextFuture&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S:&nbsp;?Sized&gt; Freeze for CountFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, C&gt; Freeze for CollectFuture&lt;S, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, C&gt; Freeze for TryCollectFuture&lt;S, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, B&gt; Freeze for PartitionFuture&lt;S, P, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, T&gt; Freeze for FoldFuture&lt;S, F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, F, B&gt; Freeze for TryFoldFuture&lt;'a, S, F, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, St, F&gt; Freeze for Scan&lt;S, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F&gt; Freeze for FlatMap&lt;S, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut&gt; Freeze for Then&lt;S, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Freeze for Filter&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Freeze for Or&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Freeze for Race&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Freeze for TakeWhile&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Freeze for SkipWhile&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for StepBy&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U&gt; Freeze for Chain&lt;S, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Cloned&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Copied&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Cycle&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Enumerate&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Freeze for NthFuture&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for LastFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, P&gt; Freeze for FindFuture&lt;'a, S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, F&gt; Freeze for FindMapFuture&lt;'a, S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, P&gt; Freeze for PositionFuture&lt;'a, S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, P&gt; Freeze for AllFuture&lt;'a, S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, P&gt; Freeze for AnyFuture&lt;'a, S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for ForEachFuture&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, F&gt; Freeze for TryForEachFuture&lt;'a, S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, FromA, FromB&gt; Freeze for UnzipFuture&lt;S, FromA, FromB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FromA: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;FromB: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AssertAsync&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BlockOn&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Empty","synthetic":true,"types":[]},{"text":"impl Freeze for Repeat","synthetic":true,"types":[]},{"text":"impl Freeze for Sink","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for FillBuf&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadUntilFuture&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadLineFuture&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadFuture&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadVectoredFuture&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadToEndFuture&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadToStringFuture&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadExactFuture&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Bytes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R1, R2&gt; Freeze for Chain&lt;R1, R2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Freeze for SeekFuture&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for WriteFuture&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for WriteVectoredFuture&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for WriteAllFuture&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for FlushFuture&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for CloseFuture&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WriteHalf&lt;T&gt;","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl Freeze for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for FutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["futures_timer"] = [{"text":"impl Freeze for Delay","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;F&gt; Freeze for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Freeze for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; Freeze for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Remote&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RemoteHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Shared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for WeakShared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Freeze for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Freeze for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Freeze for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Freeze for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; Freeze for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Freeze for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Si&gt; Freeze for FlattenSink&lt;Fut, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Pending&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Freeze for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Freeze for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Freeze for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Freeze for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for JoinAll&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for SelectAll&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Freeze for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Freeze for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Freeze for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Freeze for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for TryJoinAll&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for SelectOk&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Abortable&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AbortHandle","synthetic":true,"types":[]},{"text":"impl Freeze for AbortRegistration","synthetic":true,"types":[]},{"text":"impl Freeze for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Freeze for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Freeze for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Cycle&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; Freeze for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Freeze for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Freeze for Next&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; Freeze for Peek&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; Freeze for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Freeze for SelectNextSome&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; Freeze for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Freeze for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Si&gt; Freeze for Forward&lt;St, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for BufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for Buffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !Freeze for ForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; Freeze for ReuniteError&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, Item&gt; Freeze for SplitSink&lt;S, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; Freeze for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Freeze for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Freeze for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Freeze for TryNext&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TryTakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Freeze for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for IntoAsyncRead&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for TryBufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for TryBuffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !Freeze for TryForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Pending&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Freeze for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Freeze for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !Freeze for FuturesUnordered&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for SelectAll&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; Freeze for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; Freeze for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; Freeze for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; Freeze for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Freeze for Close&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Drain&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Si1, Si2&gt; Freeze for Fanout&lt;Si1, Si2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Freeze for Flush&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, E&gt; Freeze for SinkErrInto&lt;Si, Item, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, F&gt; Freeze for SinkMapErr&lt;Si, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Freeze for Send&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, St:&nbsp;?Sized&gt; Freeze for SendAll&lt;'a, Si, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, Fut, F&gt; Freeze for With&lt;Si, Item, U, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, St, F&gt; Freeze for WithFlatMap&lt;Si, Item, U, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item&gt; Freeze for Buffer&lt;Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ex&gt; Freeze for Executor01As03&lt;Ex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Compat01As03&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, SinkItem&gt; !Freeze for Compat01As03Sink&lt;S, SinkItem&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Compat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; Freeze for CompatSink&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for Close&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; Freeze for Copy&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; Freeze for CopyBuf&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Empty","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for FillBuf&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for Flush&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, Item&gt; Freeze for IntoSink&lt;W, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for Read&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadVectored&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadExact&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadLine&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadToEnd&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadToString&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadUntil&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Repeat","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Freeze for Seek&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Sink","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for Write&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for WriteVectored&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for WriteAll&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized, U:&nbsp;?Sized&gt; Freeze for MappedMutexGuard&lt;'a, T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MutexLockFuture&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BiLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for BiLockAcquire&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for BiLockGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ReuniteError&lt;T&gt;","synthetic":true,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, U&gt; Freeze for GenericArray&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; Freeze for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["get_if_addrs"] = [{"text":"impl Freeze for Interface","synthetic":true,"types":[]},{"text":"impl Freeze for Ifv4Addr","synthetic":true,"types":[]},{"text":"impl Freeze for Ifv6Addr","synthetic":true,"types":[]},{"text":"impl Freeze for IfAddr","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["ghash"] = [{"text":"impl Freeze for GHash","synthetic":true,"types":[]}];
implementors["gimli"] = [{"text":"impl Freeze for Encoding","synthetic":true,"types":[]},{"text":"impl Freeze for LineEncoding","synthetic":true,"types":[]},{"text":"impl Freeze for Register","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugAbbrevOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugAddrBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugAddrIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugInfoOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugLineOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugLineStrOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LocationListsOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugLocListsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugLocListsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugMacinfoOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugMacroOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RangeListsOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugRngListsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugRngListsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugStrOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugStrOffsetsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugStrOffsetsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugTypesOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DebugTypeSignature","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugFrameOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for EhFrameOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Arm","synthetic":true,"types":[]},{"text":"impl Freeze for X86","synthetic":true,"types":[]},{"text":"impl Freeze for X86_64","synthetic":true,"types":[]},{"text":"impl Freeze for BigEndian","synthetic":true,"types":[]},{"text":"impl Freeze for LittleEndian","synthetic":true,"types":[]},{"text":"impl Freeze for Format","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnitSectionOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SectionId","synthetic":true,"types":[]},{"text":"impl Freeze for RunTimeEndian","synthetic":true,"types":[]},{"text":"impl Freeze for DwUt","synthetic":true,"types":[]},{"text":"impl Freeze for DwCfa","synthetic":true,"types":[]},{"text":"impl Freeze for DwChildren","synthetic":true,"types":[]},{"text":"impl Freeze for DwTag","synthetic":true,"types":[]},{"text":"impl Freeze for DwAt","synthetic":true,"types":[]},{"text":"impl Freeze for DwForm","synthetic":true,"types":[]},{"text":"impl Freeze for DwAte","synthetic":true,"types":[]},{"text":"impl Freeze for DwLle","synthetic":true,"types":[]},{"text":"impl Freeze for DwDs","synthetic":true,"types":[]},{"text":"impl Freeze for DwEnd","synthetic":true,"types":[]},{"text":"impl Freeze for DwAccess","synthetic":true,"types":[]},{"text":"impl Freeze for DwVis","synthetic":true,"types":[]},{"text":"impl Freeze for DwVirtuality","synthetic":true,"types":[]},{"text":"impl Freeze for DwLang","synthetic":true,"types":[]},{"text":"impl Freeze for DwAddr","synthetic":true,"types":[]},{"text":"impl Freeze for DwId","synthetic":true,"types":[]},{"text":"impl Freeze for DwCc","synthetic":true,"types":[]},{"text":"impl Freeze for DwInl","synthetic":true,"types":[]},{"text":"impl Freeze for DwOrd","synthetic":true,"types":[]},{"text":"impl Freeze for DwDsc","synthetic":true,"types":[]},{"text":"impl Freeze for DwIdx","synthetic":true,"types":[]},{"text":"impl Freeze for DwDefaulted","synthetic":true,"types":[]},{"text":"impl Freeze for DwLns","synthetic":true,"types":[]},{"text":"impl Freeze for DwLne","synthetic":true,"types":[]},{"text":"impl Freeze for DwLnct","synthetic":true,"types":[]},{"text":"impl Freeze for DwMacro","synthetic":true,"types":[]},{"text":"impl Freeze for DwRle","synthetic":true,"types":[]},{"text":"impl Freeze for DwOp","synthetic":true,"types":[]},{"text":"impl Freeze for DwEhPe","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugAddr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugFrame&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for EhFrameHdr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ParsedEhFrameHdr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for EhHdrTable&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for EhFrame&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BaseAddresses","synthetic":true,"types":[]},{"text":"impl Freeze for SectionBaseAddresses","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Freeze for CfiEntriesIter&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Augmentation","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for CommonInformationEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Freeze for PartialFrameDescriptionEntry&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Section as UnwindSection&lt;R&gt;&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for FrameDescriptionEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for UninitializedUnwindContext&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for UnwindContext&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for UnwindTable&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'iter, R&gt; Freeze for RegisterRuleIter&lt;'iter, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for UnwindTableRow&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for CallFrameInstructionIter&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Dwarf&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for Unit&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RangeIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'input, Endian&gt; Freeze for EndianSlice&lt;'input, Endian&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Endian, T&gt; Freeze for EndianReader&lt;Endian, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ReaderOffsetId","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugAbbrev&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Abbreviations","synthetic":true,"types":[]},{"text":"impl Freeze for Abbreviation","synthetic":true,"types":[]},{"text":"impl Freeze for AttributeSpecification","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ArangeEntry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugAranges&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ArangeEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugLine&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Program, Offset&gt; Freeze for LineRows&lt;R, Program, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Program: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for LineInstructions&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for LineRow","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for LineSequence&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for LineProgramHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for IncompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for CompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for FileEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for FileEntryFormat","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugLoc&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugLocLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for LocationLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RawLocListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for LocListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for LocationListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for Piece&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Expression&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for OperationIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Evaluation&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for PubNamesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugPubNames&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for PubNamesEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for PubTypesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugPubTypes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for PubTypesEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugRanges&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugRngLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RangeLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RawRngListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RngListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Range","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugStr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugStrOffsets&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugLineStr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnitOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugInfo&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for CompilationUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for CompilationUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for UnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R, Offset&nbsp;=&nbsp;&lt;R as Reader&gt;::Offset&gt; !Freeze for DebuggingInformationEntry&lt;'abbrev, 'unit, R, Offset&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Attribute&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'entry, 'unit, R&gt; Freeze for AttrsIter&lt;'abbrev, 'entry, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; Freeze for EntriesRaw&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; !Freeze for EntriesCursor&lt;'abbrev, 'unit, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; !Freeze for EntriesTree&lt;'abbrev, 'unit, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, 'tree, R&gt; Freeze for EntriesTreeNode&lt;'abbrev, 'unit, 'tree, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, 'tree, R&gt; Freeze for EntriesTreeIter&lt;'abbrev, 'unit, 'tree, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugTypes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for TypeUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for TypeUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Freeze for CieOrFde&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Section as UnwindSection&lt;R&gt;&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for CfaRule&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RegisterRule&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for CallFrameInstruction&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Pointer","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for LineInstruction&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RawLocListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DieReference&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for Operation&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for Location&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for EvaluationResult&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RawRngListEntry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for AttributeValue&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ValueType","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;Endian&gt; Freeze for EndianVec&lt;Endian&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for InitialLengthOffset","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Sections&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DebugAbbrev&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DebugFrame&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for EhFrame&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CieId","synthetic":true,"types":[]},{"text":"impl Freeze for FrameTable","synthetic":true,"types":[]},{"text":"impl Freeze for CommonInformationEntry","synthetic":true,"types":[]},{"text":"impl Freeze for FrameDescriptionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for Dwarf","synthetic":true,"types":[]},{"text":"impl Freeze for DwarfUnit","synthetic":true,"types":[]},{"text":"impl Freeze for LineProgram","synthetic":true,"types":[]},{"text":"impl Freeze for LineRow","synthetic":true,"types":[]},{"text":"impl Freeze for DirectoryId","synthetic":true,"types":[]},{"text":"impl Freeze for FileId","synthetic":true,"types":[]},{"text":"impl Freeze for FileInfo","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DebugLine&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DebugLoc&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DebugLocLists&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for LocationListOffsets","synthetic":true,"types":[]},{"text":"impl Freeze for LocationListId","synthetic":true,"types":[]},{"text":"impl Freeze for LocationListTable","synthetic":true,"types":[]},{"text":"impl Freeze for LocationList","synthetic":true,"types":[]},{"text":"impl Freeze for Expression","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DebugRanges&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DebugRngLists&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RangeListOffsets","synthetic":true,"types":[]},{"text":"impl Freeze for RangeListId","synthetic":true,"types":[]},{"text":"impl Freeze for RangeListTable","synthetic":true,"types":[]},{"text":"impl Freeze for RangeList","synthetic":true,"types":[]},{"text":"impl Freeze for StringId","synthetic":true,"types":[]},{"text":"impl Freeze for StringTable","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DebugStr&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DebugStrOffsets","synthetic":true,"types":[]},{"text":"impl Freeze for LineStringId","synthetic":true,"types":[]},{"text":"impl Freeze for LineStringTable","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DebugLineStr&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DebugLineStrOffsets","synthetic":true,"types":[]},{"text":"impl Freeze for UnitId","synthetic":true,"types":[]},{"text":"impl Freeze for UnitEntryId","synthetic":true,"types":[]},{"text":"impl Freeze for UnitTable","synthetic":true,"types":[]},{"text":"impl Freeze for Unit","synthetic":true,"types":[]},{"text":"impl Freeze for DebuggingInformationEntry","synthetic":true,"types":[]},{"text":"impl Freeze for Attribute","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DebugInfo&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DebugInfoOffsets","synthetic":true,"types":[]},{"text":"impl Freeze for CallFrameInstruction","synthetic":true,"types":[]},{"text":"impl Freeze for LineString","synthetic":true,"types":[]},{"text":"impl Freeze for Location","synthetic":true,"types":[]},{"text":"impl Freeze for Range","synthetic":true,"types":[]},{"text":"impl Freeze for AttributeValue","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Address","synthetic":true,"types":[]},{"text":"impl Freeze for Reference","synthetic":true,"types":[]},{"text":"impl Freeze for ConvertError","synthetic":true,"types":[]}];
implementors["globset"] = [{"text":"impl Freeze for Glob","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for GlobBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for GlobMatcher","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for GlobSet","synthetic":true,"types":[]},{"text":"impl Freeze for GlobSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Candidate&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]}];
implementors["governance_os_node"] = [{"text":"impl Freeze for Cli","synthetic":true,"types":[]},{"text":"impl Freeze for GeneratePlcrVotesCmd","synthetic":true,"types":[]},{"text":"impl Freeze for Subcommand","synthetic":true,"types":[]},{"text":"impl Freeze for Executor","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; Freeze for FullDeps&lt;C, P&gt;","synthetic":true,"types":[]}];
implementors["governance_os_pallet_bylaws"] = [{"text":"impl&lt;T&gt; Freeze for GenesisConfig&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Roles&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Error&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Role&gt; Freeze for RawEvent&lt;AccountId, Role&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Role: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Lookup: StaticLookup,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Role: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Lookup as StaticLookup&gt;::Source: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["governance_os_pallet_coin_voting"] = [{"text":"impl&lt;Balance&gt; Freeze for VoteData&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber, CurrencyId&gt; Freeze for VotingParameters&lt;BlockNumber, CurrencyId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Proposals&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Locks&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for VoteCountingStrategy","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Error&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt;","synthetic":true,"types":[]}];
implementors["governance_os_pallet_compat"] = [{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Lookup as StaticLookup&gt;::Source: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["governance_os_pallet_conviction_voting"] = [{"text":"impl&lt;Balance&gt; Freeze for Conviction&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance, BlockNumber, CurrencyId&gt; Freeze for ProposalState&lt;AccountId, Balance, BlockNumber, CurrencyId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber, CurrencyId&gt; Freeze for VotingParameters&lt;BlockNumber, CurrencyId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Proposals&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Locks&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Error&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt;","synthetic":true,"types":[]}];
implementors["governance_os_pallet_organizations"] = [{"text":"impl&lt;AccountId, VotingSystem&gt; Freeze for OrganizationDetails&lt;AccountId, VotingSystem&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;VotingSystem: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Call, OrganizationId, VotingSystem&gt; Freeze for Proposal&lt;Call, OrganizationId, VotingSystem&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;OrganizationId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;VotingSystem: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::VotingRouter: VotingRouter,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Counter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Parameters&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Proposals&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, OrganizationDetails, ProposalId, VoteData&gt; Freeze for RawEvent&lt;AccountId, OrganizationDetails, ProposalId, VoteData&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;OrganizationDetails: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ProposalId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;VoteData: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Error&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Lookup: StaticLookup,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::VotingRouter as VotingRouter&gt;::Parameters: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Lookup as StaticLookup&gt;::Source: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::VotingRouter as VotingRouter&gt;::VoteData: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::VotingRouter: VotingRouter,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::VotingRouter as VotingRouter&gt;::VotingSystemId: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["governance_os_pallet_plcr_voting"] = [{"text":"impl&lt;BlockNumber, CurrencyId&gt; Freeze for VotingParameters&lt;BlockNumber, CurrencyId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Proposals&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Locks&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Votes&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Balance, Hash&gt; Freeze for VoteData&lt;Balance, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Error&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Hash, AccountId&gt; Freeze for RawEvent&lt;Hash, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt;","synthetic":true,"types":[]}];
implementors["governance_os_pallet_tokens"] = [{"text":"impl&lt;Balance&gt; Freeze for AccountCurrencyData&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Pallet, GetCurrencyId&gt; Freeze for NativeCurrencyAdapter&lt;Pallet, GetCurrencyId&gt;","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; Freeze for CurrencyDetails&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, GetCurrencyId&gt; Freeze for NegativeImbalance&lt;T, GetCurrencyId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Balance: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, GetCurrencyId&gt; Freeze for PositiveImbalance&lt;T, GetCurrencyId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Balance: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for GenesisConfig&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Balances&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Locks&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TotalIssuances&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance, CurrencyId, CurrencyDetails&gt; Freeze for RawEvent&lt;AccountId, Balance, CurrencyId, CurrencyDetails&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyDetails: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Error&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Balance: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::CurrencyId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Lookup: StaticLookup,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Lookup as StaticLookup&gt;::Source: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["governance_os_primitives"] = [{"text":"impl Freeze for CurrencyId","synthetic":true,"types":[]},{"text":"impl Freeze for Role","synthetic":true,"types":[]}];
implementors["governance_os_runtime"] = [{"text":"impl Freeze for SessionKeys","synthetic":true,"types":[]},{"text":"impl Freeze for NativeCurrencyId","synthetic":true,"types":[]},{"text":"impl Freeze for Runtime","synthetic":true,"types":[]},{"text":"impl Freeze for Origin","synthetic":true,"types":[]},{"text":"impl Freeze for PalletInfo","synthetic":true,"types":[]},{"text":"impl Freeze for GenesisConfig","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeApi","synthetic":true,"types":[]},{"text":"impl&lt;Block, C&gt; !Freeze for RuntimeApiImpl&lt;Block, C&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeVotingParameters","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeVotingSystemId","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for OriginCaller","synthetic":true,"types":[]},{"text":"impl Freeze for Call","synthetic":true,"types":[]}];
implementors["governance_os_support"] = [{"text":"impl Freeze for AclError","synthetic":true,"types":[]},{"text":"impl Freeze for ProposalResult","synthetic":true,"types":[]},{"text":"impl Freeze for BlockHashCount","synthetic":true,"types":[]},{"text":"impl Freeze for MaximumBlockWeight","synthetic":true,"types":[]},{"text":"impl Freeze for MaximumBlockLength","synthetic":true,"types":[]},{"text":"impl Freeze for AvailableBlockRatio","synthetic":true,"types":[]}];
implementors["h2"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Reason","synthetic":true,"types":[]},{"text":"impl Freeze for FlowControl","synthetic":true,"types":[]},{"text":"impl Freeze for Ping","synthetic":true,"types":[]},{"text":"impl Freeze for PingPong","synthetic":true,"types":[]},{"text":"impl Freeze for Pong","synthetic":true,"types":[]},{"text":"impl Freeze for RecvStream","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for SendStream&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StreamId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for ReadySendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&nbsp;=&nbsp;Bytes&gt; !Freeze for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseFuture","synthetic":true,"types":[]},{"text":"impl Freeze for PushedResponseFuture","synthetic":true,"types":[]},{"text":"impl !Freeze for PushPromise","synthetic":true,"types":[]},{"text":"impl Freeze for PushPromises","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, B&nbsp;=&nbsp;Bytes&gt; !Freeze for Handshake&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !Freeze for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for SendResponse&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for SendPushedResponse&lt;B&gt;","synthetic":true,"types":[]}];
implementors["hash256_std_hasher"] = [{"text":"impl Freeze for Hash256StdHasher","synthetic":true,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K, V, S&gt; Freeze for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryBuilderMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for RawOccupiedEntryMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawVacantEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryBuilder&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for OccupiedEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Iter&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for IntoIter&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Drain&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for SymmetricDifference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl Freeze for FromHexError","synthetic":true,"types":[]}];
implementors["hex_fmt"] = [{"text":"impl&lt;T&gt; Freeze for HexFmt&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for HexList&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; Freeze for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as BlockInput&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hmac_drbg"] = [{"text":"impl&lt;D&gt; Freeze for HmacDRBG&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as FixedOutput&gt;::OutputSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["http"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Extensions","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for HeaderMap&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Keys&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Values&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ValuesMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for GetAll&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Freeze for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ValueIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ValueIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ValueDrain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for HeaderName","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidHeaderName","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidHeaderNameBytes","synthetic":true,"types":[]},{"text":"impl !Freeze for HeaderValue","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidHeaderValue","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidHeaderValueBytes","synthetic":true,"types":[]},{"text":"impl Freeze for ToStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Freeze for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Request&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Parts","synthetic":true,"types":[]},{"text":"impl !Freeze for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Response&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Parts","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for StatusCode","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidStatusCode","synthetic":true,"types":[]},{"text":"impl Freeze for Version","synthetic":true,"types":[]},{"text":"impl !Freeze for Authority","synthetic":true,"types":[]},{"text":"impl !Freeze for Builder","synthetic":true,"types":[]},{"text":"impl !Freeze for PathAndQuery","synthetic":true,"types":[]},{"text":"impl Freeze for Scheme","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Port&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Uri","synthetic":true,"types":[]},{"text":"impl !Freeze for Parts","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidUri","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidUriBytes","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidUriParts","synthetic":true,"types":[]}];
implementors["http_body"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for Data&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for Trailers&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SizeHint","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl Freeze for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Freeze for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Freeze for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Header&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["httpdate"] = [{"text":"impl Freeze for HttpDate","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["humantime"] = [{"text":"impl Freeze for FormattedDuration","synthetic":true,"types":[]},{"text":"impl Freeze for Duration","synthetic":true,"types":[]},{"text":"impl Freeze for Timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for Rfc3339Timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl !Freeze for Body","synthetic":true,"types":[]},{"text":"impl !Freeze for Chunk","synthetic":true,"types":[]},{"text":"impl Freeze for Sender","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for HttpConnector&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, B&gt; Freeze for Client&lt;C, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseFuture","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !Freeze for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Freeze for Handshake&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseFuture","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Parts&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for HttpInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for Destination","synthetic":true,"types":[]},{"text":"impl Freeze for Connected","synthetic":true,"types":[]},{"text":"impl Freeze for Name","synthetic":true,"types":[]},{"text":"impl Freeze for GaiResolver","synthetic":true,"types":[]},{"text":"impl Freeze for GaiAddrs","synthetic":true,"types":[]},{"text":"impl Freeze for GaiFuture","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidNameError","synthetic":true,"types":[]},{"text":"impl Freeze for TokioThreadpoolGaiResolver","synthetic":true,"types":[]},{"text":"impl Freeze for TokioThreadpoolGaiFuture","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;I, S, E&gt; Freeze for Server&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Freeze for Builder&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for AddrIncoming","synthetic":true,"types":[]},{"text":"impl !Freeze for AddrStream","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Http&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, S, E&gt; Freeze for Serve&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F, E&gt; Freeze for Connecting&lt;I, F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S, E&nbsp;=&nbsp;Exec&gt; !Freeze for Connection&lt;T, S, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; !Freeze for Parts&lt;T, S&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Upgraded","synthetic":true,"types":[]},{"text":"impl Freeze for OnUpgrade","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Parts&lt;T&gt;","synthetic":true,"types":[]}];
implementors["hyper_rustls"] = [{"text":"impl&lt;T&gt; Freeze for HttpsConnector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MaybeHttpsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl Freeze for Flags","synthetic":true,"types":[]},{"text":"impl Freeze for Errors","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; Freeze for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Freeze for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; Freeze for SymmetricDifference&lt;'a, T, S1, S2&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]}];
implementors["intervalier"] = [{"text":"impl Freeze for Interval","synthetic":true,"types":[]},{"text":"impl Freeze for BackSignalGuard","synthetic":true,"types":[]},{"text":"impl Freeze for BackSignalInterval","synthetic":true,"types":[]},{"text":"impl Freeze for BackSignalControl","synthetic":true,"types":[]},{"text":"impl Freeze for ManualSignalInterval","synthetic":true,"types":[]},{"text":"impl Freeze for ManualIntervalControl","synthetic":true,"types":[]}];
implementors["iovec"] = [{"text":"impl Freeze for IoVec","synthetic":true,"types":[]}];
implementors["ip_network"] = [{"text":"impl Freeze for Ipv4Network","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6Network","synthetic":true,"types":[]},{"text":"impl Freeze for IpNetwork","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6MulticastScope","synthetic":true,"types":[]},{"text":"impl Freeze for IpNetworkError","synthetic":true,"types":[]},{"text":"impl Freeze for IpNetworkParseError","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv4RangeIterator","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv4NetworkIterator","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6NetworkIterator","synthetic":true,"types":[]}];
implementors["ipnet"] = [{"text":"impl Freeze for Ipv4AddrRange","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6AddrRange","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv4Net","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6Net","synthetic":true,"types":[]},{"text":"impl Freeze for PrefixLenError","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv4Subnets","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6Subnets","synthetic":true,"types":[]},{"text":"impl Freeze for AddrParseError","synthetic":true,"types":[]},{"text":"impl Freeze for IpAddrRange","synthetic":true,"types":[]},{"text":"impl Freeze for IpNet","synthetic":true,"types":[]},{"text":"impl Freeze for IpSubnets","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, J&gt; Freeze for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, Pred&gt; Freeze for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; Freeze for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Freeze for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Freeze for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MultiProduct&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Freeze for Format&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !Freeze for FormatWith&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Freeze for IntoChunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for Chunk&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; !Freeze for GroupBy&lt;K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; Freeze for Group&lt;'a, K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; Freeze for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Freeze for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Freeze for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; Freeze for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; Freeze for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Freeze for Buffer","synthetic":true,"types":[]}];
implementors["js_sys"] = [{"text":"impl Freeze for Array","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ArrayIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ArrayBuffer","synthetic":true,"types":[]},{"text":"impl Freeze for SharedArrayBuffer","synthetic":true,"types":[]},{"text":"impl Freeze for Boolean","synthetic":true,"types":[]},{"text":"impl Freeze for DataView","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for EvalError","synthetic":true,"types":[]},{"text":"impl Freeze for Function","synthetic":true,"types":[]},{"text":"impl Freeze for Generator","synthetic":true,"types":[]},{"text":"impl Freeze for Map","synthetic":true,"types":[]},{"text":"impl Freeze for Iterator","synthetic":true,"types":[]},{"text":"impl Freeze for AsyncIterator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]},{"text":"impl Freeze for IteratorNext","synthetic":true,"types":[]},{"text":"impl Freeze for Number","synthetic":true,"types":[]},{"text":"impl Freeze for Date","synthetic":true,"types":[]},{"text":"impl Freeze for Object","synthetic":true,"types":[]},{"text":"impl Freeze for Proxy","synthetic":true,"types":[]},{"text":"impl Freeze for RangeError","synthetic":true,"types":[]},{"text":"impl Freeze for ReferenceError","synthetic":true,"types":[]},{"text":"impl Freeze for RegExp","synthetic":true,"types":[]},{"text":"impl Freeze for Set","synthetic":true,"types":[]},{"text":"impl Freeze for SyntaxError","synthetic":true,"types":[]},{"text":"impl Freeze for TypeError","synthetic":true,"types":[]},{"text":"impl Freeze for UriError","synthetic":true,"types":[]},{"text":"impl Freeze for WeakMap","synthetic":true,"types":[]},{"text":"impl Freeze for WeakSet","synthetic":true,"types":[]},{"text":"impl Freeze for JsString","synthetic":true,"types":[]},{"text":"impl Freeze for Symbol","synthetic":true,"types":[]},{"text":"impl Freeze for Promise","synthetic":true,"types":[]},{"text":"impl Freeze for Int8Array","synthetic":true,"types":[]},{"text":"impl Freeze for Int16Array","synthetic":true,"types":[]},{"text":"impl Freeze for Int32Array","synthetic":true,"types":[]},{"text":"impl Freeze for Uint8Array","synthetic":true,"types":[]},{"text":"impl Freeze for Uint8ClampedArray","synthetic":true,"types":[]},{"text":"impl Freeze for Uint16Array","synthetic":true,"types":[]},{"text":"impl Freeze for Uint32Array","synthetic":true,"types":[]},{"text":"impl Freeze for Float32Array","synthetic":true,"types":[]},{"text":"impl Freeze for Float64Array","synthetic":true,"types":[]},{"text":"impl Freeze for CompileError","synthetic":true,"types":[]},{"text":"impl Freeze for Instance","synthetic":true,"types":[]},{"text":"impl Freeze for LinkError","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeError","synthetic":true,"types":[]},{"text":"impl Freeze for Module","synthetic":true,"types":[]},{"text":"impl Freeze for Table","synthetic":true,"types":[]},{"text":"impl Freeze for Memory","synthetic":true,"types":[]},{"text":"impl Freeze for Collator","synthetic":true,"types":[]},{"text":"impl Freeze for DateTimeFormat","synthetic":true,"types":[]},{"text":"impl Freeze for NumberFormat","synthetic":true,"types":[]},{"text":"impl Freeze for PluralRules","synthetic":true,"types":[]}];
implementors["jsonrpc_client_transports"] = [{"text":"impl Freeze for RpcChannel","synthetic":true,"types":[]},{"text":"impl Freeze for RpcFuture","synthetic":true,"types":[]},{"text":"impl Freeze for SubscriptionStream","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TypedSubscriptionStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RawClient","synthetic":true,"types":[]},{"text":"impl Freeze for TypedClient","synthetic":true,"types":[]},{"text":"impl Freeze for RpcError","synthetic":true,"types":[]},{"text":"impl Freeze for RequestBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for ClientResponse","synthetic":true,"types":[]},{"text":"impl&lt;TSink, TStream&gt; Freeze for Duplex&lt;TSink, TStream&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSink: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TStream: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;THandler, TMetadata&gt; Freeze for LocalRpc&lt;THandler, TMetadata&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;THandler: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TMetadata: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["jsonrpc_core"] = [{"text":"impl&lt;M&gt; Freeze for IoHandler&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for MetaIoHandler&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RemoteProcedure&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Compatibility","synthetic":true,"types":[]},{"text":"impl&lt;T, M&gt; Freeze for IoDelegate&lt;T, M&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Noop","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorCode","synthetic":true,"types":[]},{"text":"impl Freeze for Id","synthetic":true,"types":[]},{"text":"impl Freeze for Params","synthetic":true,"types":[]},{"text":"impl Freeze for MethodCall","synthetic":true,"types":[]},{"text":"impl Freeze for Notification","synthetic":true,"types":[]},{"text":"impl Freeze for Call","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Success","synthetic":true,"types":[]},{"text":"impl Freeze for Failure","synthetic":true,"types":[]},{"text":"impl Freeze for Output","synthetic":true,"types":[]},{"text":"impl Freeze for Response","synthetic":true,"types":[]},{"text":"impl Freeze for Version","synthetic":true,"types":[]}];
implementors["jsonrpc_http_server"] = [{"text":"impl&lt;M, S&gt; Freeze for ServerHandler&lt;M, S&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Response","synthetic":true,"types":[]},{"text":"impl&lt;M, S&gt; Freeze for Rpc&lt;M, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M, S&gt; Freeze for WeakRpc&lt;M, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M, S&gt; Freeze for ServerBuilder&lt;M, S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CloseHandle","synthetic":true,"types":[]},{"text":"impl Freeze for Server","synthetic":true,"types":[]},{"text":"impl !Freeze for RequestMiddlewareAction","synthetic":true,"types":[]},{"text":"impl Freeze for RestApi","synthetic":true,"types":[]}];
implementors["jsonrpc_ipc_server"] = [{"text":"impl Freeze for NoopExtractor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RequestContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CloseHandle","synthetic":true,"types":[]},{"text":"impl Freeze for Server","synthetic":true,"types":[]},{"text":"impl&lt;M, S&gt; Freeze for ServerBuilder&lt;M, S&gt;","synthetic":true,"types":[]}];
implementors["jsonrpc_pubsub"] = [{"text":"impl&lt;T, M&gt; Freeze for IoDelegate&lt;T, M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for PubSubHandler&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Session","synthetic":true,"types":[]},{"text":"impl Freeze for Sink","synthetic":true,"types":[]},{"text":"impl Freeze for Subscriber","synthetic":true,"types":[]},{"text":"impl Freeze for SubscriptionId","synthetic":true,"types":[]},{"text":"impl Freeze for NumericIdProvider","synthetic":true,"types":[]},{"text":"impl Freeze for RandomStringIdProvider","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for SubscriptionManager&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for Subscriber&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for Sink&lt;T, E&gt;","synthetic":true,"types":[]}];
implementors["jsonrpc_server_utils"] = [{"text":"impl&lt;S&gt; Freeze for SuspendableStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Origin","synthetic":true,"types":[]},{"text":"impl Freeze for OriginProtocol","synthetic":true,"types":[]},{"text":"impl !Freeze for AccessControlAllowOrigin","synthetic":true,"types":[]},{"text":"impl Freeze for AccessControlAllowHeaders","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AllowCors&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Host","synthetic":true,"types":[]},{"text":"impl Freeze for Port","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DomainsValidation&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RpcEventLoop","synthetic":true,"types":[]},{"text":"impl Freeze for UninitializedExecutor","synthetic":true,"types":[]},{"text":"impl Freeze for Executor","synthetic":true,"types":[]},{"text":"impl Freeze for StreamCodec","synthetic":true,"types":[]},{"text":"impl Freeze for Separator","synthetic":true,"types":[]}];
implementors["jsonrpc_ws_server"] = [{"text":"impl Freeze for NoopExtractor","synthetic":true,"types":[]},{"text":"impl !Freeze for RequestContext","synthetic":true,"types":[]},{"text":"impl Freeze for Broadcaster","synthetic":true,"types":[]},{"text":"impl Freeze for CloseHandle","synthetic":true,"types":[]},{"text":"impl Freeze for Server","synthetic":true,"types":[]},{"text":"impl&lt;M, S&gt; Freeze for ServerBuilder&lt;M, S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for MiddlewareAction","synthetic":true,"types":[]}];
implementors["kvdb"] = [{"text":"impl Freeze for IoStats","synthetic":true,"types":[]},{"text":"impl Freeze for DBTransaction","synthetic":true,"types":[]},{"text":"impl Freeze for Kind","synthetic":true,"types":[]},{"text":"impl Freeze for DBOp","synthetic":true,"types":[]}];
implementors["kvdb_memorydb"] = [{"text":"impl !Freeze for InMemory","synthetic":true,"types":[]}];
implementors["kvdb_rocksdb"] = [{"text":"impl Freeze for CompactionProfile","synthetic":true,"types":[]},{"text":"impl Freeze for DatabaseConfig","synthetic":true,"types":[]},{"text":"impl !Freeze for Database","synthetic":true,"types":[]}];
implementors["lazycell"] = [{"text":"impl&lt;T&gt; !Freeze for LazyCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for AtomicLazyCell&lt;T&gt;","synthetic":true,"types":[]}];
implementors["leb128"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl Freeze for group","synthetic":true,"types":[]},{"text":"impl Freeze for utimbuf","synthetic":true,"types":[]},{"text":"impl Freeze for timeval","synthetic":true,"types":[]},{"text":"impl Freeze for timespec","synthetic":true,"types":[]},{"text":"impl Freeze for rlimit","synthetic":true,"types":[]},{"text":"impl Freeze for rusage","synthetic":true,"types":[]},{"text":"impl Freeze for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for hostent","synthetic":true,"types":[]},{"text":"impl Freeze for iovec","synthetic":true,"types":[]},{"text":"impl Freeze for pollfd","synthetic":true,"types":[]},{"text":"impl Freeze for winsize","synthetic":true,"types":[]},{"text":"impl Freeze for linger","synthetic":true,"types":[]},{"text":"impl Freeze for sigval","synthetic":true,"types":[]},{"text":"impl Freeze for itimerval","synthetic":true,"types":[]},{"text":"impl Freeze for tms","synthetic":true,"types":[]},{"text":"impl Freeze for servent","synthetic":true,"types":[]},{"text":"impl Freeze for protoent","synthetic":true,"types":[]},{"text":"impl Freeze for in_addr","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl Freeze for addrinfo","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Freeze for fd_set","synthetic":true,"types":[]},{"text":"impl Freeze for tm","synthetic":true,"types":[]},{"text":"impl Freeze for sched_param","synthetic":true,"types":[]},{"text":"impl Freeze for Dl_info","synthetic":true,"types":[]},{"text":"impl Freeze for lconv","synthetic":true,"types":[]},{"text":"impl Freeze for in_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for ifaddrs","synthetic":true,"types":[]},{"text":"impl Freeze for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Freeze for arpreq","synthetic":true,"types":[]},{"text":"impl Freeze for arpreq_old","synthetic":true,"types":[]},{"text":"impl Freeze for arphdr","synthetic":true,"types":[]},{"text":"impl Freeze for mmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for epoll_event","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Freeze for utsname","synthetic":true,"types":[]},{"text":"impl Freeze for sigevent","synthetic":true,"types":[]},{"text":"impl Freeze for rlimit64","synthetic":true,"types":[]},{"text":"impl Freeze for glob_t","synthetic":true,"types":[]},{"text":"impl Freeze for passwd","synthetic":true,"types":[]},{"text":"impl Freeze for spwd","synthetic":true,"types":[]},{"text":"impl Freeze for dqblk","synthetic":true,"types":[]},{"text":"impl Freeze for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Freeze for itimerspec","synthetic":true,"types":[]},{"text":"impl Freeze for fsid_t","synthetic":true,"types":[]},{"text":"impl Freeze for packet_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for cpu_set_t","synthetic":true,"types":[]},{"text":"impl Freeze for if_nameindex","synthetic":true,"types":[]},{"text":"impl Freeze for msginfo","synthetic":true,"types":[]},{"text":"impl Freeze for sembuf","synthetic":true,"types":[]},{"text":"impl Freeze for input_event","synthetic":true,"types":[]},{"text":"impl Freeze for input_id","synthetic":true,"types":[]},{"text":"impl Freeze for input_absinfo","synthetic":true,"types":[]},{"text":"impl Freeze for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Freeze for input_mask","synthetic":true,"types":[]},{"text":"impl Freeze for ff_replay","synthetic":true,"types":[]},{"text":"impl Freeze for ff_trigger","synthetic":true,"types":[]},{"text":"impl Freeze for ff_envelope","synthetic":true,"types":[]},{"text":"impl Freeze for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_effect","synthetic":true,"types":[]},{"text":"impl Freeze for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Freeze for ucred","synthetic":true,"types":[]},{"text":"impl Freeze for mntent","synthetic":true,"types":[]},{"text":"impl Freeze for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Freeze for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for arpd_request","synthetic":true,"types":[]},{"text":"impl Freeze for inotify_event","synthetic":true,"types":[]},{"text":"impl Freeze for fanotify_response","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Freeze for regmatch_t","synthetic":true,"types":[]},{"text":"impl Freeze for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Freeze for dirent","synthetic":true,"types":[]},{"text":"impl Freeze for dirent64","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Freeze for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Freeze for mq_attr","synthetic":true,"types":[]},{"text":"impl Freeze for statx","synthetic":true,"types":[]},{"text":"impl Freeze for statx_timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for aiocb","synthetic":true,"types":[]},{"text":"impl Freeze for __exit_status","synthetic":true,"types":[]},{"text":"impl Freeze for __timeval","synthetic":true,"types":[]},{"text":"impl Freeze for glob64_t","synthetic":true,"types":[]},{"text":"impl Freeze for msghdr","synthetic":true,"types":[]},{"text":"impl Freeze for cmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for termios","synthetic":true,"types":[]},{"text":"impl Freeze for mallinfo","synthetic":true,"types":[]},{"text":"impl Freeze for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Freeze for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Freeze for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Freeze for nlattr","synthetic":true,"types":[]},{"text":"impl Freeze for rtentry","synthetic":true,"types":[]},{"text":"impl Freeze for timex","synthetic":true,"types":[]},{"text":"impl Freeze for ntptimeval","synthetic":true,"types":[]},{"text":"impl Freeze for regex_t","synthetic":true,"types":[]},{"text":"impl Freeze for utmpx","synthetic":true,"types":[]},{"text":"impl Freeze for sigset_t","synthetic":true,"types":[]},{"text":"impl Freeze for sysinfo","synthetic":true,"types":[]},{"text":"impl Freeze for msqid_ds","synthetic":true,"types":[]},{"text":"impl Freeze for sigaction","synthetic":true,"types":[]},{"text":"impl Freeze for statfs","synthetic":true,"types":[]},{"text":"impl Freeze for flock","synthetic":true,"types":[]},{"text":"impl Freeze for flock64","synthetic":true,"types":[]},{"text":"impl Freeze for siginfo_t","synthetic":true,"types":[]},{"text":"impl Freeze for stack_t","synthetic":true,"types":[]},{"text":"impl Freeze for stat","synthetic":true,"types":[]},{"text":"impl Freeze for stat64","synthetic":true,"types":[]},{"text":"impl Freeze for statfs64","synthetic":true,"types":[]},{"text":"impl Freeze for statvfs64","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Freeze for user_regs_struct","synthetic":true,"types":[]},{"text":"impl Freeze for user","synthetic":true,"types":[]},{"text":"impl Freeze for mcontext_t","synthetic":true,"types":[]},{"text":"impl Freeze for ipc_perm","synthetic":true,"types":[]},{"text":"impl Freeze for shmid_ds","synthetic":true,"types":[]},{"text":"impl Freeze for termios2","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Freeze for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl Freeze for ucontext_t","synthetic":true,"types":[]},{"text":"impl Freeze for statvfs","synthetic":true,"types":[]},{"text":"impl Freeze for max_align_t","synthetic":true,"types":[]},{"text":"impl Freeze for sem_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Freeze for in6_addr","synthetic":true,"types":[]},{"text":"impl Freeze for DIR","synthetic":true,"types":[]},{"text":"impl Freeze for FILE","synthetic":true,"types":[]},{"text":"impl Freeze for fpos_t","synthetic":true,"types":[]},{"text":"impl Freeze for timezone","synthetic":true,"types":[]},{"text":"impl Freeze for fpos64_t","synthetic":true,"types":[]}];
implementors["libp2p"] = [{"text":"impl&lt;TInner&gt; Freeze for BandwidthLogging&lt;TInner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInner: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TInner&gt; Freeze for BandwidthListener&lt;TInner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInner: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TInner&gt; Freeze for BandwidthFuture&lt;TInner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInner: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for BandwidthSinks","synthetic":true,"types":[]},{"text":"impl&lt;TInner&gt; Freeze for BandwidthConnecLogging&lt;TInner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInner: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !Freeze for SimpleProtocol&lt;F&gt;","synthetic":true,"types":[]}];
implementors["libp2p_core"] = [{"text":"impl Freeze for PeerId","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UpgradeError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ListenerId","synthetic":true,"types":[]},{"text":"impl&lt;TTrans&gt; Freeze for ListenersStream&lt;TTrans&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TTrans: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ConnectionId","synthetic":true,"types":[]},{"text":"impl&lt;TMuxer&gt; Freeze for Close&lt;TMuxer&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TInEvent, TConnInfo&gt; Freeze for EstablishedConnection&lt;'a, TInEvent, TConnInfo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, TInEvent, TOutEvent, THandler, TTransErr, THandlerErr, TConnInfo, TPeerId&gt; Freeze for EstablishedConnectionIter&lt;'a, I, TInEvent, TOutEvent, THandler, TTransErr, THandlerErr, TConnInfo, TPeerId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TInEvent, TConnInfo, TPeerId&gt; Freeze for PendingConnection&lt;'a, TInEvent, TConnInfo, TPeerId&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Connected&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TMuxer, THandler&gt; Freeze for Connection&lt;TMuxer, THandler&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;THandler: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;THandler as ConnectionHandler&gt;::OutboundOpenInfo: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TMuxer as StreamMuxer&gt;::OutboundSubstream: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IncomingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TPeerId&gt; Freeze for OutgoingInfo&lt;'a, TPeerId&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ConnectionLimit","synthetic":true,"types":[]},{"text":"impl&lt;THandlerErr&gt; Freeze for ConnectionError&lt;THandlerErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;THandlerErr: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TTransErr&gt; Freeze for PendingConnectionError&lt;TTransErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TTransErr: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TOutboundOpenInfo, TCustom&gt; Freeze for ConnectionHandlerEvent&lt;TOutboundOpenInfo, TCustom&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TCustom: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutboundOpenInfo: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TTrans&gt; Freeze for ListenersEvent&lt;TTrans&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::Error: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::ListenerUpgrade: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TDialInfo&gt; Freeze for SubstreamEndpoint&lt;TDialInfo&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TDialInfo: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Endpoint","synthetic":true,"types":[]},{"text":"impl Freeze for ConnectedPoint","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Event&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for EitherError&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for EitherOutput&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for EitherOutbound&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as StreamMuxer&gt;::OutboundSubstream: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as StreamMuxer&gt;::OutboundSubstream: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for EitherListenStream&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for EitherFuture&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for EitherFuture2&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for EitherName&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for EitherTransport&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Keypair","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for Keypair","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for SecretKey","synthetic":true,"types":[]},{"text":"impl Freeze for Keypair","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for Keypair","synthetic":true,"types":[]},{"text":"impl Freeze for SecretKey","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for DecodingError","synthetic":true,"types":[]},{"text":"impl Freeze for SigningError","synthetic":true,"types":[]},{"text":"impl&lt;TSocket&gt; !Freeze for SingletonMuxer&lt;TSocket&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for OutboundSubstreamRefWrapFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as Deref&gt;::Target as StreamMuxer&gt;::OutboundSubstream: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for OutboundSubstreamRefFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as Deref&gt;::Target as StreamMuxer&gt;::OutboundSubstream: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for SubstreamRef&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as Deref&gt;::Target as StreamMuxer&gt;::Substream: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for StreamMuxerBox","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for StreamMuxerEvent&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TUpgrade&gt; Freeze for IncomingConnection&lt;TUpgrade&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUpgrade: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TTrans, TInEvent, TOutEvent, THandler, TConnInfo&nbsp;=&nbsp;PeerId, TPeerId&nbsp;=&nbsp;PeerId&gt; !Freeze for Network&lt;TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NetworkInfo","synthetic":true,"types":[]},{"text":"impl Freeze for NetworkConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; Freeze for NetworkEvent&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConnInfo: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutEvent: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::Error: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;THandler as IntoConnectionHandler&lt;TConnInfo&gt;&gt;::Handler as ConnectionHandler&gt;::Error: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;THandler as IntoConnectionHandler&lt;TConnInfo&gt;&gt;::Handler: ConnectionHandler,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::ListenerUpgrade: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; Freeze for ConnectedPeer&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; Freeze for DialingPeer&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; Freeze for DisconnectedPeer&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TInEvent, TConnInfo, TPeerId&gt; Freeze for DialingAttempt&lt;'a, TInEvent, TConnInfo, TPeerId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TInEvent, TOutEvent, THandler, TTransErr, THandlerErr, TConnInfo, TPeerId&gt; Freeze for DialingAttemptIter&lt;'a, TInEvent, TOutEvent, THandler, TTransErr, THandlerErr, TConnInfo, TPeerId&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; Freeze for Peer&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for OptionalTransport&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TUpgr, TErr&gt; Freeze for ListenerEvent&lt;TUpgr, TErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TErr: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TUpgr: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TErr&gt; Freeze for TransportError&lt;TErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TErr: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, C&gt; Freeze for AndThen&lt;T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TListener, TMap&gt; Freeze for AndThenStream&lt;TListener, TMap&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TListener: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TMap: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TFut, TMap, TMapOut&gt; Freeze for AndThenFuture&lt;TFut, TMap, TMapOut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TMap: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, E&gt; Freeze for Boxed&lt;O, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for OrTransport&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TOut&gt; Freeze for DummyTransport&lt;TOut&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DummyStream","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Freeze for Map&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Freeze for MapStream&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Freeze for MapFuture&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Freeze for MapErr&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Freeze for MapErrListener&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Transport&gt;::Listener: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Freeze for MapErrListenerUpgrade&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Transport&gt;::ListenerUpgrade: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Freeze for MapErrDial&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Transport&gt;::Dial: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryTransport","synthetic":true,"types":[]},{"text":"impl Freeze for DialFuture","synthetic":true,"types":[]},{"text":"impl Freeze for Listener","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Chan&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryTransportError","synthetic":true,"types":[]},{"text":"impl&lt;InnerTrans&gt; Freeze for TransportTimeout&lt;InnerTrans&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;InnerTrans: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;InnerStream&gt; Freeze for TimeoutListener&lt;InnerStream&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;InnerStream: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;InnerFut&gt; Freeze for Timeout&lt;InnerFut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;InnerFut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TErr&gt; Freeze for TransportTimeoutError&lt;TErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TErr: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Builder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, U&gt; !Freeze for Authenticate&lt;C, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, U, I&gt; !Freeze for Multiplex&lt;C, U, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Upgrade&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, U, I, C&gt; Freeze for DialUpgradeFuture&lt;F, U, I, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as UpgradeInfo&gt;::Info: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as UpgradeInfo&gt;::InfoIter: IntoIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;U as UpgradeInfo&gt;::InfoIter as IntoIterator&gt;::IntoIter: Freeze + Iterator,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U&gt; Freeze for ListenerStream&lt;S, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, U, I, C&gt; !Freeze for ListenerUpgradeFuture&lt;F, U, I, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for TransportUpgradeError&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, U&gt; !Freeze for InboundUpgradeApply&lt;C, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, U&gt; Freeze for OutboundUpgradeApply&lt;C, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as UpgradeInfo&gt;::Info: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as UpgradeInfo&gt;::InfoIter: IntoIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;U as UpgradeInfo&gt;::InfoIter as IntoIterator&gt;::IntoIter: Freeze + Iterator,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DeniedUpgrade","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; Freeze for FromFnUpgrade&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U, F&gt; Freeze for MapInboundUpgrade&lt;U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U, F&gt; Freeze for MapOutboundUpgrade&lt;U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U, F&gt; Freeze for MapInboundUpgradeErr&lt;U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U, F&gt; Freeze for MapOutboundUpgradeErr&lt;U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for OptionalUpgrade&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for SelectUpgrade&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for EitherUpgrade&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ReadOneError","synthetic":true,"types":[]}];
implementors["libp2p_deflate"] = [{"text":"impl Freeze for DeflateConfig","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for DeflateOutput&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["libp2p_dns"] = [{"text":"impl&lt;T&gt; Freeze for DnsConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TErr&gt; Freeze for DnsErr&lt;TErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TErr: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["libp2p_floodsub"] = [{"text":"impl Freeze for Floodsub","synthetic":true,"types":[]},{"text":"impl Freeze for Topic","synthetic":true,"types":[]},{"text":"impl Freeze for FloodsubConfig","synthetic":true,"types":[]},{"text":"impl Freeze for FloodsubEvent","synthetic":true,"types":[]},{"text":"impl Freeze for FloodsubProtocol","synthetic":true,"types":[]},{"text":"impl Freeze for FloodsubRpc","synthetic":true,"types":[]},{"text":"impl Freeze for FloodsubMessage","synthetic":true,"types":[]},{"text":"impl Freeze for FloodsubSubscription","synthetic":true,"types":[]},{"text":"impl Freeze for FloodsubDecodeError","synthetic":true,"types":[]},{"text":"impl Freeze for FloodsubSubscriptionAction","synthetic":true,"types":[]}];
implementors["libp2p_gossipsub"] = [{"text":"impl Freeze for Gossipsub","synthetic":true,"types":[]},{"text":"impl Freeze for GossipsubRpc","synthetic":true,"types":[]},{"text":"impl Freeze for GossipsubConfig","synthetic":true,"types":[]},{"text":"impl Freeze for GossipsubConfigBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Topic","synthetic":true,"types":[]},{"text":"impl Freeze for TopicHash","synthetic":true,"types":[]},{"text":"impl Freeze for GossipsubEvent","synthetic":true,"types":[]},{"text":"impl Freeze for MessageAuthenticity","synthetic":true,"types":[]},{"text":"impl Freeze for ValidationMode","synthetic":true,"types":[]},{"text":"impl Freeze for PublishError","synthetic":true,"types":[]},{"text":"impl Freeze for ProtocolConfig","synthetic":true,"types":[]},{"text":"impl Freeze for GossipsubCodec","synthetic":true,"types":[]},{"text":"impl Freeze for MessageId","synthetic":true,"types":[]},{"text":"impl Freeze for GossipsubMessage","synthetic":true,"types":[]},{"text":"impl Freeze for GossipsubSubscription","synthetic":true,"types":[]},{"text":"impl Freeze for GossipsubSubscriptionAction","synthetic":true,"types":[]},{"text":"impl Freeze for GossipsubControlAction","synthetic":true,"types":[]}];
implementors["libp2p_identify"] = [{"text":"impl Freeze for Identify","synthetic":true,"types":[]},{"text":"impl Freeze for IdentifyInfo","synthetic":true,"types":[]},{"text":"impl Freeze for IdentifyEvent","synthetic":true,"types":[]}];
implementors["libp2p_kad"] = [{"text":"impl Freeze for Addresses","synthetic":true,"types":[]},{"text":"impl&lt;TStore&gt; Freeze for Kademlia&lt;TStore&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TStore: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for KademliaConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for QueryRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for QueryMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for QueryStats","synthetic":true,"types":[]},{"text":"impl !Freeze for PeerRecord","synthetic":true,"types":[]},{"text":"impl Freeze for BootstrapOk","synthetic":true,"types":[]},{"text":"impl Freeze for GetRecordOk","synthetic":true,"types":[]},{"text":"impl !Freeze for PutRecordOk","synthetic":true,"types":[]},{"text":"impl Freeze for GetClosestPeersOk","synthetic":true,"types":[]},{"text":"impl !Freeze for AddProviderOk","synthetic":true,"types":[]},{"text":"impl !Freeze for GetProvidersOk","synthetic":true,"types":[]},{"text":"impl Freeze for QueryId","synthetic":true,"types":[]},{"text":"impl Freeze for KademliaBucketInserts","synthetic":true,"types":[]},{"text":"impl !Freeze for KademliaEvent","synthetic":true,"types":[]},{"text":"impl Freeze for Quorum","synthetic":true,"types":[]},{"text":"impl !Freeze for QueryResult","synthetic":true,"types":[]},{"text":"impl !Freeze for QueryInfo","synthetic":true,"types":[]},{"text":"impl Freeze for BootstrapError","synthetic":true,"types":[]},{"text":"impl !Freeze for GetRecordError","synthetic":true,"types":[]},{"text":"impl Freeze for PutRecordPhase","synthetic":true,"types":[]},{"text":"impl Freeze for PutRecordContext","synthetic":true,"types":[]},{"text":"impl !Freeze for PutRecordError","synthetic":true,"types":[]},{"text":"impl Freeze for GetClosestPeersError","synthetic":true,"types":[]},{"text":"impl Freeze for AddProviderPhase","synthetic":true,"types":[]},{"text":"impl Freeze for AddProviderContext","synthetic":true,"types":[]},{"text":"impl !Freeze for AddProviderError","synthetic":true,"types":[]},{"text":"impl !Freeze for GetProvidersError","synthetic":true,"types":[]},{"text":"impl&lt;TUserData&gt; Freeze for KademliaHandler&lt;TUserData&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for KademliaHandlerConfig","synthetic":true,"types":[]},{"text":"impl Freeze for KademliaRequestId","synthetic":true,"types":[]},{"text":"impl&lt;TUserData&gt; !Freeze for KademliaHandlerEvent&lt;TUserData&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for KademliaHandlerQueryErr","synthetic":true,"types":[]},{"text":"impl&lt;TUserData&gt; !Freeze for KademliaHandlerIn&lt;TUserData&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TKey, TVal&gt; Freeze for Node&lt;TKey, TVal&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKey: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TVal: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TKey, TVal&gt; Freeze for AppliedPending&lt;TKey, TVal&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKey: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TVal: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Key&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for KeyBytes","synthetic":true,"types":[]},{"text":"impl Freeze for Distance","synthetic":true,"types":[]},{"text":"impl&lt;'a, TPeerId, TVal&gt; Freeze for EntryRefView&lt;'a, TPeerId, TVal&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TKey, TVal&gt; Freeze for NodeRefView&lt;'a, TKey, TVal&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TKey, TVal&gt; Freeze for EntryView&lt;TKey, TVal&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKey: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TVal: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TKey, TVal&gt; Freeze for PresentEntry&lt;'a, TKey, TVal&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TKey, TVal&gt; Freeze for PendingEntry&lt;'a, TKey, TVal&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TKey, TVal&gt; Freeze for AbsentEntry&lt;'a, TKey, TVal&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TKey, TVal&gt; Freeze for KBucketsTable&lt;TKey, TVal&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKey: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TKey, TVal&gt; Freeze for KBucketRef&lt;'a, TKey, TVal&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NodeStatus","synthetic":true,"types":[]},{"text":"impl&lt;TKey&gt; Freeze for InsertResult&lt;TKey&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKey: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TPeerId, TVal&gt; Freeze for Entry&lt;'a, TPeerId, TVal&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for KadPeer","synthetic":true,"types":[]},{"text":"impl Freeze for KademliaProtocolConfig","synthetic":true,"types":[]},{"text":"impl Freeze for KadConnectionType","synthetic":true,"types":[]},{"text":"impl !Freeze for KadRequestMsg","synthetic":true,"types":[]},{"text":"impl !Freeze for KadResponseMsg","synthetic":true,"types":[]},{"text":"impl !Freeze for Key","synthetic":true,"types":[]},{"text":"impl !Freeze for Record","synthetic":true,"types":[]},{"text":"impl !Freeze for ProviderRecord","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryStore","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryStoreConfig","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["libp2p_mdns"] = [{"text":"impl Freeze for Mdns","synthetic":true,"types":[]},{"text":"impl Freeze for MdnsEvent","synthetic":true,"types":[]},{"text":"impl Freeze for MdnsResponseError","synthetic":true,"types":[]},{"text":"impl Freeze for MdnsService","synthetic":true,"types":[]},{"text":"impl Freeze for MdnsQuery","synthetic":true,"types":[]},{"text":"impl Freeze for MdnsServiceDiscovery","synthetic":true,"types":[]},{"text":"impl Freeze for MdnsResponse","synthetic":true,"types":[]},{"text":"impl Freeze for MdnsPeer","synthetic":true,"types":[]},{"text":"impl Freeze for MdnsPacket","synthetic":true,"types":[]}];
implementors["libp2p_mplex"] = [{"text":"impl Freeze for MplexConfig","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; !Freeze for Multiplex&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for OutboundSubstream","synthetic":true,"types":[]},{"text":"impl !Freeze for Substream","synthetic":true,"types":[]},{"text":"impl Freeze for MaxBufferBehaviour","synthetic":true,"types":[]}];
implementors["libp2p_noise"] = [{"text":"impl&lt;T&gt; !Freeze for NoiseOutput&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, C&gt; Freeze for Handshake&lt;T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Keypair&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AuthenticKeypair&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for KeypairIdentity","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PublicKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SecretKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ProtocolParams","synthetic":true,"types":[]},{"text":"impl Freeze for X25519","synthetic":true,"types":[]},{"text":"impl Freeze for X25519Spec","synthetic":true,"types":[]},{"text":"impl&lt;P, C, R&gt; Freeze for NoiseConfig&lt;P, C, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, C, R&gt; Freeze for NoiseAuthenticated&lt;P, C, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for LegacyConfig","synthetic":true,"types":[]},{"text":"impl Freeze for NoiseError","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for RemoteIdentity&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for IdentityExchange","synthetic":true,"types":[]},{"text":"impl Freeze for IX","synthetic":true,"types":[]},{"text":"impl Freeze for IK","synthetic":true,"types":[]},{"text":"impl Freeze for XX","synthetic":true,"types":[]}];
implementors["libp2p_ping"] = [{"text":"impl Freeze for Ping","synthetic":true,"types":[]},{"text":"impl Freeze for PingEvent","synthetic":true,"types":[]},{"text":"impl Freeze for Ping","synthetic":true,"types":[]},{"text":"impl Freeze for PingConfig","synthetic":true,"types":[]},{"text":"impl !Freeze for PingHandler","synthetic":true,"types":[]},{"text":"impl Freeze for PingSuccess","synthetic":true,"types":[]},{"text":"impl Freeze for PingFailure","synthetic":true,"types":[]}];
implementors["libp2p_plaintext"] = [{"text":"impl Freeze for PlainText1Config","synthetic":true,"types":[]},{"text":"impl Freeze for PlainText2Config","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for PlainTextMiddleware&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for PlainTextOutput&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["libp2p_pnet"] = [{"text":"impl Freeze for PreSharedKey","synthetic":true,"types":[]},{"text":"impl Freeze for Fingerprint","synthetic":true,"types":[]},{"text":"impl Freeze for PnetConfig","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for PnetOutput&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for KeyParseError","synthetic":true,"types":[]},{"text":"impl Freeze for PnetError","synthetic":true,"types":[]}];
implementors["libp2p_request_response"] = [{"text":"impl&lt;TResponse&gt; Freeze for ResponseChannel&lt;TResponse&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RequestId","synthetic":true,"types":[]},{"text":"impl Freeze for RequestResponseConfig","synthetic":true,"types":[]},{"text":"impl&lt;TCodec&gt; Freeze for RequestResponse&lt;TCodec&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TCodec: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TCodec as RequestResponseCodec&gt;::Protocol: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ProtocolSupport","synthetic":true,"types":[]},{"text":"impl&lt;TRequest, TResponse, TChannelResponse&gt; Freeze for RequestResponseMessage&lt;TRequest, TResponse, TChannelResponse&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TRequest: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TResponse: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TRequest, TResponse, TChannelResponse&gt; Freeze for RequestResponseEvent&lt;TRequest, TResponse, TChannelResponse&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TRequest: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TResponse: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for OutboundFailure","synthetic":true,"types":[]},{"text":"impl Freeze for InboundFailure","synthetic":true,"types":[]},{"text":"impl&lt;TCodec&gt; Freeze for RequestProtocol&lt;TCodec&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TCodec: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TCodec as RequestResponseCodec&gt;::Protocol: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TCodec as RequestResponseCodec&gt;::Request: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TCodec&gt; Freeze for ResponseProtocol&lt;TCodec&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TCodec: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TCodec as RequestResponseCodec&gt;::Protocol: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; !Freeze for Throttled&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Req, Res, CRes&gt; Freeze for Event&lt;Req, Res, CRes&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Req: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Res: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["libp2p_swarm"] = [{"text":"impl&lt;TProto1, TProto2&gt; Freeze for IntoProtocolsHandlerSelect&lt;TProto1, TProto2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TProto1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TProto2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TProto1, TProto2&gt; Freeze for ProtocolsHandlerSelect&lt;TProto1, TProto2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TProto1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TProto2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TInbound, TOutbound, TEvent&gt; Freeze for OneShotHandler&lt;TInbound, TOutbound, TEvent&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TEvent: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TInbound: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutbound: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TOutbound as OutboundUpgradeSend&gt;::Error: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for OneShotHandlerConfig","synthetic":true,"types":[]},{"text":"impl&lt;TBehaviour, TInEvent, TOutEvent, THandler, TConnInfo&nbsp;=&nbsp;PeerId&gt; !Freeze for ExpandedSwarm&lt;TBehaviour, TInEvent, TOutEvent, THandler, TConnInfo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SwarmPollParameters&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TBehaviour, TConnInfo&gt; Freeze for SwarmBuilder&lt;TBehaviour, TConnInfo&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBehaviour: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DummyBehaviour","synthetic":true,"types":[]},{"text":"impl&lt;TInEvent, TOutEvent&gt; Freeze for NetworkBehaviourAction&lt;TInEvent, TOutEvent&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInEvent: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutEvent: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NotifyHandler","synthetic":true,"types":[]},{"text":"impl Freeze for DialPeerCondition","synthetic":true,"types":[]},{"text":"impl&lt;TBvEv, THandleErr&gt; Freeze for SwarmEvent&lt;TBvEv, THandleErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBvEv: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;THandleErr: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DialError","synthetic":true,"types":[]},{"text":"impl Freeze for DummyProtocolsHandler","synthetic":true,"types":[]},{"text":"impl&lt;TProtoHandler, TNewIn, TMap&gt; Freeze for MapInEvent&lt;TProtoHandler, TNewIn, TMap&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TMap: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TProtoHandler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TProtoHandler, TMap&gt; Freeze for MapOutEvent&lt;TProtoHandler, TMap&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TMap: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TProtoHandler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TProtoHandler&gt; Freeze for NodeHandlerWrapper&lt;TProtoHandler&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TProtoHandler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TIntoProtoHandler&gt; Freeze for NodeHandlerWrapperBuilder&lt;TIntoProtoHandler&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TIntoProtoHandler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TUpgrade, TInfo&gt; Freeze for SubstreamProtocol&lt;TUpgrade, TInfo&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInfo: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TUpgrade: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TErr&gt; Freeze for NodeHandlerWrapperError&lt;TErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TErr: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TConnectionUpgrade, TOutboundOpenInfo, TCustom, TErr&gt; Freeze for ProtocolsHandlerEvent&lt;TConnectionUpgrade, TOutboundOpenInfo, TCustom, TErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConnectionUpgrade: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TCustom: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TErr: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutboundOpenInfo: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TUpgrErr&gt; Freeze for ProtocolsHandlerUpgrErr&lt;TUpgrErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUpgrErr: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for KeepAlive","synthetic":true,"types":[]},{"text":"impl&lt;K, H&gt; Freeze for MultiHandler&lt;K, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, H&gt; Freeze for IntoMultiHandler&lt;K, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Freeze for IndexedProtoName&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, I&gt; Freeze for Info&lt;K, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, H&gt; Freeze for Upgrade&lt;K, H&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DuplicateProtonameError","synthetic":true,"types":[]},{"text":"impl&lt;TBehaviour&gt; Freeze for Toggle&lt;TBehaviour&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBehaviour: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TInner&gt; Freeze for ToggleIntoProtoHandler&lt;TInner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInner: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TInner&gt; Freeze for ToggleProtoHandler&lt;TInner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInner: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["libp2p_tcp"] = [{"text":"impl Freeze for TcpConfig","synthetic":true,"types":[]},{"text":"impl Freeze for TcpListenStream","synthetic":true,"types":[]},{"text":"impl Freeze for TcpTransStream","synthetic":true,"types":[]}];
implementors["libp2p_uds"] = [{"text":"impl Freeze for UdsConfig","synthetic":true,"types":[]}];
implementors["libp2p_wasm_ext"] = [{"text":"impl Freeze for ExtTransport","synthetic":true,"types":[]},{"text":"impl Freeze for Dial","synthetic":true,"types":[]},{"text":"impl Freeze for Listen","synthetic":true,"types":[]},{"text":"impl Freeze for Connection","synthetic":true,"types":[]},{"text":"impl Freeze for JsErr","synthetic":true,"types":[]},{"text":"impl Freeze for Transport","synthetic":true,"types":[]},{"text":"impl Freeze for Connection","synthetic":true,"types":[]},{"text":"impl Freeze for ListenEvent","synthetic":true,"types":[]},{"text":"impl Freeze for ConnectionEvent","synthetic":true,"types":[]}];
implementors["libp2p_websocket"] = [{"text":"impl&lt;T&gt; Freeze for WsConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BytesConnection&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Error&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WsConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Connection&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IncomingData","synthetic":true,"types":[]},{"text":"impl Freeze for OutgoingData","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for PrivateKey","synthetic":true,"types":[]},{"text":"impl Freeze for Certificate","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["libp2p_yamux"] = [{"text":"impl&lt;S&gt; !Freeze for Yamux&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OpenSubstreamToken","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for LocalConfig","synthetic":true,"types":[]},{"text":"impl Freeze for YamuxError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Incoming&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LocalIncoming&lt;T&gt;","synthetic":true,"types":[]}];
implementors["librocksdb_sys"] = [{"text":"impl Freeze for __fsid_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_backup_engine_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_backup_engine_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_restore_options_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_cache_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_compactionfilter_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_compactionfiltercontext_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_compactionfilterfactory_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_comparator_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_dbpath_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_env_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_fifo_compaction_options_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_filelock_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_filterpolicy_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_flushoptions_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_logger_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_mergeoperator_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_options_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_compactoptions_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_block_based_table_options_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_cuckoo_table_options_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_randomfile_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_readoptions_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_seqfile_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_slicetransform_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_snapshot_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_writablefile_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_writebatch_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_writebatch_wi_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_writeoptions_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_universal_compaction_options_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_livefiles_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_column_family_handle_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_envoptions_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_ingestexternalfileoptions_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_sstfilewriter_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_ratelimiter_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_perfcontext_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_pinnableslice_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_transactiondb_options_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_transactiondb_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_transaction_options_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_optimistictransactiondb_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_optimistictransaction_options_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_transaction_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_checkpoint_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_wal_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_wal_readoptions_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_memory_consumers_t","synthetic":true,"types":[]},{"text":"impl Freeze for rocksdb_memory_usage_t","synthetic":true,"types":[]},{"text":"impl Freeze for __va_list_tag","synthetic":true,"types":[]}];
implementors["libz_sys"] = [{"text":"impl Freeze for gz_header","synthetic":true,"types":[]},{"text":"impl Freeze for z_stream","synthetic":true,"types":[]},{"text":"impl Freeze for internal_state","synthetic":true,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K, V, S&gt; Freeze for LinkedHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for Entries&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for OccupiedEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linked_hash_set"] = [{"text":"impl&lt;T, S&gt; Freeze for LinkedHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Iter&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for IntoIter&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for SymmetricDifference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]}];
implementors["linregress"] = [{"text":"impl&lt;'a&gt; Freeze for FormulaRegressionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RegressionData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RegressionDataBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegressionModel","synthetic":true,"types":[]},{"text":"impl Freeze for RegressionParameters","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidValueHandling","synthetic":true,"types":[]}];
implementors["lock_api"] = [{"text":"impl Freeze for GuardSend","synthetic":true,"types":[]},{"text":"impl Freeze for GuardNoSend","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; !Freeze for Mutex&lt;R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MutexGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, G, T&gt; !Freeze for ReentrantMutex&lt;R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T:&nbsp;?Sized&gt; Freeze for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T:&nbsp;?Sized&gt; Freeze for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; !Freeze for RwLock&lt;R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for RwLockReadGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for RwLockWriteGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Freeze for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for LevelFilter","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'k&gt; Freeze for Key&lt;'k&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'v&gt; Freeze for Value&lt;'v&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'f&gt; Freeze for Slot&lt;'s, 'f&gt;","synthetic":true,"types":[]}];
implementors["lru"] = [{"text":"impl&lt;K, V, S&gt; Freeze for LruCache&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]}];
implementors["lru_time_cache"] = [{"text":"impl&lt;'a, Key, Value&gt; Freeze for Iter&lt;'a, Key, Value&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Key, Value&gt; Freeze for NotifyIter&lt;'a, Key, Value&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Key, Value&gt; Freeze for PeekIter&lt;'a, Key, Value&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Key, Value&gt; Freeze for VacantEntry&lt;'a, Key, Value&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Value&gt; Freeze for OccupiedEntry&lt;'a, Value&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Key, Value&gt; Freeze for LruCache&lt;Key, Value&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Key, Value&gt; Freeze for TimedEntry&lt;'a, Key, Value&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Key, Value&gt; Freeze for Entry&lt;'a, Key, Value&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["matchers"] = [{"text":"impl&lt;S, A&gt; Freeze for Pattern&lt;S, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, A&gt; Freeze for Matcher&lt;'a, S, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Freeze for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["memmap"] = [{"text":"impl Freeze for MmapOptions","synthetic":true,"types":[]},{"text":"impl Freeze for Mmap","synthetic":true,"types":[]},{"text":"impl Freeze for MmapMut","synthetic":true,"types":[]}];
implementors["memory_db"] = [{"text":"impl&lt;T&gt; Freeze for MemCounter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for NoopTracker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, KF, T, M&gt; Freeze for MemoryDB&lt;H, KF, T, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Freeze for HashKey&lt;H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Freeze for PrefixedKey&lt;H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Freeze for LegacyPrefixedKey&lt;H&gt;","synthetic":true,"types":[]}];
implementors["memory_units"] = [{"text":"impl Freeze for Bytes","synthetic":true,"types":[]},{"text":"impl Freeze for Words","synthetic":true,"types":[]},{"text":"impl Freeze for Pages","synthetic":true,"types":[]},{"text":"impl Freeze for Words","synthetic":true,"types":[]},{"text":"impl Freeze for Pages","synthetic":true,"types":[]}];
implementors["merlin"] = [{"text":"impl Freeze for Transcript","synthetic":true,"types":[]},{"text":"impl Freeze for TranscriptRng","synthetic":true,"types":[]},{"text":"impl Freeze for TranscriptRngBuilder","synthetic":true,"types":[]}];
implementors["minicbor"] = [{"text":"impl&lt;'b&gt; Freeze for Decoder&lt;'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for Probe&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T&gt; Freeze for ArrayIter&lt;'a, 'b, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for BytesIter&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, K, V&gt; Freeze for MapIter&lt;'a, 'b, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for StrIter&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Error&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EndOfSlice","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Freeze for StreamResult","synthetic":true,"types":[]},{"text":"impl Freeze for MZFlush","synthetic":true,"types":[]},{"text":"impl Freeze for MZStatus","synthetic":true,"types":[]},{"text":"impl Freeze for MZError","synthetic":true,"types":[]},{"text":"impl Freeze for DataFormat","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Freeze for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl Freeze for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl Freeze for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl Freeze for TINFLStatus","synthetic":true,"types":[]},{"text":"impl Freeze for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl Freeze for MinReset","synthetic":true,"types":[]},{"text":"impl Freeze for ZeroReset","synthetic":true,"types":[]},{"text":"impl Freeze for FullReset","synthetic":true,"types":[]},{"text":"impl Freeze for InflateState","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl !Freeze for Poll","synthetic":true,"types":[]},{"text":"impl Freeze for Registration","synthetic":true,"types":[]},{"text":"impl Freeze for SetReadiness","synthetic":true,"types":[]},{"text":"impl Freeze for PollOpt","synthetic":true,"types":[]},{"text":"impl Freeze for Ready","synthetic":true,"types":[]},{"text":"impl Freeze for Token","synthetic":true,"types":[]},{"text":"impl Freeze for Events","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for EventedFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UnixReady","synthetic":true,"types":[]},{"text":"impl !Freeze for TcpListener","synthetic":true,"types":[]},{"text":"impl !Freeze for TcpStream","synthetic":true,"types":[]},{"text":"impl !Freeze for UdpSocket","synthetic":true,"types":[]}];
implementors["mio_extras"] = [{"text":"impl&lt;T&gt; !Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SyncSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Timer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Timeout","synthetic":true,"types":[]}];
implementors["mio_uds"] = [{"text":"impl Freeze for UnixStream","synthetic":true,"types":[]},{"text":"impl Freeze for UnixListener","synthetic":true,"types":[]},{"text":"impl Freeze for UnixDatagram","synthetic":true,"types":[]}];
implementors["multihash"] = [{"text":"impl&lt;T&gt; Freeze for MultihashGeneric&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for MultihashRefGeneric&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DecodeOwnedError","synthetic":true,"types":[]},{"text":"impl Freeze for Identity","synthetic":true,"types":[]},{"text":"impl Freeze for Sha1","synthetic":true,"types":[]},{"text":"impl Freeze for Sha2_256","synthetic":true,"types":[]},{"text":"impl Freeze for Sha2_512","synthetic":true,"types":[]},{"text":"impl Freeze for Sha3_224","synthetic":true,"types":[]},{"text":"impl Freeze for Sha3_256","synthetic":true,"types":[]},{"text":"impl Freeze for Sha3_384","synthetic":true,"types":[]},{"text":"impl Freeze for Sha3_512","synthetic":true,"types":[]},{"text":"impl Freeze for Keccak224","synthetic":true,"types":[]},{"text":"impl Freeze for Keccak256","synthetic":true,"types":[]},{"text":"impl Freeze for Keccak384","synthetic":true,"types":[]},{"text":"impl Freeze for Keccak512","synthetic":true,"types":[]},{"text":"impl Freeze for Blake2b256","synthetic":true,"types":[]},{"text":"impl Freeze for Blake2b512","synthetic":true,"types":[]},{"text":"impl Freeze for Blake2s128","synthetic":true,"types":[]},{"text":"impl Freeze for Blake2s256","synthetic":true,"types":[]},{"text":"impl Freeze for DecodeError","synthetic":true,"types":[]},{"text":"impl Freeze for EncodeError","synthetic":true,"types":[]},{"text":"impl Freeze for Code","synthetic":true,"types":[]}];
implementors["multistream_select"] = [{"text":"impl&lt;TInner&gt; !Freeze for Negotiated&lt;TInner&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TInner&gt; !Freeze for NegotiatedComplete&lt;TInner&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, N&gt; !Freeze for ListenerSelectFuture&lt;R, N&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NegotiationError","synthetic":true,"types":[]},{"text":"impl Freeze for ProtocolError","synthetic":true,"types":[]},{"text":"impl Freeze for Version","synthetic":true,"types":[]}];
implementors["nalgebra"] = [{"text":"impl&lt;N, R, C, S&gt; Freeze for Matrix&lt;N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Unit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EuclideanNorm","synthetic":true,"types":[]},{"text":"impl Freeze for LpNorm","synthetic":true,"types":[]},{"text":"impl Freeze for UniformNorm","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; Freeze for ArrayStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&lt;R as DimName&gt;::Value as Mul&lt;&lt;C as DimName&gt;::Value&gt;&gt;::Output as ArrayLength&lt;N&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, RStride, CStride&gt; Freeze for SliceStorage&lt;'a, N, R, C, RStride, CStride&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;CStride: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;RStride: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, RStride, CStride&gt; Freeze for SliceStorageMut&lt;'a, N, R, C, RStride, CStride&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;CStride: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;RStride: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; Freeze for VecStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ShapeConstraint","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for X&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for XY&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for XYZ&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for XYZW&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for XYZWA&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for XYZWAB&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for IJKW&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M2x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M2x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M2x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M2x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M2x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M3x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M3x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M3x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M3x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M3x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M4x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M4x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M4x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M4x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M4x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M5x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M5x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M5x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M5x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M5x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M6x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M6x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M6x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M6x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M6x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultAllocator","synthetic":true,"types":[]},{"text":"impl Freeze for Dynamic","synthetic":true,"types":[]},{"text":"impl Freeze for U1","synthetic":true,"types":[]},{"text":"impl Freeze for U0","synthetic":true,"types":[]},{"text":"impl Freeze for U2","synthetic":true,"types":[]},{"text":"impl Freeze for U3","synthetic":true,"types":[]},{"text":"impl Freeze for U4","synthetic":true,"types":[]},{"text":"impl Freeze for U5","synthetic":true,"types":[]},{"text":"impl Freeze for U6","synthetic":true,"types":[]},{"text":"impl Freeze for U7","synthetic":true,"types":[]},{"text":"impl Freeze for U8","synthetic":true,"types":[]},{"text":"impl Freeze for U9","synthetic":true,"types":[]},{"text":"impl Freeze for U10","synthetic":true,"types":[]},{"text":"impl Freeze for U11","synthetic":true,"types":[]},{"text":"impl Freeze for U12","synthetic":true,"types":[]},{"text":"impl Freeze for U13","synthetic":true,"types":[]},{"text":"impl Freeze for U14","synthetic":true,"types":[]},{"text":"impl Freeze for U15","synthetic":true,"types":[]},{"text":"impl Freeze for U16","synthetic":true,"types":[]},{"text":"impl Freeze for U17","synthetic":true,"types":[]},{"text":"impl Freeze for U18","synthetic":true,"types":[]},{"text":"impl Freeze for U19","synthetic":true,"types":[]},{"text":"impl Freeze for U20","synthetic":true,"types":[]},{"text":"impl Freeze for U21","synthetic":true,"types":[]},{"text":"impl Freeze for U22","synthetic":true,"types":[]},{"text":"impl Freeze for U23","synthetic":true,"types":[]},{"text":"impl Freeze for U24","synthetic":true,"types":[]},{"text":"impl Freeze for U25","synthetic":true,"types":[]},{"text":"impl Freeze for U26","synthetic":true,"types":[]},{"text":"impl Freeze for U27","synthetic":true,"types":[]},{"text":"impl Freeze for U28","synthetic":true,"types":[]},{"text":"impl Freeze for U29","synthetic":true,"types":[]},{"text":"impl Freeze for U30","synthetic":true,"types":[]},{"text":"impl Freeze for U31","synthetic":true,"types":[]},{"text":"impl Freeze for U32","synthetic":true,"types":[]},{"text":"impl Freeze for U33","synthetic":true,"types":[]},{"text":"impl Freeze for U34","synthetic":true,"types":[]},{"text":"impl Freeze for U35","synthetic":true,"types":[]},{"text":"impl Freeze for U36","synthetic":true,"types":[]},{"text":"impl Freeze for U37","synthetic":true,"types":[]},{"text":"impl Freeze for U38","synthetic":true,"types":[]},{"text":"impl Freeze for U39","synthetic":true,"types":[]},{"text":"impl Freeze for U40","synthetic":true,"types":[]},{"text":"impl Freeze for U41","synthetic":true,"types":[]},{"text":"impl Freeze for U42","synthetic":true,"types":[]},{"text":"impl Freeze for U43","synthetic":true,"types":[]},{"text":"impl Freeze for U44","synthetic":true,"types":[]},{"text":"impl Freeze for U45","synthetic":true,"types":[]},{"text":"impl Freeze for U46","synthetic":true,"types":[]},{"text":"impl Freeze for U47","synthetic":true,"types":[]},{"text":"impl Freeze for U48","synthetic":true,"types":[]},{"text":"impl Freeze for U49","synthetic":true,"types":[]},{"text":"impl Freeze for U50","synthetic":true,"types":[]},{"text":"impl Freeze for U51","synthetic":true,"types":[]},{"text":"impl Freeze for U52","synthetic":true,"types":[]},{"text":"impl Freeze for U53","synthetic":true,"types":[]},{"text":"impl Freeze for U54","synthetic":true,"types":[]},{"text":"impl Freeze for U55","synthetic":true,"types":[]},{"text":"impl Freeze for U56","synthetic":true,"types":[]},{"text":"impl Freeze for U57","synthetic":true,"types":[]},{"text":"impl Freeze for U58","synthetic":true,"types":[]},{"text":"impl Freeze for U59","synthetic":true,"types":[]},{"text":"impl Freeze for U60","synthetic":true,"types":[]},{"text":"impl Freeze for U61","synthetic":true,"types":[]},{"text":"impl Freeze for U62","synthetic":true,"types":[]},{"text":"impl Freeze for U63","synthetic":true,"types":[]},{"text":"impl Freeze for U64","synthetic":true,"types":[]},{"text":"impl Freeze for U65","synthetic":true,"types":[]},{"text":"impl Freeze for U66","synthetic":true,"types":[]},{"text":"impl Freeze for U67","synthetic":true,"types":[]},{"text":"impl Freeze for U68","synthetic":true,"types":[]},{"text":"impl Freeze for U69","synthetic":true,"types":[]},{"text":"impl Freeze for U70","synthetic":true,"types":[]},{"text":"impl Freeze for U71","synthetic":true,"types":[]},{"text":"impl Freeze for U72","synthetic":true,"types":[]},{"text":"impl Freeze for U73","synthetic":true,"types":[]},{"text":"impl Freeze for U74","synthetic":true,"types":[]},{"text":"impl Freeze for U75","synthetic":true,"types":[]},{"text":"impl Freeze for U76","synthetic":true,"types":[]},{"text":"impl Freeze for U77","synthetic":true,"types":[]},{"text":"impl Freeze for U78","synthetic":true,"types":[]},{"text":"impl Freeze for U79","synthetic":true,"types":[]},{"text":"impl Freeze for U80","synthetic":true,"types":[]},{"text":"impl Freeze for U81","synthetic":true,"types":[]},{"text":"impl Freeze for U82","synthetic":true,"types":[]},{"text":"impl Freeze for U83","synthetic":true,"types":[]},{"text":"impl Freeze for U84","synthetic":true,"types":[]},{"text":"impl Freeze for U85","synthetic":true,"types":[]},{"text":"impl Freeze for U86","synthetic":true,"types":[]},{"text":"impl Freeze for U87","synthetic":true,"types":[]},{"text":"impl Freeze for U88","synthetic":true,"types":[]},{"text":"impl Freeze for U89","synthetic":true,"types":[]},{"text":"impl Freeze for U90","synthetic":true,"types":[]},{"text":"impl Freeze for U91","synthetic":true,"types":[]},{"text":"impl Freeze for U92","synthetic":true,"types":[]},{"text":"impl Freeze for U93","synthetic":true,"types":[]},{"text":"impl Freeze for U94","synthetic":true,"types":[]},{"text":"impl Freeze for U95","synthetic":true,"types":[]},{"text":"impl Freeze for U96","synthetic":true,"types":[]},{"text":"impl Freeze for U97","synthetic":true,"types":[]},{"text":"impl Freeze for U98","synthetic":true,"types":[]},{"text":"impl Freeze for U99","synthetic":true,"types":[]},{"text":"impl Freeze for U100","synthetic":true,"types":[]},{"text":"impl Freeze for U101","synthetic":true,"types":[]},{"text":"impl Freeze for U102","synthetic":true,"types":[]},{"text":"impl Freeze for U103","synthetic":true,"types":[]},{"text":"impl Freeze for U104","synthetic":true,"types":[]},{"text":"impl Freeze for U105","synthetic":true,"types":[]},{"text":"impl Freeze for U106","synthetic":true,"types":[]},{"text":"impl Freeze for U107","synthetic":true,"types":[]},{"text":"impl Freeze for U108","synthetic":true,"types":[]},{"text":"impl Freeze for U109","synthetic":true,"types":[]},{"text":"impl Freeze for U110","synthetic":true,"types":[]},{"text":"impl Freeze for U111","synthetic":true,"types":[]},{"text":"impl Freeze for U112","synthetic":true,"types":[]},{"text":"impl Freeze for U113","synthetic":true,"types":[]},{"text":"impl Freeze for U114","synthetic":true,"types":[]},{"text":"impl Freeze for U115","synthetic":true,"types":[]},{"text":"impl Freeze for U116","synthetic":true,"types":[]},{"text":"impl Freeze for U117","synthetic":true,"types":[]},{"text":"impl Freeze for U118","synthetic":true,"types":[]},{"text":"impl Freeze for U119","synthetic":true,"types":[]},{"text":"impl Freeze for U120","synthetic":true,"types":[]},{"text":"impl Freeze for U121","synthetic":true,"types":[]},{"text":"impl Freeze for U122","synthetic":true,"types":[]},{"text":"impl Freeze for U123","synthetic":true,"types":[]},{"text":"impl Freeze for U124","synthetic":true,"types":[]},{"text":"impl Freeze for U125","synthetic":true,"types":[]},{"text":"impl Freeze for U126","synthetic":true,"types":[]},{"text":"impl Freeze for U127","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Freeze for MatrixIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Storage&lt;N, R, C&gt;&gt;::CStride: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Storage&lt;N, R, C&gt;&gt;::RStride: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Freeze for MatrixIterMut&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Storage&lt;N, R, C&gt;&gt;::CStride: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Storage&lt;N, R, C&gt;&gt;::RStride: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Freeze for RowIter&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Freeze for RowIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Freeze for ColumnIter&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Freeze for ColumnIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Freeze for Point&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Freeze for Rotation&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze + Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Freeze for Translation&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, R&gt; !Freeze for Isometry&lt;N, D, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, R&gt; !Freeze for Similarity&lt;N, D, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, C&gt; !Freeze for Transform&lt;N, D, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, S&gt; Freeze for Reflection&lt;N, D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Orthographic3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze + Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Perspective3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TGeneral","synthetic":true,"types":[]},{"text":"impl Freeze for TProjective","synthetic":true,"types":[]},{"text":"impl Freeze for TAffine","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Freeze for Bidiagonal&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Freeze for Cholesky&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Freeze for FullPivLU&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Freeze for Hessenberg&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Freeze for LU&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !Freeze for PermutationSequence&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Freeze for QR&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Freeze for Schur&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Freeze for SVD&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Freeze for SymmetricEigen&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Freeze for SymmetricTridiagonal&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for GivensRotation&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ComplexField&gt;::RealField: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["names"] = [{"text":"impl&lt;'a&gt; Freeze for Generator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Name","synthetic":true,"types":[]}];
implementors["net2"] = [{"text":"impl !Freeze for TcpBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for UdpBuilder","synthetic":true,"types":[]}];
implementors["nix"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Dir","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; Freeze for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Entry","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Errno","synthetic":true,"types":[]},{"text":"impl Freeze for AtFlags","synthetic":true,"types":[]},{"text":"impl Freeze for OFlag","synthetic":true,"types":[]},{"text":"impl Freeze for SealFlag","synthetic":true,"types":[]},{"text":"impl Freeze for FdFlag","synthetic":true,"types":[]},{"text":"impl Freeze for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl Freeze for FallocateFlags","synthetic":true,"types":[]},{"text":"impl Freeze for PosixFadviseAdvice","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FlockArg","synthetic":true,"types":[]},{"text":"impl Freeze for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl Freeze for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl Freeze for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MsFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MntFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl Freeze for FdFlag","synthetic":true,"types":[]},{"text":"impl Freeze for MqAttr","synthetic":true,"types":[]},{"text":"impl Freeze for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl Freeze for PollFd","synthetic":true,"types":[]},{"text":"impl Freeze for PollFlags","synthetic":true,"types":[]},{"text":"impl Freeze for OpenptyResult","synthetic":true,"types":[]},{"text":"impl Freeze for ForkptyResult","synthetic":true,"types":[]},{"text":"impl Freeze for PtyMaster","synthetic":true,"types":[]},{"text":"impl Freeze for CloneFlags","synthetic":true,"types":[]},{"text":"impl Freeze for CpuSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl Freeze for LioOpcode","synthetic":true,"types":[]},{"text":"impl Freeze for LioMode","synthetic":true,"types":[]},{"text":"impl Freeze for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for EpollFlags","synthetic":true,"types":[]},{"text":"impl Freeze for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl Freeze for EpollEvent","synthetic":true,"types":[]},{"text":"impl Freeze for EpollOp","synthetic":true,"types":[]},{"text":"impl Freeze for EfdFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl Freeze for ProtFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MapFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MsFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MmapAdvise","synthetic":true,"types":[]},{"text":"impl Freeze for Options","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Dqblk","synthetic":true,"types":[]},{"text":"impl Freeze for QuotaType","synthetic":true,"types":[]},{"text":"impl Freeze for QuotaFmt","synthetic":true,"types":[]},{"text":"impl Freeze for RebootMode","synthetic":true,"types":[]},{"text":"impl Freeze for FdSet","synthetic":true,"types":[]},{"text":"impl Freeze for SigEvent","synthetic":true,"types":[]},{"text":"impl Freeze for SignalIterator","synthetic":true,"types":[]},{"text":"impl Freeze for SaFlags","synthetic":true,"types":[]},{"text":"impl Freeze for SigSet","synthetic":true,"types":[]},{"text":"impl Freeze for SigAction","synthetic":true,"types":[]},{"text":"impl Freeze for Signal","synthetic":true,"types":[]},{"text":"impl Freeze for SigmaskHow","synthetic":true,"types":[]},{"text":"impl Freeze for SigHandler","synthetic":true,"types":[]},{"text":"impl Freeze for SigevNotify","synthetic":true,"types":[]},{"text":"impl Freeze for SfdFlags","synthetic":true,"types":[]},{"text":"impl Freeze for SignalFd","synthetic":true,"types":[]},{"text":"impl Freeze for UnixAddr","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl Freeze for LinkAddr","synthetic":true,"types":[]},{"text":"impl Freeze for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl Freeze for AlgAddr","synthetic":true,"types":[]},{"text":"impl Freeze for VsockAddr","synthetic":true,"types":[]},{"text":"impl Freeze for SockFlag","synthetic":true,"types":[]},{"text":"impl Freeze for MsgFlags","synthetic":true,"types":[]},{"text":"impl Freeze for UnixCredentials","synthetic":true,"types":[]},{"text":"impl Freeze for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AddressFamily","synthetic":true,"types":[]},{"text":"impl Freeze for SockAddr","synthetic":true,"types":[]},{"text":"impl Freeze for InetAddr","synthetic":true,"types":[]},{"text":"impl Freeze for IpAddr","synthetic":true,"types":[]},{"text":"impl Freeze for SockType","synthetic":true,"types":[]},{"text":"impl Freeze for SockProtocol","synthetic":true,"types":[]},{"text":"impl Freeze for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SockLevel","synthetic":true,"types":[]},{"text":"impl Freeze for Shutdown","synthetic":true,"types":[]},{"text":"impl Freeze for ReuseAddr","synthetic":true,"types":[]},{"text":"impl Freeze for ReusePort","synthetic":true,"types":[]},{"text":"impl Freeze for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl Freeze for Linger","synthetic":true,"types":[]},{"text":"impl Freeze for IpAddMembership","synthetic":true,"types":[]},{"text":"impl Freeze for IpDropMembership","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl Freeze for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl Freeze for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl Freeze for SendTimeout","synthetic":true,"types":[]},{"text":"impl Freeze for Broadcast","synthetic":true,"types":[]},{"text":"impl Freeze for OobInline","synthetic":true,"types":[]},{"text":"impl Freeze for SocketError","synthetic":true,"types":[]},{"text":"impl Freeze for KeepAlive","synthetic":true,"types":[]},{"text":"impl Freeze for PeerCredentials","synthetic":true,"types":[]},{"text":"impl Freeze for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl Freeze for RcvBuf","synthetic":true,"types":[]},{"text":"impl Freeze for SndBuf","synthetic":true,"types":[]},{"text":"impl Freeze for RcvBufForce","synthetic":true,"types":[]},{"text":"impl Freeze for SndBufForce","synthetic":true,"types":[]},{"text":"impl Freeze for SockType","synthetic":true,"types":[]},{"text":"impl Freeze for AcceptConn","synthetic":true,"types":[]},{"text":"impl Freeze for OriginalDst","synthetic":true,"types":[]},{"text":"impl Freeze for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl Freeze for IpTransparent","synthetic":true,"types":[]},{"text":"impl Freeze for Mark","synthetic":true,"types":[]},{"text":"impl Freeze for PassCred","synthetic":true,"types":[]},{"text":"impl Freeze for TcpCongestion","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl Freeze for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AlgSetKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SFlag","synthetic":true,"types":[]},{"text":"impl Freeze for Mode","synthetic":true,"types":[]},{"text":"impl Freeze for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl Freeze for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Statfs","synthetic":true,"types":[]},{"text":"impl Freeze for FsType","synthetic":true,"types":[]},{"text":"impl Freeze for FsFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Statvfs","synthetic":true,"types":[]},{"text":"impl Freeze for SysInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for Termios","synthetic":true,"types":[]},{"text":"impl Freeze for InputFlags","synthetic":true,"types":[]},{"text":"impl Freeze for OutputFlags","synthetic":true,"types":[]},{"text":"impl Freeze for ControlFlags","synthetic":true,"types":[]},{"text":"impl Freeze for LocalFlags","synthetic":true,"types":[]},{"text":"impl Freeze for BaudRate","synthetic":true,"types":[]},{"text":"impl Freeze for SetArg","synthetic":true,"types":[]},{"text":"impl Freeze for FlushArg","synthetic":true,"types":[]},{"text":"impl Freeze for FlowArg","synthetic":true,"types":[]},{"text":"impl Freeze for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl Freeze for TimeSpec","synthetic":true,"types":[]},{"text":"impl Freeze for TimeVal","synthetic":true,"types":[]},{"text":"impl Freeze for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IoVec&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UtsName","synthetic":true,"types":[]},{"text":"impl Freeze for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl Freeze for WaitStatus","synthetic":true,"types":[]},{"text":"impl Freeze for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl Freeze for InitFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Inotify","synthetic":true,"types":[]},{"text":"impl Freeze for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for InotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for UContext","synthetic":true,"types":[]},{"text":"impl Freeze for Uid","synthetic":true,"types":[]},{"text":"impl Freeze for Gid","synthetic":true,"types":[]},{"text":"impl Freeze for Pid","synthetic":true,"types":[]},{"text":"impl Freeze for AccessFlags","synthetic":true,"types":[]},{"text":"impl Freeze for User","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for ForkResult","synthetic":true,"types":[]},{"text":"impl Freeze for FchownatFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Whence","synthetic":true,"types":[]},{"text":"impl Freeze for LinkatFlags","synthetic":true,"types":[]},{"text":"impl Freeze for UnlinkatFlags","synthetic":true,"types":[]},{"text":"impl Freeze for PathconfVar","synthetic":true,"types":[]},{"text":"impl Freeze for SysconfVar","synthetic":true,"types":[]}];
implementors["nodrop"] = [{"text":"impl&lt;T&gt; Freeze for NoDrop&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["nohash_hasher"] = [{"text":"impl&lt;T&gt; Freeze for NoHashHasher&lt;T&gt;","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Freeze for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl Freeze for BigUint","synthetic":true,"types":[]},{"text":"impl Freeze for BigInt","synthetic":true,"types":[]},{"text":"impl Freeze for Sign","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Freeze for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Freeze for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Freeze for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Freeze for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Freeze for FloatErrorKind","synthetic":true,"types":[]}];
implementors["object"] = [{"text":"impl Freeze for Architecture","synthetic":true,"types":[]},{"text":"impl Freeze for AddressSize","synthetic":true,"types":[]},{"text":"impl Freeze for BinaryFormat","synthetic":true,"types":[]},{"text":"impl Freeze for SectionKind","synthetic":true,"types":[]},{"text":"impl Freeze for SymbolKind","synthetic":true,"types":[]},{"text":"impl Freeze for SymbolScope","synthetic":true,"types":[]},{"text":"impl Freeze for RelocationKind","synthetic":true,"types":[]},{"text":"impl Freeze for RelocationEncoding","synthetic":true,"types":[]},{"text":"impl Freeze for FileFlags","synthetic":true,"types":[]},{"text":"impl Freeze for SectionFlags","synthetic":true,"types":[]},{"text":"impl&lt;Section&gt; Freeze for SymbolFlags&lt;Section&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for LittleEndian","synthetic":true,"types":[]},{"text":"impl Freeze for BigEndian","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U16Bytes&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U32Bytes&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U64Bytes&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I16Bytes&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I32Bytes&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I64Bytes&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Endianness","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for Bytes&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for StringTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for File&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for SegmentIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for Segment&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for SectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for Section&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for SymbolIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for RelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for SectionIndex","synthetic":true,"types":[]},{"text":"impl Freeze for SymbolIndex","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for Symbol&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for SymbolMap&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Relocation","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for CompressedData&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SymbolSection","synthetic":true,"types":[]},{"text":"impl Freeze for RelocationTarget","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionFormat","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for CoffFile&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for SectionTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffSegmentIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffSegment&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffSectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffSection&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for SymbolTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffSymbolIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffRelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Freeze for ElfFile&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfSegmentIterator&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfSegment&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Freeze for SectionTable&lt;'data, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfSectionIterator&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfSection&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Freeze for SymbolTable&lt;'data, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfSymbolIterator&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RelocationSections","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfRelocationIterator&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Freeze for ElfNoteIterator&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Freeze for ElfNote&lt;'data, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Mach&gt; Freeze for MachOFile&lt;'data, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOSegmentIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOSegment&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOSectionIterator&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOSection&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Mach&gt; Freeze for SymbolTable&lt;'data, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOSymbolIterator&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachORelocationIterator&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Pe&gt; Freeze for PeFile&lt;'data, Pe&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Freeze for PeSegmentIterator&lt;'data, 'file, Pe&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Freeze for PeSegment&lt;'data, 'file, Pe&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Freeze for PeSectionIterator&lt;'data, 'file, Pe&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Freeze for PeSection&lt;'data, 'file, Pe&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for PeRelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for WasmFile&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for WasmSegmentIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for WasmSegment&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for WasmSectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for WasmSection&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for WasmSymbolIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for WasmRelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Object","synthetic":true,"types":[]},{"text":"impl Freeze for SectionId","synthetic":true,"types":[]},{"text":"impl Freeze for Section","synthetic":true,"types":[]},{"text":"impl Freeze for SymbolId","synthetic":true,"types":[]},{"text":"impl Freeze for Symbol","synthetic":true,"types":[]},{"text":"impl Freeze for Relocation","synthetic":true,"types":[]},{"text":"impl Freeze for StandardSegment","synthetic":true,"types":[]},{"text":"impl Freeze for StandardSection","synthetic":true,"types":[]},{"text":"impl Freeze for SymbolSection","synthetic":true,"types":[]},{"text":"impl Freeze for Mangling","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for FileHeader32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for FileHeader64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Ident","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SectionHeader32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SectionHeader64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for CompressionHeader32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for CompressionHeader64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Sym32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Sym64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Syminfo32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Syminfo64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Rel32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Rela32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Rel64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Rela64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ProgramHeader32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ProgramHeader64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Dyn32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Dyn64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for NoteHeader32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for NoteHeader64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FatHeader","synthetic":true,"types":[]},{"text":"impl Freeze for FatArch32","synthetic":true,"types":[]},{"text":"impl Freeze for FatArch64","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for MachHeader32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for MachHeader64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for LoadCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for LcStr&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SegmentCommand32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SegmentCommand64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Section32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Section64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Fvmlib&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for FvmlibCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Dylib&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DylibCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SubFrameworkCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SubClientCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SubUmbrellaCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SubLibraryCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for PreboundDylibCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DylinkerCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ThreadCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for RoutinesCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for RoutinesCommand_64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SymtabCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DysymtabCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DylibTableOfContents&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DylibModule32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DylibModule64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DylibReference&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for TwolevelHintsCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for TwolevelHint&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for PrebindCksumCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UuidCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for RpathCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for LinkeditDataCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for EncryptionInfoCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for EncryptionInfoCommand64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for VersionMinCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for BuildVersionCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for BuildToolVersion&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DyldInfoCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for LinkerOptionCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SymSegCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for IdentCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for FvmfileCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for EntryPointCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SourceVersionCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DataInCodeEntry&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for NoteCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Nlist32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Nlist64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Relocation&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RelocationInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ScatteredRelocationInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDosHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageOs2Header","synthetic":true,"types":[]},{"text":"impl Freeze for ImageVxdHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageFileHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDataDirectory","synthetic":true,"types":[]},{"text":"impl Freeze for ImageOptionalHeader32","synthetic":true,"types":[]},{"text":"impl Freeze for ImageRomOptionalHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageOptionalHeader64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageNtHeaders64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageNtHeaders32","synthetic":true,"types":[]},{"text":"impl Freeze for ImageRomHeaders","synthetic":true,"types":[]},{"text":"impl Freeze for Guid","synthetic":true,"types":[]},{"text":"impl Freeze for AnonObjectHeader","synthetic":true,"types":[]},{"text":"impl Freeze for AnonObjectHeaderV2","synthetic":true,"types":[]},{"text":"impl Freeze for AnonObjectHeaderBigobj","synthetic":true,"types":[]},{"text":"impl Freeze for ImageSectionHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageSymbol","synthetic":true,"types":[]},{"text":"impl Freeze for ImageSymbolBytes","synthetic":true,"types":[]},{"text":"impl Freeze for ImageSymbolEx","synthetic":true,"types":[]},{"text":"impl Freeze for ImageSymbolExBytes","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAuxSymbolTokenDef","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAuxSymbolFunction","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAuxSymbolFunctionBeginEnd","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAuxSymbolWeak","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAuxSymbolSection","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAuxSymbolCrc","synthetic":true,"types":[]},{"text":"impl Freeze for ImageRelocation","synthetic":true,"types":[]},{"text":"impl Freeze for ImageLinenumber","synthetic":true,"types":[]},{"text":"impl Freeze for ImageBaseRelocation","synthetic":true,"types":[]},{"text":"impl Freeze for ImageArchiveMemberHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageExportDirectory","synthetic":true,"types":[]},{"text":"impl Freeze for ImageImportByName","synthetic":true,"types":[]},{"text":"impl Freeze for ImageTlsDirectory64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageTlsDirectory32","synthetic":true,"types":[]},{"text":"impl Freeze for ImageImportDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for ImageBoundImportDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for ImageBoundForwarderRef","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDelayloadDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for ImageResourceDirectory","synthetic":true,"types":[]},{"text":"impl Freeze for ImageResourceDirectoryEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageResourceDirectoryString","synthetic":true,"types":[]},{"text":"impl Freeze for ImageResourceDirStringU","synthetic":true,"types":[]},{"text":"impl Freeze for ImageResourceDataEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageLoadConfigCodeIntegrity","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDynamicRelocationTable","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDynamicRelocation32","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDynamicRelocation64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDynamicRelocation32V2","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDynamicRelocation64V2","synthetic":true,"types":[]},{"text":"impl Freeze for ImagePrologueDynamicRelocationHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageEpilogueDynamicRelocationHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageLoadConfigDirectory32","synthetic":true,"types":[]},{"text":"impl Freeze for ImageLoadConfigDirectory64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageHotPatchInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ImageHotPatchBase","synthetic":true,"types":[]},{"text":"impl Freeze for ImageHotPatchHashes","synthetic":true,"types":[]},{"text":"impl Freeze for ImageArmRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageArm64RuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAlpha64RuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAlphaRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageEnclaveConfig32","synthetic":true,"types":[]},{"text":"impl Freeze for ImageEnclaveConfig64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageEnclaveImport","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDebugDirectory","synthetic":true,"types":[]},{"text":"impl Freeze for ImageCoffSymbolsHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDebugMisc","synthetic":true,"types":[]},{"text":"impl Freeze for ImageFunctionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageFunctionEntry64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageSeparateDebugHeader","synthetic":true,"types":[]},{"text":"impl Freeze for NonPagedDebugInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ImageArchitectureEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImportObjectHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageCor20Header","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; !Freeze for OnceCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for OnceCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F&nbsp;=&nbsp;fn() -&gt; T&gt; !Freeze for Lazy&lt;T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F&nbsp;=&nbsp;fn() -&gt; T&gt; !Freeze for Lazy&lt;T, F&gt;","synthetic":true,"types":[]}];
implementors["openssl_probe"] = [{"text":"impl Freeze for ProbeResult","synthetic":true,"types":[]}];
implementors["owning_ref"] = [{"text":"impl&lt;O, T:&nbsp;?Sized&gt; Freeze for OwningRef&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T:&nbsp;?Sized&gt; Freeze for OwningRefMut&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, H&gt; Freeze for OwningHandle&lt;O, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_aura"] = [{"text":"impl&lt;T&gt; Freeze for GenesisConfig&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Authorities&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt;","synthetic":true,"types":[]}];
implementors["pallet_authorship"] = [{"text":"impl&lt;T&gt; Freeze for SealVerify&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; Freeze for OnePerAuthorPerHeight&lt;T, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Error&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt;","synthetic":true,"types":[]}];
implementors["pallet_finality_tracker"] = [{"text":"impl Freeze for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Error&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::BlockNumber: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_grandpa"] = [{"text":"impl&lt;I, R, O&gt; Freeze for EquivocationHandler&lt;I, R, O&gt;","synthetic":true,"types":[]},{"text":"impl&lt;FullIdentification&gt; Freeze for GrandpaEquivocationOffence&lt;FullIdentification&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FullIdentification: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for GrandpaTimeSlot","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for OldStoredPendingChange&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for StoredPendingChange&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for StoredState&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Error&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::BlockNumber: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::KeyOwnerProof: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_randomness_collective_flip"] = [{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt;","synthetic":true,"types":[]}];
implementors["pallet_session"] = [{"text":"impl&lt;Period, Offset&gt; Freeze for PeriodicSessions&lt;Period, Offset&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TestSessionHandler","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for GenesisConfig&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, Inner&gt; Freeze for FindAccountFromAuthorIndex&lt;T, Inner&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Error&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Keys: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_timestamp"] = [{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Now&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Moment: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_transaction_payment"] = [{"text":"impl&lt;T, S, V, M&gt; Freeze for TargetedFeeAdjustment&lt;T, S, V, M&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GenesisConfig","synthetic":true,"types":[]},{"text":"impl Freeze for NextFeeMultiplier","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ChargeTransactionPayment&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Balance: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt;","synthetic":true,"types":[]}];
implementors["pallet_transaction_payment_rpc"] = [{"text":"impl&lt;BlockHash, ResponseType&gt; Freeze for Client&lt;BlockHash, ResponseType&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; Freeze for TransactionPayment&lt;C, P&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["pallet_transaction_payment_rpc_runtime_api"] = [{"text":"impl&lt;Balance&gt; Freeze for RuntimeDispatchInfo&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parity_db"] = [{"text":"impl Freeze for Db","synthetic":true,"types":[]},{"text":"impl Freeze for Options","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["parity_multiaddr"] = [{"text":"impl&lt;'a&gt; Freeze for Onion3Addr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Multiaddr","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Protocol&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FromUrlErr","synthetic":true,"types":[]}];
implementors["parity_scale_codec"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for OptionBool","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for IoReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Compact&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, U&gt; Freeze for Ref&lt;'a, T, U&gt;","synthetic":true,"types":[]}];
implementors["parity_send_wrapper"] = [{"text":"impl&lt;T&gt; Freeze for SendWrapper&lt;T&gt;","synthetic":true,"types":[]}];
implementors["parity_tokio_ipc"] = [{"text":"impl Freeze for SecurityAttributes","synthetic":true,"types":[]},{"text":"impl Freeze for Endpoint","synthetic":true,"types":[]},{"text":"impl Freeze for RemoteId","synthetic":true,"types":[]},{"text":"impl !Freeze for Incoming","synthetic":true,"types":[]},{"text":"impl !Freeze for IpcConnection","synthetic":true,"types":[]}];
implementors["parity_util_mem"] = [{"text":"impl Freeze for MallocSizeOfOps","synthetic":true,"types":[]}];
implementors["parity_wasm"] = [{"text":"impl Freeze for Module","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionSection","synthetic":true,"types":[]},{"text":"impl Freeze for CodeSection","synthetic":true,"types":[]},{"text":"impl Freeze for MemorySection","synthetic":true,"types":[]},{"text":"impl Freeze for DataSection","synthetic":true,"types":[]},{"text":"impl Freeze for ImportSection","synthetic":true,"types":[]},{"text":"impl Freeze for ExportSection","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalSection","synthetic":true,"types":[]},{"text":"impl Freeze for TypeSection","synthetic":true,"types":[]},{"text":"impl Freeze for ElementSection","synthetic":true,"types":[]},{"text":"impl Freeze for TableSection","synthetic":true,"types":[]},{"text":"impl Freeze for CustomSection","synthetic":true,"types":[]},{"text":"impl Freeze for ImportEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ResizableLimits","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryType","synthetic":true,"types":[]},{"text":"impl Freeze for TableType","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalType","synthetic":true,"types":[]},{"text":"impl Freeze for ExportEntry","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalEntry","synthetic":true,"types":[]},{"text":"impl Freeze for VarUint32","synthetic":true,"types":[]},{"text":"impl Freeze for VarUint7","synthetic":true,"types":[]},{"text":"impl Freeze for Uint8","synthetic":true,"types":[]},{"text":"impl Freeze for VarUint1","synthetic":true,"types":[]},{"text":"impl Freeze for VarInt7","synthetic":true,"types":[]},{"text":"impl Freeze for Uint32","synthetic":true,"types":[]},{"text":"impl Freeze for VarInt32","synthetic":true,"types":[]},{"text":"impl Freeze for VarInt64","synthetic":true,"types":[]},{"text":"impl Freeze for Uint64","synthetic":true,"types":[]},{"text":"impl Freeze for VarUint64","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CountedList&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Freeze for CountedWriter&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for CountedListWriter&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionType","synthetic":true,"types":[]},{"text":"impl Freeze for Instructions","synthetic":true,"types":[]},{"text":"impl Freeze for InitExpr","synthetic":true,"types":[]},{"text":"impl Freeze for BrTableData","synthetic":true,"types":[]},{"text":"impl Freeze for Func","synthetic":true,"types":[]},{"text":"impl Freeze for FuncBody","synthetic":true,"types":[]},{"text":"impl Freeze for Local","synthetic":true,"types":[]},{"text":"impl Freeze for ElementSegment","synthetic":true,"types":[]},{"text":"impl Freeze for DataSegment","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IndexMap&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NameSection","synthetic":true,"types":[]},{"text":"impl Freeze for ModuleNameSubsection","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionNameSubsection","synthetic":true,"types":[]},{"text":"impl Freeze for LocalNameSubsection","synthetic":true,"types":[]},{"text":"impl Freeze for RelocSection","synthetic":true,"types":[]},{"text":"impl Freeze for Unparsed","synthetic":true,"types":[]},{"text":"impl Freeze for ImportCountType","synthetic":true,"types":[]},{"text":"impl Freeze for Section","synthetic":true,"types":[]},{"text":"impl Freeze for External","synthetic":true,"types":[]},{"text":"impl Freeze for Internal","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for ValueType","synthetic":true,"types":[]},{"text":"impl Freeze for BlockType","synthetic":true,"types":[]},{"text":"impl Freeze for TableElementType","synthetic":true,"types":[]},{"text":"impl Freeze for Instruction","synthetic":true,"types":[]},{"text":"impl Freeze for RelocationEntry","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for SignatureBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for SignaturesBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for FunctionBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for TypeRefBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for FuncBodyBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionDefinition","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for DataSegmentBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for ExportBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for ExportInternalBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for GlobalBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for ImportBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Identity","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for MemoryBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for ModuleBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for TableBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TableDefinition","synthetic":true,"types":[]},{"text":"impl Freeze for TableEntryDefinition","synthetic":true,"types":[]}];
implementors["parity_ws"] = [{"text":"impl Freeze for Sender","synthetic":true,"types":[]},{"text":"impl Freeze for Frame","synthetic":true,"types":[]},{"text":"impl Freeze for Handshake","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Response","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Settings","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !Freeze for WebSocket&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Message","synthetic":true,"types":[]},{"text":"impl Freeze for CloseCode","synthetic":true,"types":[]},{"text":"impl Freeze for OpCode","synthetic":true,"types":[]},{"text":"impl Freeze for Kind","synthetic":true,"types":[]}];
implementors["parking"] = [{"text":"impl Freeze for Parker","synthetic":true,"types":[]},{"text":"impl Freeze for Unparker","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl !Freeze for Condvar","synthetic":true,"types":[]},{"text":"impl Freeze for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl !Freeze for Once","synthetic":true,"types":[]},{"text":"impl !Freeze for RawMutex","synthetic":true,"types":[]},{"text":"impl !Freeze for RawRwLock","synthetic":true,"types":[]},{"text":"impl Freeze for RawThreadId","synthetic":true,"types":[]},{"text":"impl Freeze for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Freeze for ParkToken","synthetic":true,"types":[]},{"text":"impl Freeze for UnparkResult","synthetic":true,"types":[]},{"text":"impl Freeze for UnparkToken","synthetic":true,"types":[]},{"text":"impl Freeze for SpinWait","synthetic":true,"types":[]},{"text":"impl Freeze for FilterOp","synthetic":true,"types":[]},{"text":"impl Freeze for ParkResult","synthetic":true,"types":[]},{"text":"impl Freeze for RequeueOp","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Freeze for SIMPLE_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl Freeze for QUERY_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl Freeze for DEFAULT_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl Freeze for PATH_SEGMENT_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl Freeze for USERINFO_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for PercentEncode&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["polling"] = [{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl !Freeze for Poller","synthetic":true,"types":[]}];
implementors["poly1305"] = [{"text":"impl Freeze for Poly1305","synthetic":true,"types":[]}];
implementors["polyval"] = [{"text":"impl Freeze for Polyval","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Freeze for YesS3","synthetic":true,"types":[]},{"text":"impl Freeze for NoS3","synthetic":true,"types":[]},{"text":"impl Freeze for YesS4","synthetic":true,"types":[]},{"text":"impl Freeze for NoS4","synthetic":true,"types":[]},{"text":"impl Freeze for YesA1","synthetic":true,"types":[]},{"text":"impl Freeze for NoA1","synthetic":true,"types":[]},{"text":"impl Freeze for YesA2","synthetic":true,"types":[]},{"text":"impl Freeze for NoA2","synthetic":true,"types":[]},{"text":"impl Freeze for YesNI","synthetic":true,"types":[]},{"text":"impl Freeze for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Freeze for SseMachine&lt;S3, S4, NI&gt;","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Freeze for Avx2Machine&lt;NI&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for vec128_storage","synthetic":true,"types":[]},{"text":"impl Freeze for vec256_storage","synthetic":true,"types":[]},{"text":"impl Freeze for vec512_storage","synthetic":true,"types":[]}];
implementors["primitive_types"] = [{"text":"impl Freeze for U128","synthetic":true,"types":[]},{"text":"impl Freeze for U256","synthetic":true,"types":[]},{"text":"impl Freeze for U512","synthetic":true,"types":[]},{"text":"impl Freeze for H128","synthetic":true,"types":[]},{"text":"impl Freeze for H160","synthetic":true,"types":[]},{"text":"impl Freeze for H256","synthetic":true,"types":[]},{"text":"impl Freeze for H512","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Freeze for TokenStream","synthetic":true,"types":[]},{"text":"impl Freeze for LexError","synthetic":true,"types":[]},{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for Punct","synthetic":true,"types":[]},{"text":"impl Freeze for Ident","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for TokenTree","synthetic":true,"types":[]},{"text":"impl Freeze for Delimiter","synthetic":true,"types":[]},{"text":"impl Freeze for Spacing","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl Freeze for Diagnostic","synthetic":true,"types":[]},{"text":"impl Freeze for SpanRange","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]}];
implementors["prometheus"] = [{"text":"impl Freeze for TextEncoder","synthetic":true,"types":[]},{"text":"impl Freeze for Histogram","synthetic":true,"types":[]},{"text":"impl Freeze for HistogramOpts","synthetic":true,"types":[]},{"text":"impl Freeze for HistogramTimer","synthetic":true,"types":[]},{"text":"impl Freeze for Opts","synthetic":true,"types":[]},{"text":"impl Freeze for Registry","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for LabelPair","synthetic":true,"types":[]},{"text":"impl Freeze for Gauge","synthetic":true,"types":[]},{"text":"impl Freeze for Counter","synthetic":true,"types":[]},{"text":"impl Freeze for Quantile","synthetic":true,"types":[]},{"text":"impl Freeze for Summary","synthetic":true,"types":[]},{"text":"impl Freeze for Untyped","synthetic":true,"types":[]},{"text":"impl Freeze for Histogram","synthetic":true,"types":[]},{"text":"impl Freeze for Bucket","synthetic":true,"types":[]},{"text":"impl Freeze for Metric","synthetic":true,"types":[]},{"text":"impl Freeze for MetricFamily","synthetic":true,"types":[]},{"text":"impl Freeze for MetricType","synthetic":true,"types":[]},{"text":"impl !Freeze for AtomicF64","synthetic":true,"types":[]},{"text":"impl !Freeze for AtomicI64","synthetic":true,"types":[]},{"text":"impl !Freeze for AtomicU64","synthetic":true,"types":[]},{"text":"impl&lt;T, V, D&gt; Freeze for AFLocalCounter&lt;T, V, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; Freeze for AFLocalHistogram&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for GenericCounter&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !Freeze for GenericLocalCounter&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for GenericLocalCounterVec&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Desc","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for GenericGauge&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for LocalHistogram","synthetic":true,"types":[]},{"text":"impl !Freeze for LocalHistogramTimer","synthetic":true,"types":[]},{"text":"impl Freeze for LocalHistogramVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MetricVec&lt;T&gt;","synthetic":true,"types":[]}];
implementors["prost"] = [{"text":"impl Freeze for DecodeError","synthetic":true,"types":[]},{"text":"impl Freeze for EncodeError","synthetic":true,"types":[]}];
implementors["pwasm_utils"] = [{"text":"impl Freeze for Module","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RefList&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Entry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for EntryRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for DeleteTransaction&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TargetSymbols","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for SourceTarget","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for TargetRuntime","synthetic":true,"types":[]},{"text":"impl Freeze for UnknownInstruction","synthetic":true,"types":[]},{"text":"impl Freeze for Set","synthetic":true,"types":[]},{"text":"impl Freeze for Metering","synthetic":true,"types":[]},{"text":"impl Freeze for InstructionType","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["quick_error"] = [{"text":"impl&lt;X, E&gt; Freeze for Context&lt;X, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["quicksink"] = [{"text":"impl&lt;S, F, T, A, E&gt; Freeze for SinkImpl&lt;S, F, T, A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Action&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Freeze for Bernoulli","synthetic":true,"types":[]},{"text":"impl Freeze for Open01","synthetic":true,"types":[]},{"text":"impl Freeze for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Freeze for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Binomial","synthetic":true,"types":[]},{"text":"impl Freeze for Cauchy","synthetic":true,"types":[]},{"text":"impl Freeze for Dirichlet","synthetic":true,"types":[]},{"text":"impl Freeze for Exp","synthetic":true,"types":[]},{"text":"impl Freeze for Exp1","synthetic":true,"types":[]},{"text":"impl Freeze for Beta","synthetic":true,"types":[]},{"text":"impl Freeze for ChiSquared","synthetic":true,"types":[]},{"text":"impl Freeze for FisherF","synthetic":true,"types":[]},{"text":"impl Freeze for Gamma","synthetic":true,"types":[]},{"text":"impl Freeze for StudentT","synthetic":true,"types":[]},{"text":"impl Freeze for LogNormal","synthetic":true,"types":[]},{"text":"impl Freeze for Normal","synthetic":true,"types":[]},{"text":"impl Freeze for StandardNormal","synthetic":true,"types":[]},{"text":"impl Freeze for Pareto","synthetic":true,"types":[]},{"text":"impl Freeze for Poisson","synthetic":true,"types":[]},{"text":"impl Freeze for Triangular","synthetic":true,"types":[]},{"text":"impl Freeze for UnitCircle","synthetic":true,"types":[]},{"text":"impl Freeze for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Freeze for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Freeze for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Standard","synthetic":true,"types":[]},{"text":"impl Freeze for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EntropyRng","synthetic":true,"types":[]},{"text":"impl Freeze for SmallRng","synthetic":true,"types":[]},{"text":"impl Freeze for StdRng","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadRng","synthetic":true,"types":[]},{"text":"impl Freeze for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Freeze for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Freeze for SliceChooseIter&lt;'a, S, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Freeze for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Freeze for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Freeze for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_hc"] = [{"text":"impl Freeze for Hc128Rng","synthetic":true,"types":[]},{"text":"impl Freeze for Hc128Core","synthetic":true,"types":[]}];
implementors["rand_isaac"] = [{"text":"impl Freeze for IsaacRng","synthetic":true,"types":[]},{"text":"impl Freeze for IsaacCore","synthetic":true,"types":[]},{"text":"impl Freeze for Isaac64Rng","synthetic":true,"types":[]},{"text":"impl Freeze for Isaac64Core","synthetic":true,"types":[]}];
implementors["rand_jitter"] = [{"text":"impl Freeze for JitterRng","synthetic":true,"types":[]},{"text":"impl Freeze for TimerError","synthetic":true,"types":[]}];
implementors["rand_os"] = [{"text":"impl Freeze for OsRng","synthetic":true,"types":[]}];
implementors["rand_pcg"] = [{"text":"impl Freeze for Lcg64Xsh32","synthetic":true,"types":[]},{"text":"impl Freeze for Lcg128Xsl64","synthetic":true,"types":[]},{"text":"impl Freeze for Mcg128Xsl64","synthetic":true,"types":[]}];
implementors["rand_xorshift"] = [{"text":"impl Freeze for XorShiftRng","synthetic":true,"types":[]}];
implementors["raw_cpuid"] = [{"text":"impl Freeze for CpuId","synthetic":true,"types":[]},{"text":"impl Freeze for CpuIdResult","synthetic":true,"types":[]},{"text":"impl Freeze for VendorInfo","synthetic":true,"types":[]},{"text":"impl Freeze for CacheInfoIter","synthetic":true,"types":[]},{"text":"impl Freeze for CacheInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ProcessorSerial","synthetic":true,"types":[]},{"text":"impl Freeze for FeatureInfo","synthetic":true,"types":[]},{"text":"impl Freeze for CacheParametersIter","synthetic":true,"types":[]},{"text":"impl Freeze for CacheParameter","synthetic":true,"types":[]},{"text":"impl Freeze for MonitorMwaitInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ThermalPowerInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ExtendedFeatures","synthetic":true,"types":[]},{"text":"impl Freeze for DirectCacheAccessInfo","synthetic":true,"types":[]},{"text":"impl Freeze for PerformanceMonitoringInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ExtendedTopologyIter","synthetic":true,"types":[]},{"text":"impl Freeze for ExtendedTopologyLevel","synthetic":true,"types":[]},{"text":"impl Freeze for ExtendedStateInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ExtendedStateIter","synthetic":true,"types":[]},{"text":"impl Freeze for ExtendedState","synthetic":true,"types":[]},{"text":"impl Freeze for RdtMonitoringInfo","synthetic":true,"types":[]},{"text":"impl Freeze for L3MonitoringInfo","synthetic":true,"types":[]},{"text":"impl Freeze for RdtAllocationInfo","synthetic":true,"types":[]},{"text":"impl Freeze for L3CatInfo","synthetic":true,"types":[]},{"text":"impl Freeze for L2CatInfo","synthetic":true,"types":[]},{"text":"impl Freeze for MemBwAllocationInfo","synthetic":true,"types":[]},{"text":"impl Freeze for SgxInfo","synthetic":true,"types":[]},{"text":"impl Freeze for SgxSectionIter","synthetic":true,"types":[]},{"text":"impl Freeze for EpcSection","synthetic":true,"types":[]},{"text":"impl Freeze for ProcessorTraceInfo","synthetic":true,"types":[]},{"text":"impl Freeze for TscInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ProcessorFrequencyInfo","synthetic":true,"types":[]},{"text":"impl Freeze for DatIter","synthetic":true,"types":[]},{"text":"impl Freeze for DatInfo","synthetic":true,"types":[]},{"text":"impl Freeze for SoCVendorInfo","synthetic":true,"types":[]},{"text":"impl Freeze for SoCVendorAttributesIter","synthetic":true,"types":[]},{"text":"impl Freeze for SoCVendorBrand","synthetic":true,"types":[]},{"text":"impl Freeze for HypervisorInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ExtendedFunctionInfo","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryEncryptionInfo","synthetic":true,"types":[]},{"text":"impl Freeze for CacheInfoType","synthetic":true,"types":[]},{"text":"impl Freeze for CacheType","synthetic":true,"types":[]},{"text":"impl Freeze for TopologyType","synthetic":true,"types":[]},{"text":"impl Freeze for SgxSectionInfo","synthetic":true,"types":[]},{"text":"impl Freeze for DatType","synthetic":true,"types":[]},{"text":"impl Freeze for Hypervisor","synthetic":true,"types":[]},{"text":"impl Freeze for L2Associativity","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for FlattenIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; Freeze for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Freeze for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; Freeze for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; Freeze for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Freeze for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Freeze for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; Freeze for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Freeze for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for Iter&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for Chunks&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for ChunksExact&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for Windows&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for ChunksExactMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Freeze for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Freeze for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for Drain&lt;'data, T&gt;","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !Freeze for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !Freeze for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !Freeze for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadPool","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for ThreadPoolBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Configuration","synthetic":true,"types":[]},{"text":"impl Freeze for FnContext","synthetic":true,"types":[]}];
implementors["regalloc"] = [{"text":"impl&lt;T&gt; Freeze for Set&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Reg","synthetic":true,"types":[]},{"text":"impl Freeze for RealReg","synthetic":true,"types":[]},{"text":"impl Freeze for VirtualReg","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Writable&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RealRegUniverse","synthetic":true,"types":[]},{"text":"impl Freeze for RegClassInfo","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RegUsageCollector&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TyIx, Ty&gt; Freeze for TypedIxVec&lt;TyIx, Ty&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Range&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for RegAllocResult&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CheckerErrors","synthetic":true,"types":[]},{"text":"impl Freeze for BacktrackingOptions","synthetic":true,"types":[]},{"text":"impl Freeze for LinearScanOptions","synthetic":true,"types":[]},{"text":"impl Freeze for Options","synthetic":true,"types":[]},{"text":"impl Freeze for StackmapRequestInfo","synthetic":true,"types":[]},{"text":"impl Freeze for IRSnapshot","synthetic":true,"types":[]},{"text":"impl Freeze for RegClass","synthetic":true,"types":[]},{"text":"impl Freeze for SpillSlot","synthetic":true,"types":[]},{"text":"impl Freeze for BlockIx","synthetic":true,"types":[]},{"text":"impl Freeze for InstIx","synthetic":true,"types":[]},{"text":"impl Freeze for AlgorithmWithDefaults","synthetic":true,"types":[]},{"text":"impl Freeze for AnalysisError","synthetic":true,"types":[]},{"text":"impl Freeze for CheckerError","synthetic":true,"types":[]},{"text":"impl Freeze for RegAllocError","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Freeze for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegexBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for RegexSet","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatches","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Freeze for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Freeze for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for RegexSet","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatches","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_automata"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for Regex&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RegexBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for DenseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for SparseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for Premultiplied&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for PremultipliedByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl !Freeze for Parser","synthetic":true,"types":[]},{"text":"impl Freeze for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl Freeze for Position","synthetic":true,"types":[]},{"text":"impl Freeze for WithComments","synthetic":true,"types":[]},{"text":"impl Freeze for Comment","synthetic":true,"types":[]},{"text":"impl Freeze for Alternation","synthetic":true,"types":[]},{"text":"impl Freeze for Concat","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for ClassPerl","synthetic":true,"types":[]},{"text":"impl Freeze for ClassAscii","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Freeze for Assertion","synthetic":true,"types":[]},{"text":"impl Freeze for Repetition","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureName","synthetic":true,"types":[]},{"text":"impl Freeze for SetFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Flags","synthetic":true,"types":[]},{"text":"impl Freeze for FlagsItem","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Ast","synthetic":true,"types":[]},{"text":"impl Freeze for LiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for Class","synthetic":true,"types":[]},{"text":"impl Freeze for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSet","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Freeze for AssertionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Freeze for GroupKind","synthetic":true,"types":[]},{"text":"impl Freeze for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Freeze for Flag","synthetic":true,"types":[]},{"text":"impl Freeze for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Parser","synthetic":true,"types":[]},{"text":"impl Freeze for Printer","synthetic":true,"types":[]},{"text":"impl Freeze for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Hir","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for Repetition","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for HirKind","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for Class","synthetic":true,"types":[]},{"text":"impl Freeze for Anchor","synthetic":true,"types":[]},{"text":"impl Freeze for WordBoundary","synthetic":true,"types":[]},{"text":"impl Freeze for GroupKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Freeze for Literals","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for Printer","synthetic":true,"types":[]},{"text":"impl Freeze for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Translator","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Range","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Sequence","synthetic":true,"types":[]}];
implementors["region"] = [{"text":"impl Freeze for LockGuard","synthetic":true,"types":[]},{"text":"impl Freeze for ProtectGuard","synthetic":true,"types":[]},{"text":"impl Freeze for Protection","synthetic":true,"types":[]},{"text":"impl Freeze for Region","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["ring"] = [{"text":"impl Freeze for TestCase","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for File&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Nonce","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for OpeningKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for SealingKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Aad&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UnboundKey","synthetic":true,"types":[]},{"text":"impl Freeze for LessSafeKey","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl Freeze for SealingKey","synthetic":true,"types":[]},{"text":"impl Freeze for OpeningKey","synthetic":true,"types":[]},{"text":"impl Freeze for HeaderProtectionKey","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for EphemeralPrivateKey","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Positive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Context","synthetic":true,"types":[]},{"text":"impl Freeze for Digest","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Ed25519KeyPair","synthetic":true,"types":[]},{"text":"impl Freeze for EdDSAParameters","synthetic":true,"types":[]},{"text":"impl Freeze for EcdsaSigningAlgorithm","synthetic":true,"types":[]},{"text":"impl Freeze for EcdsaKeyPair","synthetic":true,"types":[]},{"text":"impl Freeze for EcdsaVerificationAlgorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Unspecified","synthetic":true,"types":[]},{"text":"impl Freeze for KeyRejected","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Salt","synthetic":true,"types":[]},{"text":"impl Freeze for Prk","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Freeze for Okm&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl Freeze for Key","synthetic":true,"types":[]},{"text":"impl Freeze for Context","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Document","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Random&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SystemRandom","synthetic":true,"types":[]},{"text":"impl Freeze for RsaParameters","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for RsaPublicKeyComponents&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RsaKeyPair","synthetic":true,"types":[]},{"text":"impl Freeze for RsaSubjectPublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rocksdb"] = [{"text":"impl Freeze for ColumnFamily","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnFamilyDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for LiveFile","synthetic":true,"types":[]},{"text":"impl Freeze for DB","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DBIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DBRawIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DBWALIterator","synthetic":true,"types":[]},{"text":"impl Freeze for BlockBasedOptions","synthetic":true,"types":[]},{"text":"impl Freeze for Cache","synthetic":true,"types":[]},{"text":"impl Freeze for CompactOptions","synthetic":true,"types":[]},{"text":"impl Freeze for DBPath","synthetic":true,"types":[]},{"text":"impl Freeze for Env","synthetic":true,"types":[]},{"text":"impl Freeze for FifoCompactOptions","synthetic":true,"types":[]},{"text":"impl Freeze for FlushOptions","synthetic":true,"types":[]},{"text":"impl Freeze for IngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl Freeze for Options","synthetic":true,"types":[]},{"text":"impl Freeze for PlainTableFactoryOptions","synthetic":true,"types":[]},{"text":"impl Freeze for ReadOptions","synthetic":true,"types":[]},{"text":"impl Freeze for UniversalCompactOptions","synthetic":true,"types":[]},{"text":"impl Freeze for WriteOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DBPinnableSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SliceTransform","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Snapshot&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SstFileWriter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for WriteBatch","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Direction","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IteratorMode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BlockBasedIndexType","synthetic":true,"types":[]},{"text":"impl Freeze for BottommostLevelCompaction","synthetic":true,"types":[]},{"text":"impl Freeze for DBCompactionStyle","synthetic":true,"types":[]},{"text":"impl Freeze for DBCompressionType","synthetic":true,"types":[]},{"text":"impl Freeze for DBRecoveryMode","synthetic":true,"types":[]},{"text":"impl Freeze for DataBlockIndexType","synthetic":true,"types":[]},{"text":"impl Freeze for MemtableFactory","synthetic":true,"types":[]},{"text":"impl Freeze for UniversalCompactionStopStyle","synthetic":true,"types":[]},{"text":"impl Freeze for BackupEngineInfo","synthetic":true,"types":[]},{"text":"impl Freeze for BackupEngine","synthetic":true,"types":[]},{"text":"impl Freeze for BackupEngineOptions","synthetic":true,"types":[]},{"text":"impl Freeze for RestoreOptions","synthetic":true,"types":[]},{"text":"impl Freeze for Checkpoint","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for CompactionFilterCallback&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Decision","synthetic":true,"types":[]},{"text":"impl Freeze for CompactionFilterContext","synthetic":true,"types":[]},{"text":"impl Freeze for MergeOperatorCallback","synthetic":true,"types":[]},{"text":"impl Freeze for MergeOperands","synthetic":true,"types":[]},{"text":"impl Freeze for PerfContext","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryUsageStats","synthetic":true,"types":[]},{"text":"impl Freeze for PerfStatsLevel","synthetic":true,"types":[]},{"text":"impl Freeze for PerfMetric","synthetic":true,"types":[]}];
implementors["rustc_demangle"] = [{"text":"impl&lt;'a&gt; Freeze for Demangle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TryDemangleError","synthetic":true,"types":[]}];
implementors["rustc_hash"] = [{"text":"impl Freeze for FxHasher","synthetic":true,"types":[]}];
implementors["rustc_hex"] = [{"text":"impl&lt;T&gt; Freeze for ToHexIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FromHexIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FromHexError","synthetic":true,"types":[]}];
implementors["rustls"] = [{"text":"impl&lt;'a, S:&nbsp;?Sized, T:&nbsp;?Sized&gt; Freeze for Stream&lt;'a, S, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Freeze for StreamOwned&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RootCertStore","synthetic":true,"types":[]},{"text":"impl Freeze for NoClientSessionStorage","synthetic":true,"types":[]},{"text":"impl !Freeze for ClientSessionMemoryCache","synthetic":true,"types":[]},{"text":"impl Freeze for ClientConfig","synthetic":true,"types":[]},{"text":"impl Freeze for ClientSession","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WriteEarlyData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NoServerSessionStorage","synthetic":true,"types":[]},{"text":"impl !Freeze for ServerSessionMemoryCache","synthetic":true,"types":[]},{"text":"impl Freeze for ServerConfig","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSession","synthetic":true,"types":[]},{"text":"impl Freeze for ResolvesServerCertUsingSNI","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ClientHello&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Ticketer","synthetic":true,"types":[]},{"text":"impl Freeze for NoClientAuth","synthetic":true,"types":[]},{"text":"impl Freeze for AllowAnyAuthenticatedClient","synthetic":true,"types":[]},{"text":"impl Freeze for AllowAnyAnonymousOrAuthenticatedClient","synthetic":true,"types":[]},{"text":"impl Freeze for SupportedCipherSuite","synthetic":true,"types":[]},{"text":"impl Freeze for Certificate","synthetic":true,"types":[]},{"text":"impl Freeze for PrivateKey","synthetic":true,"types":[]},{"text":"impl Freeze for NoKeyLog","synthetic":true,"types":[]},{"text":"impl !Freeze for KeyLogFile","synthetic":true,"types":[]},{"text":"impl Freeze for ProtocolVersion","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureScheme","synthetic":true,"types":[]},{"text":"impl Freeze for CipherSuite","synthetic":true,"types":[]},{"text":"impl Freeze for TLSError","synthetic":true,"types":[]},{"text":"impl Freeze for BulkAlgorithm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Reader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for u24","synthetic":true,"types":[]},{"text":"impl Freeze for Payload","synthetic":true,"types":[]},{"text":"impl Freeze for PayloadU24","synthetic":true,"types":[]},{"text":"impl Freeze for PayloadU16","synthetic":true,"types":[]},{"text":"impl Freeze for PayloadU8","synthetic":true,"types":[]},{"text":"impl Freeze for HashAlgorithm","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureAlgorithm","synthetic":true,"types":[]},{"text":"impl Freeze for ClientCertificateType","synthetic":true,"types":[]},{"text":"impl Freeze for Compression","synthetic":true,"types":[]},{"text":"impl Freeze for ContentType","synthetic":true,"types":[]},{"text":"impl Freeze for HandshakeType","synthetic":true,"types":[]},{"text":"impl Freeze for AlertLevel","synthetic":true,"types":[]},{"text":"impl Freeze for AlertDescription","synthetic":true,"types":[]},{"text":"impl Freeze for HeartbeatMessageType","synthetic":true,"types":[]},{"text":"impl Freeze for ExtensionType","synthetic":true,"types":[]},{"text":"impl Freeze for ServerNameType","synthetic":true,"types":[]},{"text":"impl Freeze for NamedCurve","synthetic":true,"types":[]},{"text":"impl Freeze for NamedGroup","synthetic":true,"types":[]},{"text":"impl Freeze for ECPointFormat","synthetic":true,"types":[]},{"text":"impl Freeze for HeartbeatMode","synthetic":true,"types":[]},{"text":"impl Freeze for ECCurveType","synthetic":true,"types":[]},{"text":"impl Freeze for PSKKeyExchangeMode","synthetic":true,"types":[]},{"text":"impl Freeze for KeyUpdateRequest","synthetic":true,"types":[]},{"text":"impl Freeze for CertificateStatusType","synthetic":true,"types":[]},{"text":"impl Freeze for AlertMessagePayload","synthetic":true,"types":[]},{"text":"impl Freeze for Random","synthetic":true,"types":[]},{"text":"impl Freeze for SessionID","synthetic":true,"types":[]},{"text":"impl Freeze for UnknownExtension","synthetic":true,"types":[]},{"text":"impl Freeze for ServerName","synthetic":true,"types":[]},{"text":"impl Freeze for KeyShareEntry","synthetic":true,"types":[]},{"text":"impl Freeze for PresharedKeyIdentity","synthetic":true,"types":[]},{"text":"impl Freeze for PresharedKeyOffer","synthetic":true,"types":[]},{"text":"impl Freeze for OCSPCertificateStatusRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ClientHelloPayload","synthetic":true,"types":[]},{"text":"impl Freeze for HelloRetryRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ServerHelloPayload","synthetic":true,"types":[]},{"text":"impl Freeze for CertificateEntry","synthetic":true,"types":[]},{"text":"impl Freeze for CertificatePayloadTLS13","synthetic":true,"types":[]},{"text":"impl Freeze for ECParameters","synthetic":true,"types":[]},{"text":"impl Freeze for DigitallySignedStruct","synthetic":true,"types":[]},{"text":"impl Freeze for ClientECDHParams","synthetic":true,"types":[]},{"text":"impl Freeze for ServerECDHParams","synthetic":true,"types":[]},{"text":"impl Freeze for ECDHEServerKeyExchange","synthetic":true,"types":[]},{"text":"impl Freeze for CertificateRequestPayload","synthetic":true,"types":[]},{"text":"impl Freeze for CertificateRequestPayloadTLS13","synthetic":true,"types":[]},{"text":"impl Freeze for NewSessionTicketPayload","synthetic":true,"types":[]},{"text":"impl Freeze for NewSessionTicketPayloadTLS13","synthetic":true,"types":[]},{"text":"impl Freeze for CertificateStatus","synthetic":true,"types":[]},{"text":"impl Freeze for HandshakeMessagePayload","synthetic":true,"types":[]},{"text":"impl Freeze for ServerNamePayload","synthetic":true,"types":[]},{"text":"impl Freeze for CertificateStatusRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ClientExtension","synthetic":true,"types":[]},{"text":"impl Freeze for ServerExtension","synthetic":true,"types":[]},{"text":"impl Freeze for HelloRetryExtension","synthetic":true,"types":[]},{"text":"impl Freeze for CertificateExtension","synthetic":true,"types":[]},{"text":"impl Freeze for KeyExchangeAlgorithm","synthetic":true,"types":[]},{"text":"impl Freeze for ServerKeyExchangePayload","synthetic":true,"types":[]},{"text":"impl Freeze for CertReqExtension","synthetic":true,"types":[]},{"text":"impl Freeze for NewSessionTicketExtension","synthetic":true,"types":[]},{"text":"impl Freeze for HandshakePayload","synthetic":true,"types":[]},{"text":"impl Freeze for ChangeCipherSpecPayload","synthetic":true,"types":[]},{"text":"impl Freeze for Message","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BorrowMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MessagePayload","synthetic":true,"types":[]},{"text":"impl Freeze for MessageError","synthetic":true,"types":[]},{"text":"impl Freeze for ClientSessionKey","synthetic":true,"types":[]},{"text":"impl Freeze for ClientSessionValue","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSessionValue","synthetic":true,"types":[]},{"text":"impl Freeze for MessageDeframer","synthetic":true,"types":[]},{"text":"impl Freeze for MessageFragmenter","synthetic":true,"types":[]},{"text":"impl Freeze for HandshakeJoiner","synthetic":true,"types":[]},{"text":"impl Freeze for CertifiedKey","synthetic":true,"types":[]},{"text":"impl Freeze for RSASigningKey","synthetic":true,"types":[]}];
implementors["rw_stream_sink"] = [{"text":"impl&lt;S&gt; Freeze for RwStreamSink&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Freeze for Buffer","synthetic":true,"types":[]}];
implementors["salsa20"] = [{"text":"impl Freeze for XSalsa20","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Salsa&lt;R&gt;","synthetic":true,"types":[]}];
implementors["sc_basic_authorship"] = [{"text":"impl&lt;A, B, C&gt; Freeze for ProposerFactory&lt;A, B, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, Block, C, A&gt; Freeze for Proposer&lt;B, Block, C, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_block_builder"] = [{"text":"impl&lt;Block, StateBackend&gt; Freeze for BuiltBlock&lt;Block, StateBackend&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;StateBackend as Backend&lt;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing&gt;&gt;::Transaction: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Block, A, B&gt; Freeze for BlockBuilder&lt;'a, Block, A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as ProvideRuntimeApi&lt;Block&gt;&gt;::Api: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_chain_spec"] = [{"text":"impl&lt;G, E&gt; Freeze for ChainSpec&lt;G, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Freeze for LightSyncState&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SerializableLightSyncState","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber, T&gt; Freeze for Forks&lt;BlockNumber, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_cli"] = [{"text":"impl Freeze for BuildSpecCmd","synthetic":true,"types":[]},{"text":"impl Freeze for BuildSyncSpecCmd","synthetic":true,"types":[]},{"text":"impl Freeze for CheckBlockCmd","synthetic":true,"types":[]},{"text":"impl Freeze for ExportBlocksCmd","synthetic":true,"types":[]},{"text":"impl Freeze for ExportStateCmd","synthetic":true,"types":[]},{"text":"impl Freeze for ImportBlocksCmd","synthetic":true,"types":[]},{"text":"impl Freeze for PurgeChainCmd","synthetic":true,"types":[]},{"text":"impl Freeze for SignCmd","synthetic":true,"types":[]},{"text":"impl Freeze for GenerateCmd","synthetic":true,"types":[]},{"text":"impl Freeze for InsertCmd","synthetic":true,"types":[]},{"text":"impl Freeze for InspectKeyCmd","synthetic":true,"types":[]},{"text":"impl Freeze for GenerateNodeKeyCmd","synthetic":true,"types":[]},{"text":"impl Freeze for InspectNodeKeyCmd","synthetic":true,"types":[]},{"text":"impl Freeze for VanityCmd","synthetic":true,"types":[]},{"text":"impl Freeze for VerifyCmd","synthetic":true,"types":[]},{"text":"impl Freeze for RevertCmd","synthetic":true,"types":[]},{"text":"impl Freeze for RunCmd","synthetic":true,"types":[]},{"text":"impl Freeze for DatabaseParams","synthetic":true,"types":[]},{"text":"impl Freeze for ImportParams","synthetic":true,"types":[]},{"text":"impl Freeze for ExecutionStrategiesParams","synthetic":true,"types":[]},{"text":"impl Freeze for KeystoreParams","synthetic":true,"types":[]},{"text":"impl Freeze for NetworkParams","synthetic":true,"types":[]},{"text":"impl Freeze for NodeKeyParams","synthetic":true,"types":[]},{"text":"impl Freeze for OffchainWorkerParams","synthetic":true,"types":[]},{"text":"impl Freeze for PruningParams","synthetic":true,"types":[]},{"text":"impl Freeze for SharedParams","synthetic":true,"types":[]},{"text":"impl Freeze for TransactionPoolParams","synthetic":true,"types":[]},{"text":"impl Freeze for GenericNumber","synthetic":true,"types":[]},{"text":"impl Freeze for BlockNumberOrHash","synthetic":true,"types":[]},{"text":"impl Freeze for CryptoSchemeFlag","synthetic":true,"types":[]},{"text":"impl Freeze for OutputTypeFlag","synthetic":true,"types":[]},{"text":"impl Freeze for NetworkSchemeFlag","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for Runner&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for KeySubcommand","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for WasmExecutionMethod","synthetic":true,"types":[]},{"text":"impl Freeze for TracingReceiver","synthetic":true,"types":[]},{"text":"impl Freeze for NodeKeyType","synthetic":true,"types":[]},{"text":"impl Freeze for CryptoScheme","synthetic":true,"types":[]},{"text":"impl Freeze for OutputType","synthetic":true,"types":[]},{"text":"impl Freeze for ExecutionStrategy","synthetic":true,"types":[]},{"text":"impl Freeze for RpcMethods","synthetic":true,"types":[]},{"text":"impl Freeze for Database","synthetic":true,"types":[]},{"text":"impl Freeze for OffchainWorkerEnabled","synthetic":true,"types":[]}];
implementors["sc_client_api"] = [{"text":"impl&lt;Block&gt; Freeze for ImportSummary&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block, B&gt; Freeze for ClientImportOperation&lt;Block, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&lt;Block&gt;&gt;::BlockImportOperation: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, State, Block&gt; Freeze for KeyIterator&lt;'a, State, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;State: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NewBlockState","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Freeze for ClientInfo&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for MemorySize","synthetic":true,"types":[]},{"text":"impl Freeze for StateDbMemoryInfo","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryInfo","synthetic":true,"types":[]},{"text":"impl Freeze for IoInfo","synthetic":true,"types":[]},{"text":"impl Freeze for UsageInfo","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Freeze for BlockImportNotification&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Freeze for FinalityNotification&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ExecutionStrategies","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !Freeze for ExecutionExtensions&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Freeze for Blockchain&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Freeze for BlockImportOperation&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Codec + Freeze + Ord,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Freeze + Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !Freeze for Backend&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; Freeze for RemoteCallRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; Freeze for RemoteHeaderRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; Freeze for RemoteReadRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; Freeze for RemoteReadChildRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; Freeze for RemoteChangesRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; Freeze for ChangesProof&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; Freeze for RemoteBodyRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Data, Request&gt; Freeze for LocalOrRemote&lt;Data, Request&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Data: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Request: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Freeze for ImportDisplaced&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Freeze for FinalizationDisplaced&lt;H, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Freeze for LeafSet&lt;H, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, N&gt; Freeze for Undo&lt;'a, H, N&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StorageChangeSet","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Freeze for StorageNotifications&lt;Block&gt;","synthetic":true,"types":[]}];
implementors["sc_client_db"] = [{"text":"impl&lt;Block&gt; Freeze for RefTrackingState&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DatabaseSettings","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !Freeze for BlockchainDb&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !Freeze for BlockImportOperation&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !Freeze for Backend&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DatabaseSettingsSrc","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !Freeze for LightStorage&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LocalStorage","synthetic":true,"types":[]},{"text":"impl Freeze for KeyTracker","synthetic":true,"types":[]},{"text":"impl Freeze for ReadWriteTracker","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !Freeze for BenchmarkingState&lt;B&gt;","synthetic":true,"types":[]}];
implementors["sc_consensus"] = [{"text":"impl&lt;B, Block&gt; Freeze for LongestChain&lt;B, Block&gt;","synthetic":true,"types":[]}];
implementors["sc_consensus_aura"] = [{"text":"impl&lt;C, P, CAW&gt; Freeze for AuraVerifier&lt;C, P, CAW&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CAW: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block, C, I, P&gt; Freeze for AuraBlockImport&lt;Block, C, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_consensus_slots"] = [{"text":"impl Freeze for SignedDuration","synthetic":true,"types":[]},{"text":"impl Freeze for SlotInfo","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SlotDuration&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, S&gt; Freeze for CheckedHeader&lt;H, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_executor"] = [{"text":"impl&lt;D&gt; Freeze for NativeExecutor&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for WasmExecutor","synthetic":true,"types":[]},{"text":"impl Freeze for WasmExecutionMethod","synthetic":true,"types":[]}];
implementors["sc_executor_common"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for WasmError","synthetic":true,"types":[]},{"text":"impl Freeze for SupervisorFuncIndex","synthetic":true,"types":[]},{"text":"impl&lt;'a, FE&gt; Freeze for GuestExternals&lt;'a, FE&gt;","synthetic":true,"types":[]},{"text":"impl&lt;FR&gt; Freeze for SandboxInstance&lt;FR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FR: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for GuestEnvironment","synthetic":true,"types":[]},{"text":"impl&lt;FR&gt; Freeze for UnregisteredInstance&lt;FR&gt;","synthetic":true,"types":[]},{"text":"impl&lt;FR&gt; Freeze for Store&lt;FR&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for InstantiationError","synthetic":true,"types":[]},{"text":"impl Freeze for WasmModuleInfo","synthetic":true,"types":[]},{"text":"impl Freeze for DataSegmentsSnapshot","synthetic":true,"types":[]}];
implementors["sc_executor_wasmi"] = [{"text":"impl Freeze for WasmiRuntime","synthetic":true,"types":[]},{"text":"impl Freeze for WasmiInstance","synthetic":true,"types":[]}];
implementors["sc_finality_grandpa"] = [{"text":"impl&lt;H, N&gt; Freeze for SharedAuthoritySet&lt;H, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; Freeze for FinalityProofFragment&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, Block&gt; Freeze for FinalityProofProvider&lt;B, Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Freeze for GrandpaJustificationSender&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Freeze for GrandpaJustificationStream&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Backend, Block, Client, SC&gt; Freeze for GrandpaBlockImport&lt;Backend, Block, Client, SC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SC: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Freeze for GrandpaJustification&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;BE, Block, Client&gt; Freeze for GrandpaLightBlockImport&lt;BE, Block, Client&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for BeforeBestBlockBy&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ThreeQuartersOfTheUnfinalizedChain","synthetic":true,"types":[]},{"text":"impl&lt;Block, B&gt; Freeze for VotingRulesBuilder&lt;Block, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SharedVoterState","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl&lt;Block, C, SC&gt; Freeze for LinkHalf&lt;Block, C, SC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SC: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block, C, N, SC, VR&gt; Freeze for GrandpaParams&lt;Block, C, N, SC, VR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;SC: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;VR: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["sc_informant"] = [{"text":"impl Freeze for OutputFormat","synthetic":true,"types":[]}];
implementors["sc_keystore"] = [{"text":"impl Freeze for Store","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["sc_light"] = [{"text":"impl&lt;S, H&gt; !Freeze for Backend&lt;S, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, S&gt; Freeze for ImportOperation&lt;Block, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Freeze + Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Freeze for GenesisOrUnavailableState&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Blockchain&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, L&gt; Freeze for GenesisCallExecutor&lt;B, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, H, B, S&gt; Freeze for LightDataChecker&lt;E, H, B, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_network"] = [{"text":"impl&lt;B&gt; Freeze for PeerInfo&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, H&gt; !Freeze for NetworkService&lt;B, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, H&gt; !Freeze for NetworkWorker&lt;B, H&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NotificationSender","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for NotificationSenderReady&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for NetworkStatus&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for DhtEvent","synthetic":true,"types":[]},{"text":"impl !Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ObservedRole","synthetic":true,"types":[]},{"text":"impl Freeze for SyncState","synthetic":true,"types":[]},{"text":"impl Freeze for RequestFailure","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !Freeze for OnDemand&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AlwaysBadChecker","synthetic":true,"types":[]},{"text":"impl Freeze for ProtocolConfig","synthetic":true,"types":[]},{"text":"impl Freeze for IncomingRequest","synthetic":true,"types":[]},{"text":"impl&lt;B, H&gt; Freeze for Params&lt;B, H&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DummyFinalityProofRequestBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for EmptyTransactionPool","synthetic":true,"types":[]},{"text":"impl Freeze for ProtocolId","synthetic":true,"types":[]},{"text":"impl Freeze for MultiaddrWithPeerId","synthetic":true,"types":[]},{"text":"impl Freeze for NetworkConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for Role","synthetic":true,"types":[]},{"text":"impl Freeze for TransactionImport","synthetic":true,"types":[]},{"text":"impl Freeze for ParseErr","synthetic":true,"types":[]},{"text":"impl Freeze for TransportConfig","synthetic":true,"types":[]},{"text":"impl Freeze for NonReservedPeerMode","synthetic":true,"types":[]},{"text":"impl Freeze for NodeKeyConfig","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for Secret&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Freeze for QueuedSender&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, M&gt; Freeze for QueueGuard&lt;'a, M&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NetworkState","synthetic":true,"types":[]},{"text":"impl Freeze for Peer","synthetic":true,"types":[]},{"text":"impl Freeze for NotConnectedPeer","synthetic":true,"types":[]},{"text":"impl Freeze for PeerEndpoint","synthetic":true,"types":[]}];
implementors["sc_network_gossip"] = [{"text":"impl&lt;B&gt; Freeze for GossipEngine&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TopicNotification","synthetic":true,"types":[]},{"text":"impl Freeze for DiscardAll","synthetic":true,"types":[]},{"text":"impl Freeze for MessageIntent","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Freeze for ValidationResult&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_offchain"] = [{"text":"impl&lt;Client, Storage, Block&gt; !Freeze for OffchainWorkers&lt;Client, Storage, Block&gt;","synthetic":true,"types":[]}];
implementors["sc_peerset"] = [{"text":"impl Freeze for ReputationChange","synthetic":true,"types":[]},{"text":"impl Freeze for PeersetHandle","synthetic":true,"types":[]},{"text":"impl Freeze for IncomingIndex","synthetic":true,"types":[]},{"text":"impl Freeze for PeersetConfig","synthetic":true,"types":[]},{"text":"impl Freeze for Peerset","synthetic":true,"types":[]},{"text":"impl Freeze for Message","synthetic":true,"types":[]}];
implementors["sc_proposer_metrics"] = [{"text":"impl Freeze for MetricsLink","synthetic":true,"types":[]},{"text":"impl Freeze for Metrics","synthetic":true,"types":[]}];
implementors["sc_rpc"] = [{"text":"impl Freeze for SubscriptionTaskExecutor","synthetic":true,"types":[]},{"text":"impl&lt;P, Client&gt; Freeze for Author&lt;P, Client&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, Client&gt; Freeze for Chain&lt;Block, Client&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Offchain&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, Client&gt; Freeze for State&lt;Block, Client&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, Client&gt; Freeze for ChildState&lt;Block, Client&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for System&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Request&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Header: Header,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_rpc_api"] = [{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Metadata","synthetic":true,"types":[]},{"text":"impl Freeze for DenyUnsafe","synthetic":true,"types":[]},{"text":"impl&lt;Hash, BlockHash&gt; Freeze for Client&lt;Hash, BlockHash&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; Freeze for ExtrinsicOrHash&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Number, Hash, Header, SignedBlock&gt; Freeze for Client&lt;Number, Hash, Header, SignedBlock&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Client","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; Freeze for Client&lt;Hash&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; Freeze for ReadProof&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; Freeze for Client&lt;Hash&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number&gt; Freeze for Client&lt;Hash, Number&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for SystemInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Health","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number&gt; Freeze for PeerInfo&lt;Hash, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NodeRole","synthetic":true,"types":[]}];
implementors["sc_rpc_server"] = [{"text":"impl Freeze for RpcMiddleware","synthetic":true,"types":[]},{"text":"impl Freeze for RpcMetrics","synthetic":true,"types":[]}];
implementors["sc_service"] = [{"text":"impl&lt;'a, TBl, TExPool, TImpQu, TCl&gt; Freeze for BuildNetworkParams&lt;'a, TBl, TExPool, TImpQu, TCl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TImpQu: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NetworkStarter","synthetic":true,"types":[]},{"text":"impl&lt;'a, TBl, TCl, TExPool, TRpc, Backend&gt; Freeze for SpawnTasksParams&lt;'a, TBl, TCl, TExPool, TRpc, Backend&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for NoopRpcExtensionBuilder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SpawnTaskHandle","synthetic":true,"types":[]},{"text":"impl Freeze for TaskManager","synthetic":true,"types":[]},{"text":"impl Freeze for RpcHandlers","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Freeze for NetworkStatusSinks&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TelemetryConnectionSinks","synthetic":true,"types":[]},{"text":"impl&lt;Client, Backend, SelectChain, ImportQueue, TransactionPool, Other&gt; Freeze for PartialComponents&lt;Client, Backend, SelectChain, ImportQueue, TransactionPool, Other&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ImportQueue: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Other: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;SelectChain: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RpcSession","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; Freeze for TransactionPoolAdapter&lt;C, P&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Configuration","synthetic":true,"types":[]},{"text":"impl Freeze for OffchainWorkerConfig","synthetic":true,"types":[]},{"text":"impl Freeze for PrometheusConfig","synthetic":true,"types":[]},{"text":"impl Freeze for TaskExecutor","synthetic":true,"types":[]},{"text":"impl Freeze for TaskType","synthetic":true,"types":[]},{"text":"impl Freeze for KeystoreConfig","synthetic":true,"types":[]},{"text":"impl Freeze for RpcMethods","synthetic":true,"types":[]},{"text":"impl Freeze for BasePath","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["sc_state_db"] = [{"text":"impl&lt;H&gt; Freeze for ChangeSet&lt;H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Freeze for CommitSet&lt;H&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Constraints","synthetic":true,"types":[]},{"text":"impl&lt;BlockHash, Key&gt; !Freeze for StateDb&lt;BlockHash, Key&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Error&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for PinError","synthetic":true,"types":[]},{"text":"impl Freeze for PruningMode","synthetic":true,"types":[]}];
implementors["sc_telemetry"] = [{"text":"impl Freeze for TelemetryConfig","synthetic":true,"types":[]},{"text":"impl Freeze for TelemetryEndpoints","synthetic":true,"types":[]},{"text":"impl Freeze for Telemetry","synthetic":true,"types":[]},{"text":"impl Freeze for TelemetryEvent","synthetic":true,"types":[]}];
implementors["sc_tracing"] = [{"text":"impl !Freeze for ProfilingLayer","synthetic":true,"types":[]},{"text":"impl Freeze for TraceEvent","synthetic":true,"types":[]},{"text":"impl Freeze for SpanDatum","synthetic":true,"types":[]},{"text":"impl Freeze for Values","synthetic":true,"types":[]},{"text":"impl Freeze for LogTraceHandler","synthetic":true,"types":[]},{"text":"impl Freeze for TelemetryTraceHandler","synthetic":true,"types":[]},{"text":"impl Freeze for TracingReceiver","synthetic":true,"types":[]}];
implementors["sc_transaction_graph"] = [{"text":"impl&lt;B&gt; Freeze for Pool&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Options","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Ex, Error&gt; Freeze for ValidatedTransaction&lt;Hash, Ex, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Ex&gt; Freeze for PruneStatus&lt;Hash, Ex&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Extrinsic&gt; Freeze for Transaction&lt;Hash, Extrinsic&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Extrinsic: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Ex&gt; !Freeze for BasePool&lt;Hash, Ex&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Limit","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Ex&gt; Freeze for Imported&lt;Hash, Ex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, BH&gt; Freeze for Watcher&lt;H, BH&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, BH&gt; Freeze for Sender&lt;H, BH&gt;","synthetic":true,"types":[]}];
implementors["sc_transaction_pool"] = [{"text":"impl&lt;Client, Block&gt; Freeze for FullChainApi&lt;Client, Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Client, F, Block&gt; Freeze for LightChainApi&lt;Client, F, Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;PoolApi, Block&gt; Freeze for BasicPool&lt;PoolApi, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RevalidationType","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["schnorrkel"] = [{"text":"impl Freeze for RistrettoBoth","synthetic":true,"types":[]},{"text":"impl Freeze for MiniSecretKey","synthetic":true,"types":[]},{"text":"impl Freeze for SecretKey","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for Keypair","synthetic":true,"types":[]},{"text":"impl Freeze for ExpansionMode","synthetic":true,"types":[]},{"text":"impl Freeze for SigningContext","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Freeze for XoFTranscript&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, R&gt; !Freeze for SigningTranscriptWithRng&lt;T, R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Malleable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for VRFOutput","synthetic":true,"types":[]},{"text":"impl Freeze for VRFInOut","synthetic":true,"types":[]},{"text":"impl Freeze for VRFProof","synthetic":true,"types":[]},{"text":"impl Freeze for VRFProofBatchable","synthetic":true,"types":[]},{"text":"impl Freeze for ChainCode","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for ExtendedKey&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ECQVCertSecret","synthetic":true,"types":[]},{"text":"impl Freeze for ECQVCertPublic","synthetic":true,"types":[]},{"text":"impl Freeze for MultiSignatureStage","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureError","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for AggregatePublicKeySlice&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Commitment","synthetic":true,"types":[]},{"text":"impl Freeze for Reveal","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for MuSig&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for CommitStage&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for RevealStage&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CosignStage","synthetic":true,"types":[]},{"text":"impl Freeze for Cosignature","synthetic":true,"types":[]},{"text":"impl Freeze for CollectStage","synthetic":true,"types":[]}];
implementors["scoped_tls"] = [{"text":"impl&lt;T&gt; Freeze for ScopedKey&lt;T&gt;","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Freeze for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Always","synthetic":true,"types":[]}];
implementors["scroll"] = [{"text":"impl Freeze for Uleb128","synthetic":true,"types":[]},{"text":"impl Freeze for Sleb128","synthetic":true,"types":[]},{"text":"impl Freeze for Endian","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for StrCtx","synthetic":true,"types":[]}];
implementors["sct"] = [{"text":"impl&lt;'a&gt; Freeze for Log&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["secp256k1"] = [{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for SecretKey","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for RecoveryId","synthetic":true,"types":[]},{"text":"impl Freeze for Message","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for SharedSecret&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as Digest&gt;::OutputSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKeyFormat","synthetic":true,"types":[]},{"text":"impl Freeze for Field","synthetic":true,"types":[]},{"text":"impl Freeze for Affine","synthetic":true,"types":[]},{"text":"impl Freeze for Jacobian","synthetic":true,"types":[]},{"text":"impl Freeze for AffineStorage","synthetic":true,"types":[]},{"text":"impl Freeze for Scalar","synthetic":true,"types":[]},{"text":"impl Freeze for ECMultContext","synthetic":true,"types":[]},{"text":"impl Freeze for ECMultGenContext","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureArray","synthetic":true,"types":[]}];
implementors["secrecy"] = [{"text":"impl&lt;S&gt; Freeze for Secret&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Freeze for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UnitDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for BoolDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I8Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I16Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for IsizeDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U8Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U16Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UsizeDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for F32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for F64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for CharDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I128Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U128Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for StrDeserializer&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Freeze for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for StringDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for CowStrDeserializer&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Freeze for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Freeze for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Freeze for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Freeze for Impossible&lt;Ok, Error&gt;","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; Freeze for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Freeze for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Freeze for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for Map&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Number","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CharEscape","synthetic":true,"types":[]},{"text":"impl Freeze for Serializer","synthetic":true,"types":[]}];
implementors["sha1"] = [{"text":"impl Freeze for Sha1","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl Freeze for Sha224","synthetic":true,"types":[]},{"text":"impl Freeze for Sha256","synthetic":true,"types":[]},{"text":"impl Freeze for Sha384","synthetic":true,"types":[]},{"text":"impl Freeze for Sha512","synthetic":true,"types":[]},{"text":"impl Freeze for Sha512Trunc224","synthetic":true,"types":[]},{"text":"impl Freeze for Sha512Trunc256","synthetic":true,"types":[]}];
implementors["sha3"] = [{"text":"impl Freeze for Sha3XofReader","synthetic":true,"types":[]},{"text":"impl Freeze for Keccak224","synthetic":true,"types":[]},{"text":"impl Freeze for Keccak256","synthetic":true,"types":[]},{"text":"impl Freeze for Keccak384","synthetic":true,"types":[]},{"text":"impl Freeze for Keccak512","synthetic":true,"types":[]},{"text":"impl Freeze for Keccak256Full","synthetic":true,"types":[]},{"text":"impl Freeze for Sha3_224","synthetic":true,"types":[]},{"text":"impl Freeze for Sha3_256","synthetic":true,"types":[]},{"text":"impl Freeze for Sha3_384","synthetic":true,"types":[]},{"text":"impl Freeze for Sha3_512","synthetic":true,"types":[]},{"text":"impl Freeze for Shake128","synthetic":true,"types":[]},{"text":"impl Freeze for Shake256","synthetic":true,"types":[]}];
implementors["sharded_slab"] = [{"text":"impl Freeze for DefaultConfig","synthetic":true,"types":[]},{"text":"impl&lt;T, C&nbsp;=&nbsp;DefaultConfig&gt; !Freeze for Pool&lt;T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, C&nbsp;=&nbsp;DefaultConfig&gt; !Freeze for Slab&lt;T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, C&gt; Freeze for Entry&lt;'a, T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, C&gt; Freeze for VacantEntry&lt;'a, T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, C&gt; Freeze for OwnedEntry&lt;T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, C&gt; Freeze for Ref&lt;'a, T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, C&gt; Freeze for RefMut&lt;'a, T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, C&gt; Freeze for OwnedRef&lt;T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, C&gt; Freeze for OwnedRefMut&lt;T, C&gt;","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl Freeze for SigId","synthetic":true,"types":[]}];
implementors["signature"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; Freeze for Slab&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["slog"] = [{"text":"impl&lt;D&gt; Freeze for Logger&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Discard","synthetic":true,"types":[]},{"text":"impl&lt;D, F&gt; Freeze for Filter&lt;D, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for LevelFilter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, E&gt; Freeze for MapError&lt;D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D1, D2&gt; Freeze for Duplicate&lt;D1, D2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;D2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for Fuse&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for IgnoreResult&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecordStatic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V, F&gt; Freeze for FnValue&lt;V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PushFnValueSerializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PushFnValue&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ErrorValue&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Freeze for SingleKV&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Freeze for OwnedKV&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BorrowedKV&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedKVList","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for MutexDrainError&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Drain&gt;::Err: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for FilterLevel","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["slog_json"] = [{"text":"impl&lt;W&gt; !Freeze for Json&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for JsonBuilder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slog_scope"] = [{"text":"impl Freeze for GlobalLoggerGuard","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["snow"] = [{"text":"impl&lt;'builder&gt; Freeze for Builder&lt;'builder&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Keypair","synthetic":true,"types":[]},{"text":"impl Freeze for HandshakeState","synthetic":true,"types":[]},{"text":"impl Freeze for StatelessTransportState","synthetic":true,"types":[]},{"text":"impl Freeze for TransportState","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for PatternProblem","synthetic":true,"types":[]},{"text":"impl Freeze for InitStage","synthetic":true,"types":[]},{"text":"impl Freeze for Prerequisite","synthetic":true,"types":[]},{"text":"impl Freeze for StateProblem","synthetic":true,"types":[]},{"text":"impl Freeze for HandshakeChoice","synthetic":true,"types":[]},{"text":"impl Freeze for NoiseParams","synthetic":true,"types":[]},{"text":"impl Freeze for HandshakeModifier","synthetic":true,"types":[]},{"text":"impl Freeze for HandshakePattern","synthetic":true,"types":[]},{"text":"impl Freeze for BaseChoice","synthetic":true,"types":[]},{"text":"impl Freeze for DHChoice","synthetic":true,"types":[]},{"text":"impl Freeze for CipherChoice","synthetic":true,"types":[]},{"text":"impl Freeze for HashChoice","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultResolver","synthetic":true,"types":[]},{"text":"impl Freeze for RingResolver","synthetic":true,"types":[]},{"text":"impl Freeze for FallbackResolver","synthetic":true,"types":[]}];
implementors["socket2"] = [{"text":"impl Freeze for SockAddr","synthetic":true,"types":[]},{"text":"impl Freeze for Socket","synthetic":true,"types":[]},{"text":"impl Freeze for Domain","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Protocol","synthetic":true,"types":[]}];
implementors["soketto"] = [{"text":"impl&lt;T, N&gt; Freeze for Parsing&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Storage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UnknownOpCode","synthetic":true,"types":[]},{"text":"impl Freeze for Header","synthetic":true,"types":[]},{"text":"impl Freeze for Codec","synthetic":true,"types":[]},{"text":"impl Freeze for OpCode","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ByteSlice125&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SliceTooLarge","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Data","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Param&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Deflate","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Client&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ServerResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Server&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ClientRequest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Response&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Builder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Mode","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["sp_allocator"] = [{"text":"impl Freeze for FreeingBumpHeapAllocator","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["sp_api"] = [{"text":"impl&lt;'a, Block, C, NC, Backend&gt; Freeze for CallApiAtParams&lt;'a, Block, C, NC, Backend&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NC: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ApiRef&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for OldRuntimeVersion","synthetic":true,"types":[]},{"text":"impl&lt;'a, Block&gt; Freeze for InitializeBlock&lt;'a, Block&gt;","synthetic":true,"types":[]}];
implementors["sp_application_crypto"] = [{"text":"impl Freeze for Public","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for Pair","synthetic":true,"types":[]},{"text":"impl Freeze for Public","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for Pair","synthetic":true,"types":[]},{"text":"impl Freeze for Public","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for Pair","synthetic":true,"types":[]}];
implementors["sp_arithmetic"] = [{"text":"impl Freeze for FixedI64","synthetic":true,"types":[]},{"text":"impl Freeze for FixedI128","synthetic":true,"types":[]},{"text":"impl Freeze for FixedU128","synthetic":true,"types":[]},{"text":"impl Freeze for Percent","synthetic":true,"types":[]},{"text":"impl Freeze for PerU16","synthetic":true,"types":[]},{"text":"impl Freeze for Permill","synthetic":true,"types":[]},{"text":"impl Freeze for Perbill","synthetic":true,"types":[]},{"text":"impl Freeze for Perquintill","synthetic":true,"types":[]},{"text":"impl Freeze for Rational128","synthetic":true,"types":[]},{"text":"impl Freeze for BigUint","synthetic":true,"types":[]}];
implementors["sp_authorship"] = [{"text":"impl&lt;F, H&gt; Freeze for InherentDataProvider&lt;F, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for InherentError","synthetic":true,"types":[]}];
implementors["sp_blockchain"] = [{"text":"impl&lt;Block&gt; Freeze for Info&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Freeze for HashAndNumber&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Freeze for TreeRoute&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !Freeze for HeaderMetadataCache&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Freeze for CachedHeaderMetadata&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ApplyExtrinsicFailed","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for BlockStatus","synthetic":true,"types":[]}];
implementors["sp_chain_spec"] = [{"text":"impl Freeze for ChainType","synthetic":true,"types":[]}];
implementors["sp_consensus"] = [{"text":"impl&lt;Block, Transaction&gt; Freeze for Proposal&lt;Block, Transaction&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Transaction: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NoNetwork","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CanAuthorWithNativeVersion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AlwaysCanAuthor","synthetic":true,"types":[]},{"text":"impl Freeze for NeverCanAuthor","synthetic":true,"types":[]},{"text":"impl Freeze for BlockStatus","synthetic":true,"types":[]},{"text":"impl Freeze for RecordProof","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultBlockAnnounceValidator","synthetic":true,"types":[]},{"text":"impl Freeze for Validation","synthetic":true,"types":[]},{"text":"impl&lt;AuthorityId&gt; Freeze for OfflineTracker&lt;AuthorityId&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ImportedAux","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Freeze for BlockCheckParams&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block, Transaction&gt; Freeze for BlockImportParams&lt;Block, Transaction&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Transaction: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Freeze + Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ImportResult","synthetic":true,"types":[]},{"text":"impl Freeze for BlockOrigin","synthetic":true,"types":[]},{"text":"impl Freeze for ForkChoiceStrategy","synthetic":true,"types":[]},{"text":"impl&lt;B, Transaction&gt; Freeze for BasicQueue&lt;B, Transaction&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for IncomingBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Header: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for BlockImportResult&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BlockImportError","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for BufferedLinkSender&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for BufferedLinkReceiver&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["sp_consensus_aura"] = [{"text":"impl&lt;AuthorityId&gt; Freeze for ConsensusLog&lt;AuthorityId&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for InherentDataProvider","synthetic":true,"types":[]}];
implementors["sp_consensus_slots"] = [{"text":"impl&lt;Header, Id&gt; Freeze for EquivocationProof&lt;Header, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_core"] = [{"text":"impl Freeze for ChangesTrieConfiguration","synthetic":true,"types":[]},{"text":"impl&lt;Number, Hash&gt; Freeze for ChangesTrieConfigurationRange&lt;Number, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Blake2Hasher","synthetic":true,"types":[]},{"text":"impl Freeze for KeccakHasher","synthetic":true,"types":[]},{"text":"impl Freeze for Bytes","synthetic":true,"types":[]},{"text":"impl Freeze for OpaqueMetadata","synthetic":true,"types":[]},{"text":"impl Freeze for OpaquePeerId","synthetic":true,"types":[]},{"text":"impl Freeze for ExecutionContext","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for NativeOrEncoded&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NeverNativeValue","synthetic":true,"types":[]},{"text":"impl Freeze for LogLevel","synthetic":true,"types":[]},{"text":"impl Freeze for Void","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for HexDisplay&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ParseError","synthetic":true,"types":[]},{"text":"impl Freeze for AccountId32","synthetic":true,"types":[]},{"text":"impl Freeze for Dummy","synthetic":true,"types":[]},{"text":"impl Freeze for KeyTypeId","synthetic":true,"types":[]},{"text":"impl Freeze for CryptoTypeId","synthetic":true,"types":[]},{"text":"impl Freeze for CryptoTypePublicPair","synthetic":true,"types":[]},{"text":"impl Freeze for Infallible","synthetic":true,"types":[]},{"text":"impl Freeze for SecretStringError","synthetic":true,"types":[]},{"text":"impl Freeze for DeriveJunction","synthetic":true,"types":[]},{"text":"impl Freeze for PublicError","synthetic":true,"types":[]},{"text":"impl Freeze for Ss58AddressFormat","synthetic":true,"types":[]},{"text":"impl Freeze for _0","synthetic":true,"types":[]},{"text":"impl Freeze for _1","synthetic":true,"types":[]},{"text":"impl Freeze for _2","synthetic":true,"types":[]},{"text":"impl Freeze for _3","synthetic":true,"types":[]},{"text":"impl Freeze for _4","synthetic":true,"types":[]},{"text":"impl Freeze for _5","synthetic":true,"types":[]},{"text":"impl Freeze for _6","synthetic":true,"types":[]},{"text":"impl Freeze for _7","synthetic":true,"types":[]},{"text":"impl Freeze for _8","synthetic":true,"types":[]},{"text":"impl Freeze for _9","synthetic":true,"types":[]},{"text":"impl Freeze for _10","synthetic":true,"types":[]},{"text":"impl Freeze for _11","synthetic":true,"types":[]},{"text":"impl Freeze for _12","synthetic":true,"types":[]},{"text":"impl Freeze for _13","synthetic":true,"types":[]},{"text":"impl Freeze for _14","synthetic":true,"types":[]},{"text":"impl Freeze for _15","synthetic":true,"types":[]},{"text":"impl Freeze for _16","synthetic":true,"types":[]},{"text":"impl Freeze for _17","synthetic":true,"types":[]},{"text":"impl Freeze for _18","synthetic":true,"types":[]},{"text":"impl Freeze for _19","synthetic":true,"types":[]},{"text":"impl Freeze for _20","synthetic":true,"types":[]},{"text":"impl Freeze for _21","synthetic":true,"types":[]},{"text":"impl Freeze for _22","synthetic":true,"types":[]},{"text":"impl Freeze for _23","synthetic":true,"types":[]},{"text":"impl Freeze for _24","synthetic":true,"types":[]},{"text":"impl Freeze for _25","synthetic":true,"types":[]},{"text":"impl Freeze for _26","synthetic":true,"types":[]},{"text":"impl Freeze for _27","synthetic":true,"types":[]},{"text":"impl Freeze for _28","synthetic":true,"types":[]},{"text":"impl Freeze for _29","synthetic":true,"types":[]},{"text":"impl Freeze for _30","synthetic":true,"types":[]},{"text":"impl Freeze for _31","synthetic":true,"types":[]},{"text":"impl Freeze for _32","synthetic":true,"types":[]},{"text":"impl Freeze for _33","synthetic":true,"types":[]},{"text":"impl Freeze for _34","synthetic":true,"types":[]},{"text":"impl Freeze for _35","synthetic":true,"types":[]},{"text":"impl Freeze for _36","synthetic":true,"types":[]},{"text":"impl Freeze for _37","synthetic":true,"types":[]},{"text":"impl Freeze for _38","synthetic":true,"types":[]},{"text":"impl Freeze for _39","synthetic":true,"types":[]},{"text":"impl Freeze for _40","synthetic":true,"types":[]},{"text":"impl Freeze for _41","synthetic":true,"types":[]},{"text":"impl Freeze for _42","synthetic":true,"types":[]},{"text":"impl Freeze for _43","synthetic":true,"types":[]},{"text":"impl Freeze for _44","synthetic":true,"types":[]},{"text":"impl Freeze for _45","synthetic":true,"types":[]},{"text":"impl Freeze for _46","synthetic":true,"types":[]},{"text":"impl Freeze for _47","synthetic":true,"types":[]},{"text":"impl Freeze for _48","synthetic":true,"types":[]},{"text":"impl Freeze for _49","synthetic":true,"types":[]},{"text":"impl Freeze for _50","synthetic":true,"types":[]},{"text":"impl Freeze for _51","synthetic":true,"types":[]},{"text":"impl Freeze for _52","synthetic":true,"types":[]},{"text":"impl Freeze for _53","synthetic":true,"types":[]},{"text":"impl Freeze for _54","synthetic":true,"types":[]},{"text":"impl Freeze for _55","synthetic":true,"types":[]},{"text":"impl Freeze for _56","synthetic":true,"types":[]},{"text":"impl Freeze for _57","synthetic":true,"types":[]},{"text":"impl Freeze for _58","synthetic":true,"types":[]},{"text":"impl Freeze for _59","synthetic":true,"types":[]},{"text":"impl Freeze for _60","synthetic":true,"types":[]},{"text":"impl Freeze for _61","synthetic":true,"types":[]},{"text":"impl Freeze for _62","synthetic":true,"types":[]},{"text":"impl Freeze for _63","synthetic":true,"types":[]},{"text":"impl Freeze for _64","synthetic":true,"types":[]},{"text":"impl Freeze for _65","synthetic":true,"types":[]},{"text":"impl Freeze for _66","synthetic":true,"types":[]},{"text":"impl Freeze for _67","synthetic":true,"types":[]},{"text":"impl Freeze for _68","synthetic":true,"types":[]},{"text":"impl Freeze for _69","synthetic":true,"types":[]},{"text":"impl Freeze for _70","synthetic":true,"types":[]},{"text":"impl Freeze for _71","synthetic":true,"types":[]},{"text":"impl Freeze for _72","synthetic":true,"types":[]},{"text":"impl Freeze for _73","synthetic":true,"types":[]},{"text":"impl Freeze for _74","synthetic":true,"types":[]},{"text":"impl Freeze for _75","synthetic":true,"types":[]},{"text":"impl Freeze for _76","synthetic":true,"types":[]},{"text":"impl Freeze for _77","synthetic":true,"types":[]},{"text":"impl Freeze for _78","synthetic":true,"types":[]},{"text":"impl Freeze for _79","synthetic":true,"types":[]},{"text":"impl Freeze for _80","synthetic":true,"types":[]},{"text":"impl Freeze for _81","synthetic":true,"types":[]},{"text":"impl Freeze for _82","synthetic":true,"types":[]},{"text":"impl Freeze for _83","synthetic":true,"types":[]},{"text":"impl Freeze for _84","synthetic":true,"types":[]},{"text":"impl Freeze for _85","synthetic":true,"types":[]},{"text":"impl Freeze for _86","synthetic":true,"types":[]},{"text":"impl Freeze for _87","synthetic":true,"types":[]},{"text":"impl Freeze for _88","synthetic":true,"types":[]},{"text":"impl Freeze for _89","synthetic":true,"types":[]},{"text":"impl Freeze for _90","synthetic":true,"types":[]},{"text":"impl Freeze for _91","synthetic":true,"types":[]},{"text":"impl Freeze for _92","synthetic":true,"types":[]},{"text":"impl Freeze for _93","synthetic":true,"types":[]},{"text":"impl Freeze for _94","synthetic":true,"types":[]},{"text":"impl Freeze for _95","synthetic":true,"types":[]},{"text":"impl Freeze for _96","synthetic":true,"types":[]},{"text":"impl Freeze for _97","synthetic":true,"types":[]},{"text":"impl Freeze for _98","synthetic":true,"types":[]},{"text":"impl Freeze for _99","synthetic":true,"types":[]},{"text":"impl Freeze for _100","synthetic":true,"types":[]},{"text":"impl Freeze for _112","synthetic":true,"types":[]},{"text":"impl Freeze for _128","synthetic":true,"types":[]},{"text":"impl Freeze for _160","synthetic":true,"types":[]},{"text":"impl Freeze for _192","synthetic":true,"types":[]},{"text":"impl Freeze for _224","synthetic":true,"types":[]},{"text":"impl Freeze for _256","synthetic":true,"types":[]},{"text":"impl Freeze for _384","synthetic":true,"types":[]},{"text":"impl Freeze for _512","synthetic":true,"types":[]},{"text":"impl Freeze for Public","synthetic":true,"types":[]},{"text":"impl Freeze for Pair","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for LocalizedSignature","synthetic":true,"types":[]},{"text":"impl Freeze for PublicError","synthetic":true,"types":[]},{"text":"impl Freeze for DeriveError","synthetic":true,"types":[]},{"text":"impl Freeze for Public","synthetic":true,"types":[]},{"text":"impl Freeze for Pair","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for LocalizedSignature","synthetic":true,"types":[]},{"text":"impl Freeze for Public","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for Pair","synthetic":true,"types":[]},{"text":"impl Freeze for PublicError","synthetic":true,"types":[]},{"text":"impl Freeze for DeriveError","synthetic":true,"types":[]},{"text":"impl Freeze for HttpRequestId","synthetic":true,"types":[]},{"text":"impl Freeze for OpaqueNetworkState","synthetic":true,"types":[]},{"text":"impl Freeze for OpaqueMultiaddr","synthetic":true,"types":[]},{"text":"impl Freeze for Timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for Duration","synthetic":true,"types":[]},{"text":"impl Freeze for Capabilities","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LimitedExternalities&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for OffchainExt","synthetic":true,"types":[]},{"text":"impl Freeze for TransactionPoolExt","synthetic":true,"types":[]},{"text":"impl Freeze for StorageKind","synthetic":true,"types":[]},{"text":"impl Freeze for HttpError","synthetic":true,"types":[]},{"text":"impl Freeze for HttpRequestStatus","synthetic":true,"types":[]},{"text":"impl Freeze for Capability","synthetic":true,"types":[]},{"text":"impl Freeze for InMemOffchainStorage","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Freeze for OffchainOverlayedChangesIter&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OffchainOverlayedChangesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; Freeze for OffchainOverlayedChangesDrain&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OffchainOverlayedChange","synthetic":true,"types":[]},{"text":"impl Freeze for OffchainOverlayedChanges","synthetic":true,"types":[]},{"text":"impl Freeze for PendingRequest","synthetic":true,"types":[]},{"text":"impl Freeze for TestPersistentOffchainDB","synthetic":true,"types":[]},{"text":"impl Freeze for OffchainState","synthetic":true,"types":[]},{"text":"impl Freeze for TestOffchainExt","synthetic":true,"types":[]},{"text":"impl Freeze for PoolState","synthetic":true,"types":[]},{"text":"impl Freeze for TestTransactionPoolExt","synthetic":true,"types":[]},{"text":"impl Freeze for HostError","synthetic":true,"types":[]},{"text":"impl Freeze for Entry","synthetic":true,"types":[]},{"text":"impl Freeze for EnvironmentDefinition","synthetic":true,"types":[]},{"text":"impl Freeze for ExternEntity","synthetic":true,"types":[]},{"text":"impl Freeze for KeystoreExt","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WrappedRuntimeCode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NoneFetchRuntimeCode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RuntimeCode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CodeNotFound","synthetic":true,"types":[]},{"text":"impl Freeze for CallInWasmExt","synthetic":true,"types":[]},{"text":"impl Freeze for TaskExecutorExt","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for MissingHostFunctions","synthetic":true,"types":[]},{"text":"impl Freeze for KeyStore","synthetic":true,"types":[]},{"text":"impl Freeze for TaskExecutor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VRFTranscriptData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for VRFSignature","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VRFTranscriptValue&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["sp_database"] = [{"text":"impl&lt;H&gt; !Freeze for MemDb&lt;H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Freeze for Transaction&lt;H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Freeze for Change&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H&gt; Freeze for ChangeRef&lt;'a, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DatabaseError","synthetic":true,"types":[]}];
implementors["sp_externalities"] = [{"text":"impl Freeze for Extensions","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["sp_finality_grandpa"] = [{"text":"impl&lt;N&gt; Freeze for ScheduledChange&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Freeze for EquivocationProof&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VersionedAuthorityList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OpaqueKeyOwnershipProof","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for ConsensusLog&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Freeze for Equivocation&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_finality_tracker"] = [{"text":"impl&lt;F, N&gt; Freeze for InherentDataProvider&lt;F, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_inherents"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for InherentData","synthetic":true,"types":[]},{"text":"impl Freeze for CheckInherentsResult","synthetic":true,"types":[]},{"text":"impl Freeze for InherentDataProviders","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for MakeFatalError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_io"] = [{"text":"impl Freeze for VerificationExt","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Crossing&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EcdsaVerifyError","synthetic":true,"types":[]},{"text":"impl Freeze for HostFunctions","synthetic":true,"types":[]},{"text":"impl Freeze for HostFunctions","synthetic":true,"types":[]},{"text":"impl Freeze for HostFunctions","synthetic":true,"types":[]},{"text":"impl Freeze for HostFunctions","synthetic":true,"types":[]},{"text":"impl Freeze for HostFunctions","synthetic":true,"types":[]},{"text":"impl Freeze for HostFunctions","synthetic":true,"types":[]},{"text":"impl Freeze for HostFunctions","synthetic":true,"types":[]},{"text":"impl Freeze for HostFunctions","synthetic":true,"types":[]},{"text":"impl Freeze for HostFunctions","synthetic":true,"types":[]},{"text":"impl Freeze for HostFunctions","synthetic":true,"types":[]},{"text":"impl Freeze for HostFunctions","synthetic":true,"types":[]}];
implementors["sp_keyring"] = [{"text":"impl Freeze for KeyringIter","synthetic":true,"types":[]},{"text":"impl Freeze for ParseKeyringError","synthetic":true,"types":[]},{"text":"impl Freeze for Keyring","synthetic":true,"types":[]},{"text":"impl Freeze for KeyringIter","synthetic":true,"types":[]},{"text":"impl Freeze for Keyring","synthetic":true,"types":[]}];
implementors["sp_panic_handler"] = [{"text":"impl Freeze for AbortGuard","synthetic":true,"types":[]}];
implementors["sp_rpc"] = [{"text":"impl Freeze for TryFromIntError","synthetic":true,"types":[]},{"text":"impl Freeze for NumberOrHex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ListOrValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_runtime"] = [{"text":"impl&lt;Hash&gt; Freeze for Digest&lt;Hash&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ModuleId","synthetic":true,"types":[]},{"text":"impl Freeze for AnySignature","synthetic":true,"types":[]},{"text":"impl&lt;Info&gt; Freeze for DispatchErrorWithPostInfo&lt;Info&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Info: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for OpaqueExtrinsic","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureBatching","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeString","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; Freeze for DigestItem&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for MultiSignature","synthetic":true,"types":[]},{"text":"impl Freeze for MultiSigner","synthetic":true,"types":[]},{"text":"impl Freeze for DispatchError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for TransactionOutcome&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PiecewiseLinear&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Address, Call, Signature, Extra&gt; Freeze for UncheckedExtrinsic&lt;Address, Call, Signature, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Address: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Signature: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Call, Extra&gt; Freeze for SignedPayload&lt;Call, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Extra as SignedExtension&gt;::AdditionalSigned: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Call, Extra&gt; Freeze for CheckedExtrinsic&lt;AccountId, Call, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Number, Hash&gt; Freeze for Header&lt;Number, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Hash as Hash&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header, Extrinsic&gt; Freeze for Block&lt;Header, Extrinsic&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Freeze for SignedBlock&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Era","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Freeze for BlockId&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Hash&gt; Freeze for DigestItemRef&lt;'a, Hash&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OpaqueDigestItemId&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ChangesTrieSignal","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Request&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for PendingRequest","synthetic":true,"types":[]},{"text":"impl Freeze for Response","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseBody","synthetic":true,"types":[]},{"text":"impl Freeze for Headers","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for HeadersIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StorageValueRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Time","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for BlockAndTimeDeadline&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as BlockNumberProvider&gt;::BlockNumber: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for BlockAndTime&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Freeze for StorageLock&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, L&gt; Freeze for StorageLockGuard&lt;'a, 'b, L&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UintAuthorityId","synthetic":true,"types":[]},{"text":"impl Freeze for TestSignature","synthetic":true,"types":[]},{"text":"impl&lt;Xt&gt; Freeze for ExtrinsicWrapper&lt;Xt&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Xt: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Xt&gt; Freeze for Block&lt;Xt&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Call, Extra&gt; Freeze for TestXt&lt;Call, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BadOrigin","synthetic":true,"types":[]},{"text":"impl Freeze for LookupError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IdentityLookup&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Identity","synthetic":true,"types":[]},{"text":"impl Freeze for ConvertInto","synthetic":true,"types":[]},{"text":"impl Freeze for BlakeTwo256","synthetic":true,"types":[]},{"text":"impl Freeze for Keccak256","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for AppendZerosInput&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TrailingZeroInput&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ValidTransaction","synthetic":true,"types":[]},{"text":"impl Freeze for ValidTransactionBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidTransaction","synthetic":true,"types":[]},{"text":"impl Freeze for UnknownTransaction","synthetic":true,"types":[]},{"text":"impl Freeze for TransactionValidityError","synthetic":true,"types":[]},{"text":"impl Freeze for TransactionSource","synthetic":true,"types":[]},{"text":"impl&lt;Hashing&gt; Freeze for RandomNumberGenerator&lt;Hashing&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Hashing as Hash&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_runtime_interface"] = [{"text":"impl&lt;T&gt; !Freeze for ExchangeableFunction&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RestoreImplementation&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, O&gt; Freeze for WrappedFFIValue&lt;T, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Codec&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; Freeze for Inner&lt;T, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Enum&lt;T&gt;","synthetic":true,"types":[]}];
implementors["sp_session"] = [{"text":"impl Freeze for MembershipProof","synthetic":true,"types":[]}];
implementors["sp_staking"] = [{"text":"impl&lt;Reporter, Offender&gt; Freeze for OffenceDetails&lt;Reporter, Offender&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offender: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for OffenceError","synthetic":true,"types":[]}];
implementors["sp_state_machine"] = [{"text":"impl&lt;H, N&nbsp;=&nbsp;u64&gt; !Freeze for TestExternalities&lt;H, N&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BasicExternalities","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, B&gt; Freeze for ReadOnlyExternalities&lt;'a, H, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number&gt; Freeze for AnchorBlockId&lt;Hash, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, Number&gt; Freeze for State&lt;'a, H, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, Number&gt; !Freeze for InMemoryStorage&lt;H, Number&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Freeze for BuildCache&lt;H, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N&gt; Freeze for ConfigurationRange&lt;'a, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, H&gt; Freeze for ProvingBackend&lt;'a, S, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, H&gt; Freeze for ProvingBackendRecorder&lt;'a, S, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, H, N, Exec&gt; !Freeze for StateMachine&lt;'a, B, H, N, Exec&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for OverlayedChanges","synthetic":true,"types":[]},{"text":"impl&lt;Transaction, H, N&gt; Freeze for StorageChanges&lt;Transaction, H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Transaction: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Transaction, H, N&gt; Freeze for StorageTransactionCache&lt;Transaction, H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Transaction: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, H&gt; Freeze for TrieBackend&lt;S, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UsageInfo","synthetic":true,"types":[]},{"text":"impl Freeze for UsageUnit","synthetic":true,"types":[]},{"text":"impl !Freeze for StateMachineStats","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, N, B&gt; Freeze for Ext&lt;'a, H, N, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Freeze for CacheAction&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ExecutionError","synthetic":true,"types":[]},{"text":"impl Freeze for ExecutionStrategy","synthetic":true,"types":[]},{"text":"impl Freeze for BackendTrustLevel","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for ExecutionManager&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, H&gt; Freeze for BackendRuntimeCode&lt;'a, B, H&gt;","synthetic":true,"types":[]}];
implementors["sp_std"] = [{"text":"impl Freeze for Writer","synthetic":true,"types":[]}];
implementors["sp_storage"] = [{"text":"impl Freeze for StorageKey","synthetic":true,"types":[]},{"text":"impl Freeze for TrackedStorageKey","synthetic":true,"types":[]},{"text":"impl Freeze for PrefixedStorageKey","synthetic":true,"types":[]},{"text":"impl Freeze for StorageData","synthetic":true,"types":[]},{"text":"impl Freeze for StorageChild","synthetic":true,"types":[]},{"text":"impl Freeze for Storage","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; Freeze for StorageChangeSet&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ChildTrieParentKeyId","synthetic":true,"types":[]},{"text":"impl Freeze for ChildInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ChildType","synthetic":true,"types":[]}];
implementors["sp_timestamp"] = [{"text":"impl Freeze for InherentDataProvider","synthetic":true,"types":[]},{"text":"impl Freeze for InherentError","synthetic":true,"types":[]}];
implementors["sp_tracing"] = [{"text":"impl Freeze for WasmMetadata","synthetic":true,"types":[]},{"text":"impl Freeze for WasmEntryAttributes","synthetic":true,"types":[]},{"text":"impl Freeze for WasmValuesSet","synthetic":true,"types":[]},{"text":"impl Freeze for WasmFields","synthetic":true,"types":[]},{"text":"impl Freeze for WasmFieldName","synthetic":true,"types":[]},{"text":"impl Freeze for WasmValue","synthetic":true,"types":[]},{"text":"impl Freeze for WasmLevel","synthetic":true,"types":[]}];
implementors["sp_transaction_pool"] = [{"text":"impl Freeze for PoolStatus","synthetic":true,"types":[]},{"text":"impl&lt;Hash, BlockHash&gt; Freeze for TransactionStatus&lt;Hash, BlockHash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockHash: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for ChainEvent&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["sp_trie"] = [{"text":"impl Freeze for TrieStream","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Freeze for NodeCodec&lt;H&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StorageProof","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Freeze for Layout&lt;H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, DB, H&gt; Freeze for KeySpacedDB&lt;'a, DB, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, DB, H&gt; Freeze for KeySpacedDBMut&lt;'a, DB, H&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["sp_utils"] = [{"text":"impl Freeze for TOKIO_THREADS_TOTAL","synthetic":true,"types":[]},{"text":"impl Freeze for TOKIO_THREADS_ALIVE","synthetic":true,"types":[]},{"text":"impl Freeze for UNBOUNDED_CHANNELS_COUNTER","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TracingUnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TracingUnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for StatusSinks&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ReadySinkEvent&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["sp_version"] = [{"text":"impl Freeze for RuntimeVersion","synthetic":true,"types":[]},{"text":"impl Freeze for NativeVersion","synthetic":true,"types":[]}];
implementors["sp_wasm_interface"] = [{"text":"impl&lt;T&gt; Freeze for Pointer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for ValueType","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl Freeze for ReturnValue","synthetic":true,"types":[]}];
implementors["spin"] = [{"text":"impl&lt;T&gt; !Freeze for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for RwLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockUpgradeableGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Once&lt;T&gt;","synthetic":true,"types":[]}];
implementors["statrs"] = [{"text":"impl Freeze for StatsError","synthetic":true,"types":[]},{"text":"impl Freeze for Bernoulli","synthetic":true,"types":[]},{"text":"impl Freeze for Beta","synthetic":true,"types":[]},{"text":"impl Freeze for Binomial","synthetic":true,"types":[]},{"text":"impl Freeze for Categorical","synthetic":true,"types":[]},{"text":"impl Freeze for Cauchy","synthetic":true,"types":[]},{"text":"impl Freeze for Chi","synthetic":true,"types":[]},{"text":"impl Freeze for ChiSquared","synthetic":true,"types":[]},{"text":"impl Freeze for Dirichlet","synthetic":true,"types":[]},{"text":"impl Freeze for DiscreteUniform","synthetic":true,"types":[]},{"text":"impl Freeze for Erlang","synthetic":true,"types":[]},{"text":"impl Freeze for Exponential","synthetic":true,"types":[]},{"text":"impl Freeze for FisherSnedecor","synthetic":true,"types":[]},{"text":"impl Freeze for Gamma","synthetic":true,"types":[]},{"text":"impl Freeze for Geometric","synthetic":true,"types":[]},{"text":"impl Freeze for Hypergeometric","synthetic":true,"types":[]},{"text":"impl Freeze for InverseGamma","synthetic":true,"types":[]},{"text":"impl Freeze for LogNormal","synthetic":true,"types":[]},{"text":"impl Freeze for Multinomial","synthetic":true,"types":[]},{"text":"impl Freeze for Normal","synthetic":true,"types":[]},{"text":"impl Freeze for Pareto","synthetic":true,"types":[]},{"text":"impl Freeze for Poisson","synthetic":true,"types":[]},{"text":"impl Freeze for StudentsT","synthetic":true,"types":[]},{"text":"impl Freeze for Triangular","synthetic":true,"types":[]},{"text":"impl Freeze for Uniform","synthetic":true,"types":[]},{"text":"impl Freeze for Weibull","synthetic":true,"types":[]},{"text":"impl Freeze for InfinitePeriodic","synthetic":true,"types":[]},{"text":"impl Freeze for Periodic","synthetic":true,"types":[]},{"text":"impl Freeze for InfiniteSinusoidal","synthetic":true,"types":[]},{"text":"impl Freeze for Sinusoidal","synthetic":true,"types":[]},{"text":"impl Freeze for InfiniteSquare","synthetic":true,"types":[]},{"text":"impl Freeze for Square","synthetic":true,"types":[]},{"text":"impl Freeze for InfiniteTriangle","synthetic":true,"types":[]},{"text":"impl Freeze for Triangle","synthetic":true,"types":[]},{"text":"impl Freeze for InfiniteSawtooth","synthetic":true,"types":[]},{"text":"impl Freeze for Sawtooth","synthetic":true,"types":[]},{"text":"impl Freeze for RankTieBreaker","synthetic":true,"types":[]}];
implementors["stream_cipher"] = [{"text":"impl Freeze for InvalidKeyNonceLength","synthetic":true,"types":[]},{"text":"impl Freeze for LoopError","synthetic":true,"types":[]},{"text":"impl Freeze for OverflowError","synthetic":true,"types":[]}];
implementors["string"] = [{"text":"impl&lt;T&gt; Freeze for String&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["strsim"] = [{"text":"impl Freeze for StrSimError","synthetic":true,"types":[]}];
implementors["strum"] = [{"text":"impl Freeze for ParseError","synthetic":true,"types":[]}];
implementors["substrate_bip39"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["substrate_frame_rpc_system"] = [{"text":"impl&lt;BlockHash, AccountId, Index&gt; Freeze for Client&lt;BlockHash, AccountId, Index&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P, C, B&gt; Freeze for FullSystem&lt;P, C, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P, C, F, Block&gt; Freeze for LightSystem&lt;P, C, F, Block&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["subtle"] = [{"text":"impl Freeze for Choice","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl Freeze for Attribute","synthetic":true,"types":[]},{"text":"impl Freeze for MetaList","synthetic":true,"types":[]},{"text":"impl Freeze for MetaNameValue","synthetic":true,"types":[]},{"text":"impl Freeze for Field","synthetic":true,"types":[]},{"text":"impl Freeze for FieldsNamed","synthetic":true,"types":[]},{"text":"impl Freeze for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl Freeze for Variant","synthetic":true,"types":[]},{"text":"impl Freeze for VisCrate","synthetic":true,"types":[]},{"text":"impl Freeze for VisPublic","synthetic":true,"types":[]},{"text":"impl Freeze for VisRestricted","synthetic":true,"types":[]},{"text":"impl Freeze for Arm","synthetic":true,"types":[]},{"text":"impl Freeze for FieldValue","synthetic":true,"types":[]},{"text":"impl Freeze for Label","synthetic":true,"types":[]},{"text":"impl Freeze for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl Freeze for ExprArray","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAssign","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAsync","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAwait","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBinary","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBlock","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBox","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBreak","synthetic":true,"types":[]},{"text":"impl Freeze for ExprCall","synthetic":true,"types":[]},{"text":"impl Freeze for ExprCast","synthetic":true,"types":[]},{"text":"impl Freeze for ExprClosure","synthetic":true,"types":[]},{"text":"impl Freeze for ExprContinue","synthetic":true,"types":[]},{"text":"impl Freeze for ExprField","synthetic":true,"types":[]},{"text":"impl Freeze for ExprForLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ExprGroup","synthetic":true,"types":[]},{"text":"impl Freeze for ExprIf","synthetic":true,"types":[]},{"text":"impl Freeze for ExprIndex","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLet","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLit","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMatch","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl Freeze for ExprParen","synthetic":true,"types":[]},{"text":"impl Freeze for ExprPath","synthetic":true,"types":[]},{"text":"impl Freeze for ExprRange","synthetic":true,"types":[]},{"text":"impl Freeze for ExprReference","synthetic":true,"types":[]},{"text":"impl Freeze for ExprRepeat","synthetic":true,"types":[]},{"text":"impl Freeze for ExprReturn","synthetic":true,"types":[]},{"text":"impl Freeze for ExprStruct","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTry","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTuple","synthetic":true,"types":[]},{"text":"impl Freeze for ExprType","synthetic":true,"types":[]},{"text":"impl Freeze for ExprUnary","synthetic":true,"types":[]},{"text":"impl Freeze for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl Freeze for ExprWhile","synthetic":true,"types":[]},{"text":"impl Freeze for ExprYield","synthetic":true,"types":[]},{"text":"impl Freeze for Index","synthetic":true,"types":[]},{"text":"impl Freeze for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl Freeze for ConstParam","synthetic":true,"types":[]},{"text":"impl Freeze for Generics","synthetic":true,"types":[]},{"text":"impl Freeze for LifetimeDef","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateEq","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateType","synthetic":true,"types":[]},{"text":"impl Freeze for TraitBound","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParam","synthetic":true,"types":[]},{"text":"impl Freeze for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemType","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemConst","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemType","synthetic":true,"types":[]},{"text":"impl Freeze for ItemConst","synthetic":true,"types":[]},{"text":"impl Freeze for ItemEnum","synthetic":true,"types":[]},{"text":"impl Freeze for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl Freeze for ItemFn","synthetic":true,"types":[]},{"text":"impl Freeze for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl Freeze for ItemImpl","synthetic":true,"types":[]},{"text":"impl Freeze for ItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ItemMacro2","synthetic":true,"types":[]},{"text":"impl Freeze for ItemMod","synthetic":true,"types":[]},{"text":"impl Freeze for ItemStatic","synthetic":true,"types":[]},{"text":"impl Freeze for ItemStruct","synthetic":true,"types":[]},{"text":"impl Freeze for ItemTrait","synthetic":true,"types":[]},{"text":"impl Freeze for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl Freeze for ItemType","synthetic":true,"types":[]},{"text":"impl Freeze for ItemUnion","synthetic":true,"types":[]},{"text":"impl Freeze for ItemUse","synthetic":true,"types":[]},{"text":"impl Freeze for Receiver","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemConst","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemType","synthetic":true,"types":[]},{"text":"impl Freeze for UseGlob","synthetic":true,"types":[]},{"text":"impl Freeze for UseGroup","synthetic":true,"types":[]},{"text":"impl Freeze for UseName","synthetic":true,"types":[]},{"text":"impl Freeze for UsePath","synthetic":true,"types":[]},{"text":"impl Freeze for UseRename","synthetic":true,"types":[]},{"text":"impl Freeze for File","synthetic":true,"types":[]},{"text":"impl Freeze for Lifetime","synthetic":true,"types":[]},{"text":"impl Freeze for LitBool","synthetic":true,"types":[]},{"text":"impl Freeze for LitByte","synthetic":true,"types":[]},{"text":"impl Freeze for LitByteStr","synthetic":true,"types":[]},{"text":"impl Freeze for LitChar","synthetic":true,"types":[]},{"text":"impl Freeze for LitFloat","synthetic":true,"types":[]},{"text":"impl Freeze for LitInt","synthetic":true,"types":[]},{"text":"impl Freeze for LitStr","synthetic":true,"types":[]},{"text":"impl Freeze for Macro","synthetic":true,"types":[]},{"text":"impl Freeze for DataEnum","synthetic":true,"types":[]},{"text":"impl Freeze for DataStruct","synthetic":true,"types":[]},{"text":"impl Freeze for DataUnion","synthetic":true,"types":[]},{"text":"impl Freeze for DeriveInput","synthetic":true,"types":[]},{"text":"impl Freeze for Block","synthetic":true,"types":[]},{"text":"impl Freeze for Local","synthetic":true,"types":[]},{"text":"impl Freeze for Abi","synthetic":true,"types":[]},{"text":"impl Freeze for BareFnArg","synthetic":true,"types":[]},{"text":"impl Freeze for TypeArray","synthetic":true,"types":[]},{"text":"impl Freeze for TypeBareFn","synthetic":true,"types":[]},{"text":"impl Freeze for TypeGroup","synthetic":true,"types":[]},{"text":"impl Freeze for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl Freeze for TypeInfer","synthetic":true,"types":[]},{"text":"impl Freeze for TypeMacro","synthetic":true,"types":[]},{"text":"impl Freeze for TypeNever","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParen","synthetic":true,"types":[]},{"text":"impl Freeze for TypePath","synthetic":true,"types":[]},{"text":"impl Freeze for TypePtr","synthetic":true,"types":[]},{"text":"impl Freeze for TypeReference","synthetic":true,"types":[]},{"text":"impl Freeze for TypeSlice","synthetic":true,"types":[]},{"text":"impl Freeze for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl Freeze for TypeTuple","synthetic":true,"types":[]},{"text":"impl Freeze for Variadic","synthetic":true,"types":[]},{"text":"impl Freeze for FieldPat","synthetic":true,"types":[]},{"text":"impl Freeze for PatBox","synthetic":true,"types":[]},{"text":"impl Freeze for PatIdent","synthetic":true,"types":[]},{"text":"impl Freeze for PatLit","synthetic":true,"types":[]},{"text":"impl Freeze for PatMacro","synthetic":true,"types":[]},{"text":"impl Freeze for PatOr","synthetic":true,"types":[]},{"text":"impl Freeze for PatPath","synthetic":true,"types":[]},{"text":"impl Freeze for PatRange","synthetic":true,"types":[]},{"text":"impl Freeze for PatReference","synthetic":true,"types":[]},{"text":"impl Freeze for PatRest","synthetic":true,"types":[]},{"text":"impl Freeze for PatSlice","synthetic":true,"types":[]},{"text":"impl Freeze for PatStruct","synthetic":true,"types":[]},{"text":"impl Freeze for PatTuple","synthetic":true,"types":[]},{"text":"impl Freeze for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl Freeze for PatType","synthetic":true,"types":[]},{"text":"impl Freeze for PatWild","synthetic":true,"types":[]},{"text":"impl Freeze for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Binding","synthetic":true,"types":[]},{"text":"impl Freeze for Constraint","synthetic":true,"types":[]},{"text":"impl Freeze for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Path","synthetic":true,"types":[]},{"text":"impl Freeze for PathSegment","synthetic":true,"types":[]},{"text":"impl Freeze for QSelf","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for AttrStyle","synthetic":true,"types":[]},{"text":"impl Freeze for Meta","synthetic":true,"types":[]},{"text":"impl Freeze for NestedMeta","synthetic":true,"types":[]},{"text":"impl Freeze for Fields","synthetic":true,"types":[]},{"text":"impl Freeze for Visibility","synthetic":true,"types":[]},{"text":"impl Freeze for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl Freeze for RangeLimits","synthetic":true,"types":[]},{"text":"impl Freeze for Expr","synthetic":true,"types":[]},{"text":"impl Freeze for Member","synthetic":true,"types":[]},{"text":"impl Freeze for GenericParam","synthetic":true,"types":[]},{"text":"impl Freeze for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParamBound","synthetic":true,"types":[]},{"text":"impl Freeze for WherePredicate","synthetic":true,"types":[]},{"text":"impl Freeze for FnArg","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItem","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItem","synthetic":true,"types":[]},{"text":"impl Freeze for Item","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItem","synthetic":true,"types":[]},{"text":"impl Freeze for UseTree","synthetic":true,"types":[]},{"text":"impl Freeze for Lit","synthetic":true,"types":[]},{"text":"impl Freeze for StrStyle","synthetic":true,"types":[]},{"text":"impl Freeze for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl Freeze for Data","synthetic":true,"types":[]},{"text":"impl Freeze for BinOp","synthetic":true,"types":[]},{"text":"impl Freeze for UnOp","synthetic":true,"types":[]},{"text":"impl Freeze for Stmt","synthetic":true,"types":[]},{"text":"impl Freeze for ReturnType","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Pat","synthetic":true,"types":[]},{"text":"impl Freeze for GenericArgument","synthetic":true,"types":[]},{"text":"impl Freeze for PathArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Underscore","synthetic":true,"types":[]},{"text":"impl Freeze for Abstract","synthetic":true,"types":[]},{"text":"impl Freeze for As","synthetic":true,"types":[]},{"text":"impl Freeze for Async","synthetic":true,"types":[]},{"text":"impl Freeze for Auto","synthetic":true,"types":[]},{"text":"impl Freeze for Await","synthetic":true,"types":[]},{"text":"impl Freeze for Become","synthetic":true,"types":[]},{"text":"impl Freeze for Box","synthetic":true,"types":[]},{"text":"impl Freeze for Break","synthetic":true,"types":[]},{"text":"impl Freeze for Const","synthetic":true,"types":[]},{"text":"impl Freeze for Continue","synthetic":true,"types":[]},{"text":"impl Freeze for Crate","synthetic":true,"types":[]},{"text":"impl Freeze for Default","synthetic":true,"types":[]},{"text":"impl Freeze for Do","synthetic":true,"types":[]},{"text":"impl Freeze for Dyn","synthetic":true,"types":[]},{"text":"impl Freeze for Else","synthetic":true,"types":[]},{"text":"impl Freeze for Enum","synthetic":true,"types":[]},{"text":"impl Freeze for Extern","synthetic":true,"types":[]},{"text":"impl Freeze for Final","synthetic":true,"types":[]},{"text":"impl Freeze for Fn","synthetic":true,"types":[]},{"text":"impl Freeze for For","synthetic":true,"types":[]},{"text":"impl Freeze for If","synthetic":true,"types":[]},{"text":"impl Freeze for Impl","synthetic":true,"types":[]},{"text":"impl Freeze for In","synthetic":true,"types":[]},{"text":"impl Freeze for Let","synthetic":true,"types":[]},{"text":"impl Freeze for Loop","synthetic":true,"types":[]},{"text":"impl Freeze for Macro","synthetic":true,"types":[]},{"text":"impl Freeze for Match","synthetic":true,"types":[]},{"text":"impl Freeze for Mod","synthetic":true,"types":[]},{"text":"impl Freeze for Move","synthetic":true,"types":[]},{"text":"impl Freeze for Mut","synthetic":true,"types":[]},{"text":"impl Freeze for Override","synthetic":true,"types":[]},{"text":"impl Freeze for Priv","synthetic":true,"types":[]},{"text":"impl Freeze for Pub","synthetic":true,"types":[]},{"text":"impl Freeze for Ref","synthetic":true,"types":[]},{"text":"impl Freeze for Return","synthetic":true,"types":[]},{"text":"impl Freeze for SelfType","synthetic":true,"types":[]},{"text":"impl Freeze for SelfValue","synthetic":true,"types":[]},{"text":"impl Freeze for Static","synthetic":true,"types":[]},{"text":"impl Freeze for Struct","synthetic":true,"types":[]},{"text":"impl Freeze for Super","synthetic":true,"types":[]},{"text":"impl Freeze for Trait","synthetic":true,"types":[]},{"text":"impl Freeze for Try","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Typeof","synthetic":true,"types":[]},{"text":"impl Freeze for Union","synthetic":true,"types":[]},{"text":"impl Freeze for Unsafe","synthetic":true,"types":[]},{"text":"impl Freeze for Unsized","synthetic":true,"types":[]},{"text":"impl Freeze for Use","synthetic":true,"types":[]},{"text":"impl Freeze for Virtual","synthetic":true,"types":[]},{"text":"impl Freeze for Where","synthetic":true,"types":[]},{"text":"impl Freeze for While","synthetic":true,"types":[]},{"text":"impl Freeze for Yield","synthetic":true,"types":[]},{"text":"impl Freeze for Add","synthetic":true,"types":[]},{"text":"impl Freeze for AddEq","synthetic":true,"types":[]},{"text":"impl Freeze for And","synthetic":true,"types":[]},{"text":"impl Freeze for AndAnd","synthetic":true,"types":[]},{"text":"impl Freeze for AndEq","synthetic":true,"types":[]},{"text":"impl Freeze for At","synthetic":true,"types":[]},{"text":"impl Freeze for Bang","synthetic":true,"types":[]},{"text":"impl Freeze for Caret","synthetic":true,"types":[]},{"text":"impl Freeze for CaretEq","synthetic":true,"types":[]},{"text":"impl Freeze for Colon","synthetic":true,"types":[]},{"text":"impl Freeze for Colon2","synthetic":true,"types":[]},{"text":"impl Freeze for Comma","synthetic":true,"types":[]},{"text":"impl Freeze for Div","synthetic":true,"types":[]},{"text":"impl Freeze for DivEq","synthetic":true,"types":[]},{"text":"impl Freeze for Dollar","synthetic":true,"types":[]},{"text":"impl Freeze for Dot","synthetic":true,"types":[]},{"text":"impl Freeze for Dot2","synthetic":true,"types":[]},{"text":"impl Freeze for Dot3","synthetic":true,"types":[]},{"text":"impl Freeze for DotDotEq","synthetic":true,"types":[]},{"text":"impl Freeze for Eq","synthetic":true,"types":[]},{"text":"impl Freeze for EqEq","synthetic":true,"types":[]},{"text":"impl Freeze for Ge","synthetic":true,"types":[]},{"text":"impl Freeze for Gt","synthetic":true,"types":[]},{"text":"impl Freeze for Le","synthetic":true,"types":[]},{"text":"impl Freeze for Lt","synthetic":true,"types":[]},{"text":"impl Freeze for MulEq","synthetic":true,"types":[]},{"text":"impl Freeze for Ne","synthetic":true,"types":[]},{"text":"impl Freeze for Or","synthetic":true,"types":[]},{"text":"impl Freeze for OrEq","synthetic":true,"types":[]},{"text":"impl Freeze for OrOr","synthetic":true,"types":[]},{"text":"impl Freeze for Pound","synthetic":true,"types":[]},{"text":"impl Freeze for Question","synthetic":true,"types":[]},{"text":"impl Freeze for RArrow","synthetic":true,"types":[]},{"text":"impl Freeze for LArrow","synthetic":true,"types":[]},{"text":"impl Freeze for Rem","synthetic":true,"types":[]},{"text":"impl Freeze for RemEq","synthetic":true,"types":[]},{"text":"impl Freeze for FatArrow","synthetic":true,"types":[]},{"text":"impl Freeze for Semi","synthetic":true,"types":[]},{"text":"impl Freeze for Shl","synthetic":true,"types":[]},{"text":"impl Freeze for ShlEq","synthetic":true,"types":[]},{"text":"impl Freeze for Shr","synthetic":true,"types":[]},{"text":"impl Freeze for ShrEq","synthetic":true,"types":[]},{"text":"impl Freeze for Star","synthetic":true,"types":[]},{"text":"impl Freeze for Sub","synthetic":true,"types":[]},{"text":"impl Freeze for SubEq","synthetic":true,"types":[]},{"text":"impl Freeze for Tilde","synthetic":true,"types":[]},{"text":"impl Freeze for Brace","synthetic":true,"types":[]},{"text":"impl Freeze for Bracket","synthetic":true,"types":[]},{"text":"impl Freeze for Paren","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for Punctuated&lt;T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Freeze for Pairs&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Freeze for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; Freeze for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Nothing","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; Freeze for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AddBounds","synthetic":true,"types":[]},{"text":"impl Freeze for BindStyle","synthetic":true,"types":[]}];
implementors["take_mut"] = [{"text":"impl&lt;'s&gt; !Freeze for Scope&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'm, T, F&gt; Freeze for Hole&lt;'c, 'm, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["target_lexicon"] = [{"text":"impl Freeze for Triple","synthetic":true,"types":[]},{"text":"impl Freeze for ParseError","synthetic":true,"types":[]},{"text":"impl Freeze for Aarch64Architecture","synthetic":true,"types":[]},{"text":"impl Freeze for Architecture","synthetic":true,"types":[]},{"text":"impl Freeze for ArmArchitecture","synthetic":true,"types":[]},{"text":"impl Freeze for BinaryFormat","synthetic":true,"types":[]},{"text":"impl Freeze for CustomVendor","synthetic":true,"types":[]},{"text":"impl Freeze for Environment","synthetic":true,"types":[]},{"text":"impl Freeze for OperatingSystem","synthetic":true,"types":[]},{"text":"impl Freeze for Vendor","synthetic":true,"types":[]},{"text":"impl Freeze for CallingConvention","synthetic":true,"types":[]},{"text":"impl Freeze for Endianness","synthetic":true,"types":[]},{"text":"impl Freeze for PointerWidth","synthetic":true,"types":[]}];
implementors["tempfile"] = [{"text":"impl Freeze for TempDir","synthetic":true,"types":[]},{"text":"impl Freeze for NamedTempFile","synthetic":true,"types":[]},{"text":"impl Freeze for PathPersistError","synthetic":true,"types":[]},{"text":"impl Freeze for PersistError","synthetic":true,"types":[]},{"text":"impl Freeze for TempPath","synthetic":true,"types":[]},{"text":"impl Freeze for SpooledTempFile","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]}];
implementors["termcolor"] = [{"text":"impl Freeze for StandardStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StandardStreamLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BufferedStandardStream","synthetic":true,"types":[]},{"text":"impl !Freeze for BufferWriter","synthetic":true,"types":[]},{"text":"impl Freeze for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for NoColor&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Ansi&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ColorSpec","synthetic":true,"types":[]},{"text":"impl Freeze for ParseColorError","synthetic":true,"types":[]},{"text":"impl Freeze for ColorChoice","synthetic":true,"types":[]},{"text":"impl Freeze for Color","synthetic":true,"types":[]}];
implementors["textwrap"] = [{"text":"impl Freeze for HyphenSplitter","synthetic":true,"types":[]},{"text":"impl Freeze for NoHyphenation","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Freeze for Wrapper&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Freeze for IntoWrapIter&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'w, 'a, S&gt; Freeze for WrapIter&lt;'w, 'a, S&gt;","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !Freeze for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["threadpool"] = [{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl !Freeze for ThreadPool","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Freeze for Duration","synthetic":true,"types":[]},{"text":"impl Freeze for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl Freeze for Timespec","synthetic":true,"types":[]},{"text":"impl Freeze for PreciseTime","synthetic":true,"types":[]},{"text":"impl Freeze for SteadyTime","synthetic":true,"types":[]},{"text":"impl Freeze for Tm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TmFmt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ParseError","synthetic":true,"types":[]}];
implementors["tiny_keccak"] = [{"text":"impl Freeze for Keccak","synthetic":true,"types":[]},{"text":"impl Freeze for Sha3","synthetic":true,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A&gt; Freeze for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A, I&gt; Freeze for ArrayVecSplice&lt;'p, A, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for ArrayVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ArrayVecDrain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s, T&gt; Freeze for SliceVec&lt;'s, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p, 's, T&gt; Freeze for SliceVecDrain&lt;'p, 's, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p, A, I&gt; Freeze for TinyVecSplice&lt;'p, A, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Freeze for TinyVecDrain&lt;'p, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for TinyVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio"] = [{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for FrameTooBig","synthetic":true,"types":[]},{"text":"impl Freeze for LengthDelimitedCodec","synthetic":true,"types":[]},{"text":"impl Freeze for Spawn","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl !Freeze for Runtime","synthetic":true,"types":[]},{"text":"impl Freeze for Shutdown","synthetic":true,"types":[]},{"text":"impl Freeze for TaskExecutor","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl !Freeze for Runtime","synthetic":true,"types":[]},{"text":"impl !Freeze for Handle","synthetic":true,"types":[]}];
implementors["tokio_buf"] = [{"text":"impl Freeze for SizeHint","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Collect&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as FromBufStream&lt;&lt;T as BufStream&gt;::Item&gt;&gt;::Builder: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for CollectError&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CollectVecError","synthetic":true,"types":[]},{"text":"impl Freeze for CollectBytesError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LimitError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_codec"] = [{"text":"impl Freeze for BytesCodec","synthetic":true,"types":[]},{"text":"impl Freeze for LinesCodec","synthetic":true,"types":[]}];
implementors["tokio_current_thread"] = [{"text":"impl&lt;P&nbsp;=&nbsp;ParkThread&gt; !Freeze for CurrentThread&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TaskExecutor","synthetic":true,"types":[]},{"text":"impl Freeze for Turn","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Freeze for Entered&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RunError","synthetic":true,"types":[]},{"text":"impl Freeze for RunTimeoutError","synthetic":true,"types":[]},{"text":"impl Freeze for TurnError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BlockError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Handle","synthetic":true,"types":[]}];
implementors["tokio_executor"] = [{"text":"impl Freeze for Enter","synthetic":true,"types":[]},{"text":"impl Freeze for EnterError","synthetic":true,"types":[]},{"text":"impl Freeze for SpawnError","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultExecutor","synthetic":true,"types":[]},{"text":"impl Freeze for ParkThread","synthetic":true,"types":[]},{"text":"impl Freeze for ParkError","synthetic":true,"types":[]},{"text":"impl Freeze for UnparkThread","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Blocking&lt;T&gt;","synthetic":true,"types":[]}];
implementors["tokio_fs"] = [{"text":"impl&lt;P&gt; Freeze for CreateDirFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for CreateDirAllFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for OpenOptions","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; Freeze for HardLinkFuture&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for MetadataFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for ReadFile&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DirEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ReadDir","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for ReadDirFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for ReadLinkFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for RemoveDirFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for RemoveFileFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; Freeze for RenameFuture&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for SetPermissionsFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Stderr","synthetic":true,"types":[]},{"text":"impl Freeze for Stdin","synthetic":true,"types":[]},{"text":"impl Freeze for Stdout","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for SymlinkMetadataFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, C&gt; Freeze for WriteFile&lt;P, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CloneFuture","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for CreateFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for MetadataFuture","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for OpenFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SeekFuture","synthetic":true,"types":[]},{"text":"impl Freeze for File","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; Freeze for SymlinkFuture&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_io"] = [{"text":"impl&lt;R, W&gt; Freeze for Copy&lt;R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Flush&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; Freeze for Read&lt;R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; Freeze for ReadExact&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for ReadToEnd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for ReadUntil&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Shutdown&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; Freeze for WriteAll&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Lines&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_reactor"] = [{"text":"impl Freeze for Background","synthetic":true,"types":[]},{"text":"impl Freeze for Shutdown","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !Freeze for PollEvented&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Registration","synthetic":true,"types":[]},{"text":"impl Freeze for Reactor","synthetic":true,"types":[]},{"text":"impl Freeze for Handle","synthetic":true,"types":[]},{"text":"impl Freeze for Turn","synthetic":true,"types":[]},{"text":"impl Freeze for SetFallbackError","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultGuard","synthetic":true,"types":[]}];
implementors["tokio_rustls"] = [{"text":"impl Freeze for TlsConnector","synthetic":true,"types":[]},{"text":"impl Freeze for TlsAcceptor","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Freeze for Connect&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Freeze for Accept&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Freeze for FailableConnect&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Freeze for FailableAccept&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TlsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Freeze for TlsStream&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Freeze for TlsStream&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_sync"] = [{"text":"impl !Freeze for Barrier","synthetic":true,"types":[]},{"text":"impl Freeze for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for AtomicWaker","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RecvError","synthetic":true,"types":[]},{"text":"impl Freeze for UnboundedSendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedTrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UnboundedRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RecvError","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]},{"text":"impl !Freeze for Semaphore","synthetic":true,"types":[]},{"text":"impl Freeze for Permit","synthetic":true,"types":[]},{"text":"impl Freeze for AcquireError","synthetic":true,"types":[]},{"text":"impl Freeze for TryAcquireError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_tcp"] = [{"text":"impl !Freeze for Incoming","synthetic":true,"types":[]},{"text":"impl !Freeze for TcpListener","synthetic":true,"types":[]},{"text":"impl !Freeze for ConnectFuture","synthetic":true,"types":[]},{"text":"impl !Freeze for TcpStream","synthetic":true,"types":[]}];
implementors["tokio_threadpool"] = [{"text":"impl Freeze for BlockingError","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Sender","synthetic":true,"types":[]},{"text":"impl Freeze for Shutdown","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadPool","synthetic":true,"types":[]},{"text":"impl !Freeze for Worker","synthetic":true,"types":[]},{"text":"impl Freeze for WorkerId","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultPark","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultUnpark","synthetic":true,"types":[]},{"text":"impl Freeze for ParkError","synthetic":true,"types":[]}];
implementors["tokio_timer"] = [{"text":"impl Freeze for Delay","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DelayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Interval","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Timeout&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Clock","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultGuard","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Expired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Key","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Throttle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ThrottleError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultGuard","synthetic":true,"types":[]},{"text":"impl Freeze for Handle","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; Freeze for Timer&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Turn","synthetic":true,"types":[]}];
implementors["tokio_udp"] = [{"text":"impl&lt;C&gt; !Freeze for UdpFramed&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for RecvDgram&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for SendDgram&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for UdpSocket","synthetic":true,"types":[]}];
implementors["tokio_uds"] = [{"text":"impl !Freeze for UnixDatagram","synthetic":true,"types":[]},{"text":"impl&lt;A, C&gt; !Freeze for UnixDatagramFramed&lt;A, C&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Incoming","synthetic":true,"types":[]},{"text":"impl !Freeze for UnixListener","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for RecvDgram&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; !Freeze for SendDgram&lt;T, P&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for ConnectFuture","synthetic":true,"types":[]},{"text":"impl !Freeze for UnixStream","synthetic":true,"types":[]},{"text":"impl Freeze for UCred","synthetic":true,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Freeze for BytesCodec","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for FramedParts&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; Freeze for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for LinesCodec","synthetic":true,"types":[]},{"text":"impl Freeze for LinesCodecError","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for LengthDelimitedCodecError","synthetic":true,"types":[]},{"text":"impl Freeze for LengthDelimitedCodec","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;K, V&gt; Freeze for Map&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Deserializer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tracing"] = [{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WithDispatch&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Instrumented&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Entered&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tracing_core"] = [{"text":"impl Freeze for Dispatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Field","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Identifier","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultGuard","synthetic":true,"types":[]},{"text":"impl Freeze for SetGlobalDefaultError","synthetic":true,"types":[]},{"text":"impl Freeze for Empty","synthetic":true,"types":[]},{"text":"impl Freeze for FieldSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ValueSet&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Iter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DisplayValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Kind","synthetic":true,"types":[]},{"text":"impl Freeze for ParseLevelFilterError","synthetic":true,"types":[]},{"text":"impl Freeze for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Freeze for Id","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Current","synthetic":true,"types":[]},{"text":"impl Freeze for Interest","synthetic":true,"types":[]}];
implementors["tracing_futures"] = [{"text":"impl&lt;T&gt; Freeze for Instrumented&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tracing_log"] = [{"text":"impl Freeze for LogTracer","synthetic":true,"types":[]},{"text":"impl !Freeze for TraceLogger","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]}];
implementors["tracing_serde"] = [{"text":"impl Freeze for SerializeField","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SerializeFieldSet&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SerializeLevel&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SerializeId&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SerializeMetadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SerializeEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SerializeAttributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SerializeRecord&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for SerdeMapVisitor&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as SerializeMap&gt;::Error: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for SerdeStructVisitor&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as SerializeStruct&gt;::Error: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for SerializeFieldMap&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["tracing_subscriber"] = [{"text":"impl !Freeze for EnvFilter","synthetic":true,"types":[]},{"text":"impl !Freeze for Registry","synthetic":true,"types":[]},{"text":"impl !Freeze for CurrentSpan","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Freeze for Alt&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, V&gt; Freeze for Delimited&lt;D, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, V&gt; Freeze for VisitDelimited&lt;D, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Freeze for Messages&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Directive","synthetic":true,"types":[]},{"text":"impl Freeze for ParseError","synthetic":true,"types":[]},{"text":"impl Freeze for BadName","synthetic":true,"types":[]},{"text":"impl Freeze for FromEnvError","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, N&gt; Freeze for FmtContext&lt;'a, S, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for FormattedFields&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, N, E, W&gt; Freeze for Layer&lt;S, N, E, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TestWriter","synthetic":true,"types":[]},{"text":"impl&lt;N&nbsp;=&nbsp;DefaultFields, E&nbsp;=&nbsp;Format&lt;Full, SystemTime&gt;, F&nbsp;=&nbsp;LevelFilter, W&nbsp;=&nbsp;fn() -&gt; Stdout&gt; !Freeze for Subscriber&lt;N, E, F, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, E, F, W&gt; Freeze for SubscriberBuilder&lt;N, E, F, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Json","synthetic":true,"types":[]},{"text":"impl Freeze for JsonFields","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for JsonVisitor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Pretty","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PrettyVisitor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for FieldFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; Freeze for FieldFnVisitor&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Compact","synthetic":true,"types":[]},{"text":"impl Freeze for Full","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; Freeze for Format&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultFields","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DefaultVisitor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FmtSpan","synthetic":true,"types":[]},{"text":"impl Freeze for SystemTime","synthetic":true,"types":[]},{"text":"impl Freeze for Uptime","synthetic":true,"types":[]},{"text":"impl Freeze for ChronoUtc","synthetic":true,"types":[]},{"text":"impl Freeze for ChronoLocal","synthetic":true,"types":[]},{"text":"impl Freeze for BoxMakeWriter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Freeze for Context&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;L, I, S&gt; Freeze for Layered&lt;L, I, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Identity","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Freeze for Scope&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;L as LookupSpan&lt;'a&gt;&gt;::Data: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Extensions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ExtensionsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Data&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for SpanRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as LookupSpan&lt;'a&gt;&gt;::Data: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for Parents&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for FromRoot&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as LookupSpan&lt;'a&gt;&gt;::Data: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, S&gt; Freeze for Layer&lt;L, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;L, S&gt; Freeze for Handle&lt;L, S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for TryInitError","synthetic":true,"types":[]}];
implementors["trie_db"] = [{"text":"impl&lt;'db, L&gt; Freeze for FatDB&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; Freeze for FatDBIterator&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; Freeze for FatDBMut&lt;'db, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;L as TrieLayout&gt;::Hash: Hasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, L, Q&gt; Freeze for Lookup&lt;'a, L, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for NibbleSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NibbleVec","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, HO, V, DB&gt; Freeze for TrieBuilder&lt;'a, H, HO, V, DB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, HO&gt; Freeze for TrieRoot&lt;H, HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Freeze for TrieRootUnhashed&lt;H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Freeze for TrieDBNodeIterator&lt;'a, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, HO&gt; Freeze for TrieRootPrint&lt;H, HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; Freeze for TrieFactory&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for TrieError&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TrieSpec","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; Freeze for TrieKinds&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NibbleSlicePlan","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for OwnedNode&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for NodeHandle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Node&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NodeHandlePlan","synthetic":true,"types":[]},{"text":"impl Freeze for NodePlan","synthetic":true,"types":[]},{"text":"impl&lt;HO, CE&gt; Freeze for Error&lt;HO, CE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CE: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; Freeze for TrieDB&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Freeze for TrieDBIterator&lt;'a, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Freeze for TrieDBMut&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;L as TrieLayout&gt;::Hash: Hasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;HO&gt; Freeze for ChildReference&lt;HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; Freeze for SecTrieDB&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; Freeze for SecTrieDBMut&lt;'db, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;L as TrieLayout&gt;::Hash: Hasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;HO&gt; Freeze for Record&lt;HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;HO&gt; Freeze for Recorder&lt;HO&gt;","synthetic":true,"types":[]}];
implementors["try_lock"] = [{"text":"impl&lt;T&gt; !Freeze for TryLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Locked&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["twox_hash"] = [{"text":"impl Freeze for RandomXxHashBuilder64","synthetic":true,"types":[]},{"text":"impl Freeze for RandomXxHashBuilder32","synthetic":true,"types":[]},{"text":"impl Freeze for RandomHashBuilder128","synthetic":true,"types":[]},{"text":"impl Freeze for RandomHashBuilder64","synthetic":true,"types":[]},{"text":"impl Freeze for XxHash64","synthetic":true,"types":[]},{"text":"impl Freeze for XxHash32","synthetic":true,"types":[]},{"text":"impl Freeze for Hash64","synthetic":true,"types":[]},{"text":"impl Freeze for Hash128","synthetic":true,"types":[]}];
implementors["typenum"] = [{"text":"impl Freeze for Greater","synthetic":true,"types":[]},{"text":"impl Freeze for Less","synthetic":true,"types":[]},{"text":"impl Freeze for Equal","synthetic":true,"types":[]},{"text":"impl Freeze for B0","synthetic":true,"types":[]},{"text":"impl Freeze for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Freeze for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Freeze for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Z0","synthetic":true,"types":[]},{"text":"impl Freeze for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Freeze for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Freeze for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["uint"] = [{"text":"impl Freeze for FromDecStrErr","synthetic":true,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S&gt; Freeze for UniCase&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Ascii&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Freeze for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Freeze for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Freeze for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BidiClass","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; Freeze for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for IsNormalized","synthetic":true,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Freeze for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GraphemeCursor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UWordBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UWordBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UnicodeWords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for USentenceBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for USentenceBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UnicodeSentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GraphemeIncomplete","synthetic":true,"types":[]}];
implementors["universal_hash"] = [{"text":"impl&lt;U&gt; Freeze for Output&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;U as UniversalHash&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["unsigned_varint"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Uvi&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UviBytes&lt;T&gt;","synthetic":true,"types":[]}];
implementors["untrusted"] = [{"text":"impl&lt;'a&gt; Freeze for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Reader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Mark","synthetic":true,"types":[]},{"text":"impl Freeze for EndOfInput","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl Freeze for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for HostAndPort&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SocketAddrs","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Origin","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ParseError","synthetic":true,"types":[]},{"text":"impl Freeze for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl Freeze for Position","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Serializer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["vec_arena"] = [{"text":"impl&lt;T&gt; Freeze for Arena&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; Freeze for VecMap&lt;V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for VacantEntry&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for OccupiedEntry&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for Iter&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for IterMut&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for Keys&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for Values&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for ValuesMut&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Freeze for IntoIter&lt;V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for Drain&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for Entry&lt;'a, V&gt;","synthetic":true,"types":[]}];
implementors["void"] = [{"text":"impl Freeze for Void","synthetic":true,"types":[]}];
implementors["want"] = [{"text":"impl Freeze for Giver","synthetic":true,"types":[]},{"text":"impl Freeze for Taker","synthetic":true,"types":[]},{"text":"impl Freeze for SharedGiver","synthetic":true,"types":[]},{"text":"impl Freeze for Closed","synthetic":true,"types":[]}];
implementors["wasm_bindgen"] = [{"text":"impl Freeze for JsValue","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for JsStatic&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Clamped&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for WasmOptionalI32","synthetic":true,"types":[]},{"text":"impl Freeze for WasmOptionalU32","synthetic":true,"types":[]},{"text":"impl Freeze for WasmOptionalF32","synthetic":true,"types":[]},{"text":"impl Freeze for WasmOptionalF64","synthetic":true,"types":[]},{"text":"impl Freeze for Wasm64","synthetic":true,"types":[]},{"text":"impl Freeze for WasmOptional64","synthetic":true,"types":[]},{"text":"impl Freeze for WasmSlice","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Freeze for Closure&lt;T&gt;","synthetic":true,"types":[]}];
implementors["wasm_bindgen_backend"] = [{"text":"impl Freeze for Diagnostic","synthetic":true,"types":[]},{"text":"impl Freeze for Program","synthetic":true,"types":[]},{"text":"impl Freeze for Export","synthetic":true,"types":[]},{"text":"impl Freeze for Import","synthetic":true,"types":[]},{"text":"impl Freeze for ImportFunction","synthetic":true,"types":[]},{"text":"impl Freeze for Operation","synthetic":true,"types":[]},{"text":"impl Freeze for ImportStatic","synthetic":true,"types":[]},{"text":"impl Freeze for ImportType","synthetic":true,"types":[]},{"text":"impl Freeze for ImportEnum","synthetic":true,"types":[]},{"text":"impl Freeze for Function","synthetic":true,"types":[]},{"text":"impl Freeze for Struct","synthetic":true,"types":[]},{"text":"impl Freeze for StructField","synthetic":true,"types":[]},{"text":"impl Freeze for Enum","synthetic":true,"types":[]},{"text":"impl Freeze for Variant","synthetic":true,"types":[]},{"text":"impl Freeze for MethodSelf","synthetic":true,"types":[]},{"text":"impl Freeze for ImportModule","synthetic":true,"types":[]},{"text":"impl Freeze for ImportKind","synthetic":true,"types":[]},{"text":"impl Freeze for ImportFunctionKind","synthetic":true,"types":[]},{"text":"impl Freeze for MethodKind","synthetic":true,"types":[]},{"text":"impl Freeze for OperationKind","synthetic":true,"types":[]},{"text":"impl Freeze for TypeKind","synthetic":true,"types":[]},{"text":"impl Freeze for TypeLocation","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ShortHash&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["wasm_bindgen_futures"] = [{"text":"impl Freeze for JsFuture","synthetic":true,"types":[]}];
implementors["wasm_bindgen_macro_support"] = [{"text":"impl Freeze for BindgenAttrs","synthetic":true,"types":[]}];
implementors["wasm_timer"] = [{"text":"impl Freeze for Timer","synthetic":true,"types":[]},{"text":"impl Freeze for TimerHandle","synthetic":true,"types":[]},{"text":"impl Freeze for Delay","synthetic":true,"types":[]},{"text":"impl Freeze for Interval","synthetic":true,"types":[]},{"text":"impl Freeze for SetDefaultError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Timeout&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for TimeoutStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["wasmi"] = [{"text":"impl Freeze for Trap","synthetic":true,"types":[]},{"text":"impl Freeze for FuncInstance","synthetic":true,"types":[]},{"text":"impl&lt;'args&gt; Freeze for FuncInvocation&lt;'args&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FuncRef","synthetic":true,"types":[]},{"text":"impl !Freeze for GlobalInstance","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalRef","synthetic":true,"types":[]},{"text":"impl Freeze for NopExternals","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RuntimeArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ImportsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for MemoryInstance","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryRef","synthetic":true,"types":[]},{"text":"impl !Freeze for ModuleInstance","synthetic":true,"types":[]},{"text":"impl Freeze for ModuleRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for NotStartedModuleRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StackRecycler","synthetic":true,"types":[]},{"text":"impl !Freeze for TableInstance","synthetic":true,"types":[]},{"text":"impl Freeze for TableRef","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for TableDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for Module","synthetic":true,"types":[]},{"text":"impl Freeze for TrapKind","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ResumableError","synthetic":true,"types":[]},{"text":"impl Freeze for ExternVal","synthetic":true,"types":[]},{"text":"impl Freeze for ValueType","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeValue","synthetic":true,"types":[]},{"text":"impl Freeze for F32","synthetic":true,"types":[]},{"text":"impl Freeze for F64","synthetic":true,"types":[]}];
implementors["wasmi_validation"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for PlainValidator","synthetic":true,"types":[]},{"text":"impl Freeze for PlainFuncValidator","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for StackWithLimit&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ModuleContext","synthetic":true,"types":[]},{"text":"impl Freeze for ModuleContextBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for BlockFrame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FunctionValidationContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StartedWith","synthetic":true,"types":[]},{"text":"impl Freeze for StackValueType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Locals&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["wasmparser"] = [{"text":"impl&lt;'a&gt; Freeze for BinaryReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Range","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LocalName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Parser&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RelocEntry","synthetic":true,"types":[]},{"text":"impl Freeze for BinaryReaderError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BrTable&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FuncType","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalType","synthetic":true,"types":[]},{"text":"impl Freeze for Ieee32","synthetic":true,"types":[]},{"text":"impl Freeze for Ieee64","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryImmediate","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Naming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ResizableLimits","synthetic":true,"types":[]},{"text":"impl Freeze for TableType","synthetic":true,"types":[]},{"text":"impl Freeze for V128","synthetic":true,"types":[]},{"text":"impl&lt;'b&gt; Freeze for ValidatingOperatorParser&lt;'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ValidatingParser&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ValidatingParserConfig","synthetic":true,"types":[]},{"text":"impl Freeze for OperatorValidatorConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CodeSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Data&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DataSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Element&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ElementItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ElementItemsReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ElementSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Export&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ExportSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FunctionBody&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FunctionSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Global&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for GlobalSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Import&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ImportSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for InitExpr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LinkingSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LocalsReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MemorySectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ModuleReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for NameSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for NamingReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OperatorsReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ProducersField&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ProducersFieldValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ProducersFieldValuesReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ProducersSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Reloc","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RelocSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Section&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for SectionIterator&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for SectionIteratorLimited&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TableSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TypeSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ElemSectionEntryTable","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for NameEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ParserInput","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ParserState&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CustomSectionKind","synthetic":true,"types":[]},{"text":"impl Freeze for ExternalKind","synthetic":true,"types":[]},{"text":"impl Freeze for ImportSectionEntryType","synthetic":true,"types":[]},{"text":"impl Freeze for LinkingType","synthetic":true,"types":[]},{"text":"impl Freeze for NameType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Operator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RelocType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SectionCode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for TypeOrFuncType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CustomSectionContent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DataKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ElementItem","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ElementKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SectionContent&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["wasmtime"] = [{"text":"impl Freeze for Global","synthetic":true,"types":[]},{"text":"impl Freeze for Table","synthetic":true,"types":[]},{"text":"impl Freeze for Memory","synthetic":true,"types":[]},{"text":"impl&lt;'instance&gt; Freeze for Export&lt;'instance&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FrameInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Func","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Caller&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Instance","synthetic":true,"types":[]},{"text":"impl Freeze for Linker","synthetic":true,"types":[]},{"text":"impl Freeze for Module","synthetic":true,"types":[]},{"text":"impl Freeze for ExternRef","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for Engine","synthetic":true,"types":[]},{"text":"impl Freeze for Store","synthetic":true,"types":[]},{"text":"impl Freeze for InterruptHandle","synthetic":true,"types":[]},{"text":"impl Freeze for Trap","synthetic":true,"types":[]},{"text":"impl Freeze for Limits","synthetic":true,"types":[]},{"text":"impl Freeze for FuncType","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalType","synthetic":true,"types":[]},{"text":"impl Freeze for TableType","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryType","synthetic":true,"types":[]},{"text":"impl&lt;'module&gt; Freeze for ImportType&lt;'module&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'module&gt; Freeze for ExportType&lt;'module&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Extern","synthetic":true,"types":[]},{"text":"impl Freeze for Strategy","synthetic":true,"types":[]},{"text":"impl Freeze for OptLevel","synthetic":true,"types":[]},{"text":"impl Freeze for ProfilingStrategy","synthetic":true,"types":[]},{"text":"impl Freeze for Mutability","synthetic":true,"types":[]},{"text":"impl Freeze for ValType","synthetic":true,"types":[]},{"text":"impl Freeze for ExternType","synthetic":true,"types":[]},{"text":"impl Freeze for Val","synthetic":true,"types":[]}];
implementors["wasmtime_debug"] = [{"text":"impl&lt;'a&gt; Freeze for DebugInfoData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for WasmFileInfo","synthetic":true,"types":[]},{"text":"impl Freeze for DwarfSection","synthetic":true,"types":[]},{"text":"impl Freeze for DwarfSectionRelocTarget","synthetic":true,"types":[]}];
implementors["wasmtime_environ"] = [{"text":"impl Freeze for FunctionAddressMap","synthetic":true,"types":[]},{"text":"impl Freeze for InstructionAddressMap","synthetic":true,"types":[]},{"text":"impl Freeze for ModuleVmctxInfo","synthetic":true,"types":[]},{"text":"impl Freeze for CacheConfig","synthetic":true,"types":[]},{"text":"impl Freeze for Compilation","synthetic":true,"types":[]},{"text":"impl Freeze for CompiledFunction","synthetic":true,"types":[]},{"text":"impl Freeze for Relocation","synthetic":true,"types":[]},{"text":"impl Freeze for StackMapInformation","synthetic":true,"types":[]},{"text":"impl Freeze for TrapInformation","synthetic":true,"types":[]},{"text":"impl Freeze for BuiltinFunctionIndex","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryPlan","synthetic":true,"types":[]},{"text":"impl Freeze for Module","synthetic":true,"types":[]},{"text":"impl Freeze for ModuleLocal","synthetic":true,"types":[]},{"text":"impl Freeze for TableElements","synthetic":true,"types":[]},{"text":"impl Freeze for TablePlan","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for DataInitializer&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DataInitializerLocation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FunctionBodyData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for ModuleEnvironment&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for ModuleTranslation&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Tunables","synthetic":true,"types":[]},{"text":"impl Freeze for TargetSharedSignatureIndex","synthetic":true,"types":[]},{"text":"impl Freeze for VMOffsets","synthetic":true,"types":[]},{"text":"impl Freeze for ModuleMemoryOffset","synthetic":true,"types":[]},{"text":"impl Freeze for CompileError","synthetic":true,"types":[]},{"text":"impl Freeze for RelocationTarget","synthetic":true,"types":[]},{"text":"impl Freeze for EntityIndex","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryStyle","synthetic":true,"types":[]},{"text":"impl Freeze for TableStyle","synthetic":true,"types":[]},{"text":"impl Freeze for RelocSink","synthetic":true,"types":[]},{"text":"impl Freeze for TrapSink","synthetic":true,"types":[]},{"text":"impl Freeze for Cranelift","synthetic":true,"types":[]}];
implementors["wasmtime_jit"] = [{"text":"impl Freeze for CodeMemory","synthetic":true,"types":[]},{"text":"impl Freeze for Compilation","synthetic":true,"types":[]},{"text":"impl Freeze for Compiler","synthetic":true,"types":[]},{"text":"impl Freeze for CompiledModule","synthetic":true,"types":[]},{"text":"impl Freeze for NullResolver","synthetic":true,"types":[]},{"text":"impl Freeze for CompilationStrategy","synthetic":true,"types":[]},{"text":"impl Freeze for SetupError","synthetic":true,"types":[]},{"text":"impl Freeze for TrampolineRelocSink","synthetic":true,"types":[]}];
implementors["wasmtime_obj"] = [{"text":"impl&lt;'a&gt; Freeze for ObjectBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectBuilderTarget","synthetic":true,"types":[]}];
implementors["wasmtime_profiling"] = [{"text":"impl !Freeze for JitDumpAgent","synthetic":true,"types":[]},{"text":"impl Freeze for VTuneAgent","synthetic":true,"types":[]},{"text":"impl Freeze for NullProfilerAgent","synthetic":true,"types":[]}];
implementors["wasmtime_runtime"] = [{"text":"impl Freeze for ExportFunction","synthetic":true,"types":[]},{"text":"impl Freeze for ExportTable","synthetic":true,"types":[]},{"text":"impl Freeze for ExportMemory","synthetic":true,"types":[]},{"text":"impl Freeze for ExportGlobal","synthetic":true,"types":[]},{"text":"impl Freeze for VMExternRef","synthetic":true,"types":[]},{"text":"impl !Freeze for VMExternRefActivationsTable","synthetic":true,"types":[]},{"text":"impl !Freeze for StackMapRegistry","synthetic":true,"types":[]},{"text":"impl Freeze for Imports","synthetic":true,"types":[]},{"text":"impl Freeze for InstanceHandle","synthetic":true,"types":[]},{"text":"impl Freeze for LinkError","synthetic":true,"types":[]},{"text":"impl Freeze for GdbJitImageRegistration","synthetic":true,"types":[]},{"text":"impl Freeze for Mmap","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureRegistry","synthetic":true,"types":[]},{"text":"impl !Freeze for Table","synthetic":true,"types":[]},{"text":"impl Freeze for VMCallerCheckedAnyfunc","synthetic":true,"types":[]},{"text":"impl Freeze for VMContext","synthetic":true,"types":[]},{"text":"impl Freeze for VMFunctionBody","synthetic":true,"types":[]},{"text":"impl Freeze for VMFunctionImport","synthetic":true,"types":[]},{"text":"impl Freeze for VMGlobalDefinition","synthetic":true,"types":[]},{"text":"impl Freeze for VMGlobalImport","synthetic":true,"types":[]},{"text":"impl !Freeze for VMInterrupts","synthetic":true,"types":[]},{"text":"impl Freeze for VMInvokeArgument","synthetic":true,"types":[]},{"text":"impl Freeze for VMMemoryDefinition","synthetic":true,"types":[]},{"text":"impl Freeze for VMMemoryImport","synthetic":true,"types":[]},{"text":"impl Freeze for VMSharedSignatureIndex","synthetic":true,"types":[]},{"text":"impl Freeze for VMTableDefinition","synthetic":true,"types":[]},{"text":"impl Freeze for VMTableImport","synthetic":true,"types":[]},{"text":"impl Freeze for Export","synthetic":true,"types":[]},{"text":"impl Freeze for InstantiationError","synthetic":true,"types":[]},{"text":"impl Freeze for TableElement","synthetic":true,"types":[]},{"text":"impl Freeze for Trap","synthetic":true,"types":[]}];
implementors["wast"] = [{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Id&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for NameAnnotation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Float32","synthetic":true,"types":[]},{"text":"impl Freeze for Float64","synthetic":true,"types":[]},{"text":"impl Freeze for LParen","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Alias&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Custom&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Export&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for InlineExport&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Expression&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BlockType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FuncBindType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LetType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BrTableIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LaneArg","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MemArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CallIndirect&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TableInit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TableCopy&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TableArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MemoryArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MemoryInit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MemoryCopy&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StructAccess&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StructNarrow&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for I8x16Shuffle","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SelectTypes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BrOnExn&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BrOnCast&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RTTSub&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RefTest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Func&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Local&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Global&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Import&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ItemSig&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for InlineImport&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Instance&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memory&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Data&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Names&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Wat&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Module&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for NestedModule&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Table&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Elem&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RefType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for GlobalType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Limits","synthetic":true,"types":[]},{"text":"impl Freeze for Limits64","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TableType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FunctionType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FunctionTypeNoNames&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StructType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StructField&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ArrayType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ModuleType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for InstanceType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ExportType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Type&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for TypeUse&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Wast&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WastInvoke&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Index&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for AssertExpression&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for NanPattern&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for V128Pattern","synthetic":true,"types":[]},{"text":"impl Freeze for CustomPlace","synthetic":true,"types":[]},{"text":"impl Freeze for CustomPlaceAnchor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for EventType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ExportKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Instruction&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for V128Const","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FuncKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for GlobalKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ItemKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for InstanceKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MemoryKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DataKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ModuleKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ModuleField&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for NestedModuleKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TableKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ElemKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ElemPayload&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ValType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for HeapType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StorageType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TypeDef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WastDirective&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WastExecute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for QuoteModule&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for after","synthetic":true,"types":[]},{"text":"impl Freeze for alias","synthetic":true,"types":[]},{"text":"impl Freeze for any","synthetic":true,"types":[]},{"text":"impl Freeze for anyfunc","synthetic":true,"types":[]},{"text":"impl Freeze for anyref","synthetic":true,"types":[]},{"text":"impl Freeze for array","synthetic":true,"types":[]},{"text":"impl Freeze for assert_exhaustion","synthetic":true,"types":[]},{"text":"impl Freeze for assert_invalid","synthetic":true,"types":[]},{"text":"impl Freeze for assert_malformed","synthetic":true,"types":[]},{"text":"impl Freeze for assert_return","synthetic":true,"types":[]},{"text":"impl Freeze for assert_return_arithmetic_nan","synthetic":true,"types":[]},{"text":"impl Freeze for assert_return_arithmetic_nan_f32x4","synthetic":true,"types":[]},{"text":"impl Freeze for assert_return_arithmetic_nan_f64x2","synthetic":true,"types":[]},{"text":"impl Freeze for assert_return_canonical_nan","synthetic":true,"types":[]},{"text":"impl Freeze for assert_return_canonical_nan_f32x4","synthetic":true,"types":[]},{"text":"impl Freeze for assert_return_canonical_nan_f64x2","synthetic":true,"types":[]},{"text":"impl Freeze for assert_return_func","synthetic":true,"types":[]},{"text":"impl Freeze for assert_trap","synthetic":true,"types":[]},{"text":"impl Freeze for assert_unlinkable","synthetic":true,"types":[]},{"text":"impl Freeze for before","synthetic":true,"types":[]},{"text":"impl Freeze for binary","synthetic":true,"types":[]},{"text":"impl Freeze for block","synthetic":true,"types":[]},{"text":"impl Freeze for catch","synthetic":true,"types":[]},{"text":"impl Freeze for code","synthetic":true,"types":[]},{"text":"impl Freeze for data","synthetic":true,"types":[]},{"text":"impl Freeze for declare","synthetic":true,"types":[]},{"text":"impl Freeze for do","synthetic":true,"types":[]},{"text":"impl Freeze for elem","synthetic":true,"types":[]},{"text":"impl Freeze for end","synthetic":true,"types":[]},{"text":"impl Freeze for event","synthetic":true,"types":[]},{"text":"impl Freeze for exn","synthetic":true,"types":[]},{"text":"impl Freeze for exnref","synthetic":true,"types":[]},{"text":"impl Freeze for export","synthetic":true,"types":[]},{"text":"impl Freeze for extern","synthetic":true,"types":[]},{"text":"impl Freeze for externref","synthetic":true,"types":[]},{"text":"impl Freeze for eq","synthetic":true,"types":[]},{"text":"impl Freeze for eqref","synthetic":true,"types":[]},{"text":"impl Freeze for f32","synthetic":true,"types":[]},{"text":"impl Freeze for f32x4","synthetic":true,"types":[]},{"text":"impl Freeze for f64","synthetic":true,"types":[]},{"text":"impl Freeze for f64x2","synthetic":true,"types":[]},{"text":"impl Freeze for field","synthetic":true,"types":[]},{"text":"impl Freeze for first","synthetic":true,"types":[]},{"text":"impl Freeze for func","synthetic":true,"types":[]},{"text":"impl Freeze for funcref","synthetic":true,"types":[]},{"text":"impl Freeze for get","synthetic":true,"types":[]},{"text":"impl Freeze for global","synthetic":true,"types":[]},{"text":"impl Freeze for i16","synthetic":true,"types":[]},{"text":"impl Freeze for i16x8","synthetic":true,"types":[]},{"text":"impl Freeze for i31","synthetic":true,"types":[]},{"text":"impl Freeze for i31ref","synthetic":true,"types":[]},{"text":"impl Freeze for i32","synthetic":true,"types":[]},{"text":"impl Freeze for i32x4","synthetic":true,"types":[]},{"text":"impl Freeze for i64","synthetic":true,"types":[]},{"text":"impl Freeze for i64x2","synthetic":true,"types":[]},{"text":"impl Freeze for i8","synthetic":true,"types":[]},{"text":"impl Freeze for i8x16","synthetic":true,"types":[]},{"text":"impl Freeze for import","synthetic":true,"types":[]},{"text":"impl Freeze for instance","synthetic":true,"types":[]},{"text":"impl Freeze for instantiate","synthetic":true,"types":[]},{"text":"impl Freeze for invoke","synthetic":true,"types":[]},{"text":"impl Freeze for item","synthetic":true,"types":[]},{"text":"impl Freeze for last","synthetic":true,"types":[]},{"text":"impl Freeze for local","synthetic":true,"types":[]},{"text":"impl Freeze for memory","synthetic":true,"types":[]},{"text":"impl Freeze for module","synthetic":true,"types":[]},{"text":"impl Freeze for modulecode","synthetic":true,"types":[]},{"text":"impl Freeze for nan_arithmetic","synthetic":true,"types":[]},{"text":"impl Freeze for nan_canonical","synthetic":true,"types":[]},{"text":"impl Freeze for null","synthetic":true,"types":[]},{"text":"impl Freeze for nullref","synthetic":true,"types":[]},{"text":"impl Freeze for offset","synthetic":true,"types":[]},{"text":"impl Freeze for param","synthetic":true,"types":[]},{"text":"impl Freeze for parent","synthetic":true,"types":[]},{"text":"impl Freeze for passive","synthetic":true,"types":[]},{"text":"impl Freeze for quote","synthetic":true,"types":[]},{"text":"impl Freeze for else","synthetic":true,"types":[]},{"text":"impl Freeze for if","synthetic":true,"types":[]},{"text":"impl Freeze for loop","synthetic":true,"types":[]},{"text":"impl Freeze for mut","synthetic":true,"types":[]},{"text":"impl Freeze for type","synthetic":true,"types":[]},{"text":"impl Freeze for ref","synthetic":true,"types":[]},{"text":"impl Freeze for ref_func","synthetic":true,"types":[]},{"text":"impl Freeze for ref_null","synthetic":true,"types":[]},{"text":"impl Freeze for register","synthetic":true,"types":[]},{"text":"impl Freeze for result","synthetic":true,"types":[]},{"text":"impl Freeze for rtt","synthetic":true,"types":[]},{"text":"impl Freeze for shared","synthetic":true,"types":[]},{"text":"impl Freeze for start","synthetic":true,"types":[]},{"text":"impl Freeze for struct","synthetic":true,"types":[]},{"text":"impl Freeze for table","synthetic":true,"types":[]},{"text":"impl Freeze for then","synthetic":true,"types":[]},{"text":"impl Freeze for try","synthetic":true,"types":[]},{"text":"impl Freeze for v128","synthetic":true,"types":[]},{"text":"impl Freeze for custom","synthetic":true,"types":[]},{"text":"impl Freeze for name","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Lexer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Integer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Float&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WasmString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Token&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LexError","synthetic":true,"types":[]},{"text":"impl Freeze for SignToken","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FloatVal&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Parser&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Cursor&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["wat"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["webpki"] = [{"text":"impl&lt;'a&gt; Freeze for DNSNameRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidDNSNameError","synthetic":true,"types":[]},{"text":"impl Freeze for DNSName","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureAlgorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Time","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for EndEntityCert&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TrustAnchor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TLSServerTrustAnchors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TLSClientTrustAnchors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["x25519_dalek"] = [{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for EphemeralSecret","synthetic":true,"types":[]},{"text":"impl Freeze for StaticSecret","synthetic":true,"types":[]},{"text":"impl Freeze for SharedSecret","synthetic":true,"types":[]}];
implementors["yamux"] = [{"text":"impl&lt;T&gt; Freeze for Connection&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Control","synthetic":true,"types":[]},{"text":"impl Freeze for Packet","synthetic":true,"types":[]},{"text":"impl Freeze for Stream","synthetic":true,"types":[]},{"text":"impl Freeze for StreamId","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for Mode","synthetic":true,"types":[]},{"text":"impl Freeze for ConnectionError","synthetic":true,"types":[]},{"text":"impl Freeze for FrameDecodeError","synthetic":true,"types":[]},{"text":"impl Freeze for HeaderDecodeError","synthetic":true,"types":[]},{"text":"impl Freeze for WindowUpdateMode","synthetic":true,"types":[]}];
implementors["zeroize"] = [{"text":"impl&lt;Z&gt; Freeze for Zeroizing&lt;Z&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Z: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["zstd"] = [{"text":"impl Freeze for Compressor","synthetic":true,"types":[]},{"text":"impl Freeze for Decompressor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for EncoderDictionary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DecoderDictionary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Encoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Decoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for AutoFinishEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, D&gt; Freeze for Reader&lt;R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, D&gt; Freeze for Writer&lt;W, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NoOp","synthetic":true,"types":[]},{"text":"impl Freeze for Status","synthetic":true,"types":[]},{"text":"impl Freeze for Decoder","synthetic":true,"types":[]},{"text":"impl Freeze for Encoder","synthetic":true,"types":[]}];
implementors["zstd_safe"] = [{"text":"impl&lt;'a&gt; Freeze for CCtx&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DCtx&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CDict&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DDict&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for InBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OutBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FrameFormat","synthetic":true,"types":[]},{"text":"impl Freeze for CParameter","synthetic":true,"types":[]},{"text":"impl Freeze for DParameter","synthetic":true,"types":[]}];
implementors["zstd_sys"] = [{"text":"impl Freeze for ZSTD_CCtx_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_DCtx_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_bounds","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_inBuffer_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_outBuffer_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_CDict_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_DDict_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_CCtx_params_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_Sequence","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_compressionParameters","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_frameParameters","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_parameters","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_customMem","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_frameProgression","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_frameHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ZDICT_params_t","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTDMT_CCtx_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_strategy","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_cParameter","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_ResetDirective","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_dParameter","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_EndDirective","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_dictContentType_e","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_dictLoadMethod_e","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_format_e","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_dictAttachPref_e","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_literalCompressionMode_e","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_frameType_e","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_nextInputType_e","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTDMT_parameter","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()