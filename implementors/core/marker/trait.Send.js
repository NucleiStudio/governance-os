(function() {var implementors = {};
implementors["addr2line"] = [{"text":"impl&lt;R&gt; Send for Context&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, R&gt; !Send for FrameIter&lt;'ctx, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, R&gt; Send for Frame&lt;'ctx, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for FunctionName&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Location&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["adler"] = [{"text":"impl Send for Adler32","synthetic":true,"types":[]}];
implementors["aead"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'msg, 'aad&gt; Send for Payload&lt;'msg, 'aad&gt;","synthetic":true,"types":[]}];
implementors["aes_gcm"] = [{"text":"impl&lt;Aes, NonceSize&gt; Send for AesGcm&lt;Aes, NonceSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Aes: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;NonceSize: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["aes_soft"] = [{"text":"impl Send for Aes128","synthetic":true,"types":[]},{"text":"impl Send for Aes192","synthetic":true,"types":[]},{"text":"impl Send for Aes256","synthetic":true,"types":[]}];
implementors["ahash"] = [{"text":"impl Send for AHasher","synthetic":true,"types":[]},{"text":"impl Send for ABuildHasher","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Send for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Send for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Send for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Send for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Match","synthetic":true,"types":[]},{"text":"impl Send for MatchKind","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Send for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Send for Searcher","synthetic":true,"types":[]},{"text":"impl Send for MatchKind","synthetic":true,"types":[]}];
implementors["alga"] = [{"text":"impl&lt;O&gt; Send for Id&lt;O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Additive","synthetic":true,"types":[]},{"text":"impl Send for Multiplicative","synthetic":true,"types":[]}];
implementors["ansi_term"] = [{"text":"impl Send for Prefix","synthetic":true,"types":[]},{"text":"impl Send for Infix","synthetic":true,"types":[]},{"text":"impl Send for Suffix","synthetic":true,"types":[]},{"text":"impl Send for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Colour","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["approx"] = [{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; Send for AbsDiff&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; Send for Relative&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; Send for Ulps&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["arc_swap"] = [{"text":"impl&lt;'l, T&gt; Send for Guard&lt;'l, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for ArcSwapAny&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DirectDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for DynGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; Send for Map&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ConstantDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Constant&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; Send for Cache&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; Send for MapCache&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Shard","synthetic":true,"types":[]},{"text":"impl Send for Global","synthetic":true,"types":[]},{"text":"impl Send for PrivateUnsharded","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for PrivateSharded&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; Send for MapGuard&lt;G, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;'a T: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Send for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Array + Send&gt; Send for Drain&lt;'a, A&gt;","synthetic":false,"types":[]}];
implementors["asn1_der"] = [{"text":"impl Send for DerObject","synthetic":true,"types":[]},{"text":"impl Send for DerLength","synthetic":true,"types":[]},{"text":"impl Send for DerValue","synthetic":true,"types":[]},{"text":"impl Send for DerTag","synthetic":true,"types":[]},{"text":"impl Send for Asn1DerError","synthetic":true,"types":[]}];
implementors["async_channel"] = [{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]}];
implementors["async_executor"] = [{"text":"impl&lt;'a&gt; !Send for LocalExecutor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'_&gt; Send for Executor&lt;'_&gt;","synthetic":false,"types":[]}];
implementors["async_global_executor"] = [{"text":"impl Send for GlobalExecutorConfig","synthetic":true,"types":[]}];
implementors["async_io"] = [{"text":"impl Send for Timer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Async&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["async_mutex"] = [{"text":"impl&lt;T:&nbsp;Send + ?Sized&gt; Send for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + ?Sized, '_&gt; Send for MutexGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + ?Sized&gt; Send for MutexGuardArc&lt;T&gt;","synthetic":false,"types":[]}];
implementors["async_std"] = [{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl Send for TaskId","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for JoinHandle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AccessError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for TimeoutError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for FromFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for FromIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for RepeatWith&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U&gt; Send for Chain&lt;S, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Cloned&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Copied&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Send for Filter&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, St, F&gt; Send for Scan&lt;S, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Send for SkipWhile&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for StepBy&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Send for TakeWhile&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, R&gt; Send for Merge&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Stream&gt;::Item as IntoStream&gt;::IntoStream: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F&gt; Send for FlatMap&lt;S, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TimeoutError","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Timeout&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Interval","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; Send for Successors&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for IntoInnerError&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Empty","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Bytes&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Repeat","synthetic":true,"types":[]},{"text":"impl Send for Sink","synthetic":true,"types":[]},{"text":"impl Send for Stderr","synthetic":true,"types":[]},{"text":"impl Send for Stdin","synthetic":true,"types":[]},{"text":"impl Send for Stdout","synthetic":true,"types":[]},{"text":"impl Send for UnixDatagram","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for UnixListener","synthetic":true,"types":[]},{"text":"impl Send for UnixStream","synthetic":true,"types":[]},{"text":"impl Send for Barrier","synthetic":true,"types":[]},{"text":"impl Send for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DirBuilder","synthetic":true,"types":[]},{"text":"impl Send for DirEntry","synthetic":true,"types":[]},{"text":"impl Send for File","synthetic":true,"types":[]},{"text":"impl Send for OpenOptions","synthetic":true,"types":[]},{"text":"impl Send for ReadDir","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Ancestors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Components&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Path","synthetic":true,"types":[]},{"text":"impl Send for PathBuf","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for TcpListener","synthetic":true,"types":[]},{"text":"impl Send for TcpStream","synthetic":true,"types":[]},{"text":"impl Send for UdpSocket","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for RwLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send, '_&gt; Send for RwLockReadGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send, '_&gt; Send for RwLockWriteGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Condvar","synthetic":false,"types":[]}];
implementors["async_task"] = [{"text":"impl Send for Runnable","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Task&lt;T&gt;","synthetic":false,"types":[]}];
implementors["async_tls"] = [{"text":"impl&lt;IO&gt; Send for Accept&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TlsAcceptor","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Send for Connect&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TlsConnector","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Send for TlsStream&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Send for TlsStream&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["atomic"] = [{"text":"impl&lt;T&gt; Send for Atomic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["atomic_waker"] = [{"text":"impl Send for AtomicWaker","synthetic":false,"types":[]}];
implementors["atty"] = [{"text":"impl Send for Stream","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl Send for Frame","synthetic":true,"types":[]},{"text":"impl !Send for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Send for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; !Send for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Send for Backtrace","synthetic":true,"types":[]},{"text":"impl Send for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl Send for BacktraceSymbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for PrintFmt","synthetic":true,"types":[]}];
implementors["base58"] = [{"text":"impl Send for FromBase58Error","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for DecodeError","synthetic":true,"types":[]},{"text":"impl Send for CharacterSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Send for EncoderWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bincode"] = [{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl&lt;W, O&gt; Send for Serializer&lt;W, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]},{"text":"impl Send for NativeEndian","synthetic":true,"types":[]},{"text":"impl Send for FixintEncoding","synthetic":true,"types":[]},{"text":"impl Send for VarintEncoding","synthetic":true,"types":[]},{"text":"impl Send for Bounded","synthetic":true,"types":[]},{"text":"impl Send for Infinite","synthetic":true,"types":[]},{"text":"impl Send for AllowTrailing","synthetic":true,"types":[]},{"text":"impl Send for RejectTrailing","synthetic":true,"types":[]},{"text":"impl Send for DefaultOptions","synthetic":true,"types":[]},{"text":"impl&lt;O, L&gt; Send for WithOtherLimit&lt;O, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, E&gt; Send for WithOtherEndian&lt;O, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, I&gt; Send for WithOtherIntEncoding&lt;O, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; Send for WithOtherTrailing&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, O&gt; Send for Deserializer&lt;R, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'storage&gt; Send for SliceReader&lt;'storage&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for IoReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bip39"] = [{"text":"impl Send for Mnemonic","synthetic":true,"types":[]},{"text":"impl Send for Seed","synthetic":true,"types":[]},{"text":"impl Send for Language","synthetic":true,"types":[]},{"text":"impl Send for MnemonicType","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]}];
implementors["bitvec"] = [{"text":"impl&lt;T&gt; Send for BitIdx&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BitPos&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BitMask&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Msb0","synthetic":true,"types":[]},{"text":"impl Send for Lsb0","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; Send for BitSlice&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for Iter&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for IterMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for Chunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for ChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for ChunksExactMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for ChunksMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for RChunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for RChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for RChunksExactMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for RChunksMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; Send for Split&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; Send for SplitMut&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; Send for RSplit&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; Send for RSplitMut&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; Send for SplitN&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; Send for SplitNMut&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; Send for RSplitN&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; Send for RSplitNMut&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for Windows&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; !Send for BitMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; !Send for IntoIter&lt;O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; !Send for Drain&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; !Send for IntoIter&lt;O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, I&gt; !Send for Splice&lt;'a, O, T, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; Send for BitBox&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Send for BitVec&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["blake2"] = [{"text":"impl Send for Blake2b","synthetic":true,"types":[]},{"text":"impl Send for VarBlake2b","synthetic":true,"types":[]},{"text":"impl Send for Blake2s","synthetic":true,"types":[]},{"text":"impl Send for VarBlake2s","synthetic":true,"types":[]}];
implementors["blake2_rfc"] = [{"text":"impl Send for Blake2bResult","synthetic":true,"types":[]},{"text":"impl Send for Blake2b","synthetic":true,"types":[]},{"text":"impl Send for Blake2sResult","synthetic":true,"types":[]},{"text":"impl Send for Blake2s","synthetic":true,"types":[]}];
implementors["blake2b_simd"] = [{"text":"impl Send for Params","synthetic":true,"types":[]},{"text":"impl Send for State","synthetic":true,"types":[]},{"text":"impl Send for Hash","synthetic":true,"types":[]},{"text":"impl Send for Params","synthetic":true,"types":[]},{"text":"impl Send for State","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for HashManyJob&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["blake2s_simd"] = [{"text":"impl Send for Params","synthetic":true,"types":[]},{"text":"impl Send for State","synthetic":true,"types":[]},{"text":"impl Send for Hash","synthetic":true,"types":[]},{"text":"impl Send for Params","synthetic":true,"types":[]},{"text":"impl Send for State","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for HashManyJob&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize&gt; Send for BlockBuffer&lt;BlockSize&gt;","synthetic":true,"types":[]}];
implementors["block_cipher"] = [{"text":"impl Send for InvalidKeyLength","synthetic":true,"types":[]}];
implementors["block_padding"] = [{"text":"impl Send for PadError","synthetic":true,"types":[]},{"text":"impl Send for UnpadError","synthetic":true,"types":[]},{"text":"impl Send for ZeroPadding","synthetic":true,"types":[]},{"text":"impl Send for Pkcs7","synthetic":true,"types":[]},{"text":"impl Send for AnsiX923","synthetic":true,"types":[]},{"text":"impl Send for Iso7816","synthetic":true,"types":[]},{"text":"impl Send for NoPadding","synthetic":true,"types":[]}];
implementors["blocking"] = [{"text":"impl&lt;T&gt; Send for Unblock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bs58"] = [{"text":"impl Send for Alphabet","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for DecodeBuilder&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for EncodeBuilder&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["bstr"] = [{"text":"impl Send for BStr","synthetic":true,"types":[]},{"text":"impl Send for BString","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Bytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; Send for FieldsWith&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Find&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FindReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Finder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FinderReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Lines&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LinesWithTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Split&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SplitN&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SplitNReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SplitReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DrainBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CharIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Chars&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Utf8Chunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Utf8Chunks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Utf8Error","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for ByteLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for ByteRecords&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bumpalo"] = [{"text":"impl&lt;'a&gt; !Send for ChunkIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Bump","synthetic":false,"types":[]}];
implementors["byte_slice_cast"] = [{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl Send for Bytes","synthetic":true,"types":[]},{"text":"impl Send for BytesMut","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["c_linked_list"] = [{"text":"impl&lt;T, N&gt; !Send for CLinkedListMut&lt;T, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N&gt; !Send for CLinkedListMutIter&lt;'a, T, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N&gt; !Send for CLinkedListMutIterMut&lt;'a, T, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; !Send for CLinkedListConst&lt;T, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N&gt; !Send for CLinkedListConstIter&lt;'a, T, N&gt;","synthetic":true,"types":[]}];
implementors["cache_padded"] = [{"text":"impl&lt;T&gt; Send for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["chacha20"] = [{"text":"impl&lt;R&gt; Send for Cipher&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for XChaCha20","synthetic":true,"types":[]}];
implementors["chacha20poly1305"] = [{"text":"impl Send for XChaCha20Poly1305","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for ChaChaPoly1305&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl Send for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl Send for ParseMonthError","synthetic":true,"types":[]},{"text":"impl Send for SecondsFormat","synthetic":true,"types":[]},{"text":"impl Send for RoundingError","synthetic":true,"types":[]},{"text":"impl Send for Weekday","synthetic":true,"types":[]},{"text":"impl Send for Month","synthetic":true,"types":[]},{"text":"impl Send for FixedOffset","synthetic":true,"types":[]},{"text":"impl Send for Local","synthetic":true,"types":[]},{"text":"impl Send for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NaiveDate","synthetic":true,"types":[]},{"text":"impl Send for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl Send for IsoWeek","synthetic":true,"types":[]},{"text":"impl Send for NaiveTime","synthetic":true,"types":[]},{"text":"impl Send for Parsed","synthetic":true,"types":[]},{"text":"impl Send for InternalNumeric","synthetic":true,"types":[]},{"text":"impl Send for InternalFixed","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Pad","synthetic":true,"types":[]},{"text":"impl Send for Numeric","synthetic":true,"types":[]},{"text":"impl Send for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Send for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Send for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl&lt;'a, 'b&gt; !Send for App&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Send for Arg&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ArgGroup&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ArgMatches&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OsValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SubCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for AppSettings","synthetic":true,"types":[]},{"text":"impl Send for ArgSettings","synthetic":true,"types":[]},{"text":"impl Send for Shell","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]}];
implementors["concurrent_queue"] = [{"text":"impl Send for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for ConcurrentQueue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["cpuid_bool"] = [{"text":"impl Send for LazyBool","synthetic":true,"types":[]}];
implementors["cranelift_bforest"] = [{"text":"impl&lt;K, V&gt; Send for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, C&gt; Send for MapCursor&lt;'a, K, V, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for MapForest&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for MapIter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for Set&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, C&gt; Send for SetCursor&lt;'a, K, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for SetForest&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Send for SetIter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cranelift_codegen"] = [{"text":"impl !Send for Context","synthetic":true,"types":[]},{"text":"impl Send for ValueLocRange","synthetic":true,"types":[]},{"text":"impl Send for CodegenError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for MemoryCodeSink&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for NullRelocSink","synthetic":true,"types":[]},{"text":"impl Send for NullStackmapSink","synthetic":true,"types":[]},{"text":"impl Send for NullTrapSink","synthetic":true,"types":[]},{"text":"impl Send for Stackmap","synthetic":true,"types":[]},{"text":"impl Send for RegDiversions","synthetic":true,"types":[]},{"text":"impl Send for CodeInfo","synthetic":true,"types":[]},{"text":"impl Send for Reloc","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CFGPrinter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Send for FuncCursor&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Send for EncCursor&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl Send for CursorPosition","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for DisplayList&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DominatorTree","synthetic":true,"types":[]},{"text":"impl Send for DominatorTreePreorder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ChildIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BlockPredecessor","synthetic":true,"types":[]},{"text":"impl Send for ControlFlowGraph","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PredIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f, IIB&gt; Send for InsertBuilder&lt;'f, IIB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IIB: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Send for ReplaceBuilder&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl Send for AbiParam","synthetic":true,"types":[]},{"text":"impl Send for ExtFuncData","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl Send for HeapData","synthetic":true,"types":[]},{"text":"impl Send for MemFlags","synthetic":true,"types":[]},{"text":"impl Send for ProgramPoint","synthetic":true,"types":[]},{"text":"impl Send for SourceLoc","synthetic":true,"types":[]},{"text":"impl Send for TableData","synthetic":true,"types":[]},{"text":"impl Send for ValueLabel","synthetic":true,"types":[]},{"text":"impl Send for ValueLabelStart","synthetic":true,"types":[]},{"text":"impl Send for ArgumentExtension","synthetic":true,"types":[]},{"text":"impl Send for ArgumentPurpose","synthetic":true,"types":[]},{"text":"impl Send for ExternalName","synthetic":true,"types":[]},{"text":"impl Send for GlobalValueData","synthetic":true,"types":[]},{"text":"impl Send for HeapStyle","synthetic":true,"types":[]},{"text":"impl Send for LibCall","synthetic":true,"types":[]},{"text":"impl Send for ExpandedProgramPoint","synthetic":true,"types":[]},{"text":"impl Send for TrapCode","synthetic":true,"types":[]},{"text":"impl Send for ArgumentLoc","synthetic":true,"types":[]},{"text":"impl Send for ValueLoc","synthetic":true,"types":[]},{"text":"impl Send for ValueLabelAssignments","synthetic":true,"types":[]},{"text":"impl Send for ConstantData","synthetic":true,"types":[]},{"text":"impl Send for ConstantPoolEntry","synthetic":true,"types":[]},{"text":"impl Send for ConstantPool","synthetic":true,"types":[]},{"text":"impl Send for DataFlowGraph","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DisplayInst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ValueDef","synthetic":true,"types":[]},{"text":"impl Send for Block","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl Send for Inst","synthetic":true,"types":[]},{"text":"impl Send for StackSlot","synthetic":true,"types":[]},{"text":"impl Send for GlobalValue","synthetic":true,"types":[]},{"text":"impl Send for Constant","synthetic":true,"types":[]},{"text":"impl Send for Immediate","synthetic":true,"types":[]},{"text":"impl Send for JumpTable","synthetic":true,"types":[]},{"text":"impl Send for FuncRef","synthetic":true,"types":[]},{"text":"impl Send for SigRef","synthetic":true,"types":[]},{"text":"impl Send for Heap","synthetic":true,"types":[]},{"text":"impl Send for Table","synthetic":true,"types":[]},{"text":"impl Send for AnyEntity","synthetic":true,"types":[]},{"text":"impl Send for Function","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DisplayFunctionAnnotations&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DisplayFunction&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for InstOffsetIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Imm64","synthetic":true,"types":[]},{"text":"impl Send for Uimm64","synthetic":true,"types":[]},{"text":"impl Send for Uimm32","synthetic":true,"types":[]},{"text":"impl Send for V128Imm","synthetic":true,"types":[]},{"text":"impl Send for Offset32","synthetic":true,"types":[]},{"text":"impl Send for Ieee32","synthetic":true,"types":[]},{"text":"impl Send for Ieee64","synthetic":true,"types":[]},{"text":"impl Send for VariableArgs","synthetic":true,"types":[]},{"text":"impl Send for OpcodeConstraints","synthetic":true,"types":[]},{"text":"impl Send for ValueTypeSet","synthetic":true,"types":[]},{"text":"impl Send for InstructionFormat","synthetic":true,"types":[]},{"text":"impl Send for InstructionData","synthetic":true,"types":[]},{"text":"impl Send for Opcode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BranchInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CallInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ResolvedConstraint","synthetic":true,"types":[]},{"text":"impl Send for JumpTableData","synthetic":true,"types":[]},{"text":"impl Send for Layout","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Send for Blocks&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Send for Insts&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl Send for StackSlotData","synthetic":true,"types":[]},{"text":"impl Send for StackLayoutInfo","synthetic":true,"types":[]},{"text":"impl Send for StackSlots","synthetic":true,"types":[]},{"text":"impl Send for StackSlotKind","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for BranchRange","synthetic":true,"types":[]},{"text":"impl Send for OperandConstraint","synthetic":true,"types":[]},{"text":"impl Send for RecipeConstraints","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Encodings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for EncInfo","synthetic":true,"types":[]},{"text":"impl Send for Encoding","synthetic":true,"types":[]},{"text":"impl Send for StackBaseMask","synthetic":true,"types":[]},{"text":"impl Send for StackRef","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for TargetFrontendConfig","synthetic":true,"types":[]},{"text":"impl Send for CallConv","synthetic":true,"types":[]},{"text":"impl Send for ConstraintKind","synthetic":true,"types":[]},{"text":"impl Send for StackBase","synthetic":true,"types":[]},{"text":"impl Send for LookupError","synthetic":true,"types":[]},{"text":"impl Send for UnwindInfo","synthetic":true,"types":[]},{"text":"impl Send for UnwindInfo","synthetic":true,"types":[]},{"text":"impl Send for RegisterMappingError","synthetic":true,"types":[]},{"text":"impl Send for UnwindInfo","synthetic":true,"types":[]},{"text":"impl Send for RegBank","synthetic":true,"types":[]},{"text":"impl Send for RegClassData","synthetic":true,"types":[]},{"text":"impl Send for RegClassIndex","synthetic":true,"types":[]},{"text":"impl Send for RegInfo","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DisplayRegUnit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Loop","synthetic":true,"types":[]},{"text":"impl Send for LoopAnalysis","synthetic":true,"types":[]},{"text":"impl Send for MachCompileResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MachTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for InstColor","synthetic":true,"types":[]},{"text":"impl Send for LowerInput","synthetic":true,"types":[]},{"text":"impl&lt;'func, I&gt; !Send for Lower&lt;'func, I&gt;","synthetic":true,"types":[]},{"text":"impl Send for RelocDistance","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Send for VCode&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Send for VCodeBuilder&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Send for BlockLoweringOrder","synthetic":true,"types":[]},{"text":"impl Send for LoweredBlock","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MachBuffer&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as MachInst&gt;::LabelUse: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MachBufferFinalized","synthetic":true,"types":[]},{"text":"impl Send for MachLabel","synthetic":true,"types":[]},{"text":"impl Send for MachSrcLoc","synthetic":true,"types":[]},{"text":"impl Send for MachStackMap","synthetic":true,"types":[]},{"text":"impl Send for TargetIsaAdapter","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PredicateView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FlagsOrIsa&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SetError","synthetic":true,"types":[]},{"text":"impl Send for Regalloc","synthetic":true,"types":[]},{"text":"impl Send for OptLevel","synthetic":true,"types":[]},{"text":"impl Send for TlsModel","synthetic":true,"types":[]},{"text":"impl Send for LibcallCallConv","synthetic":true,"types":[]},{"text":"impl Send for Template","synthetic":true,"types":[]},{"text":"impl Send for Descriptor","synthetic":true,"types":[]},{"text":"impl Send for Detail","synthetic":true,"types":[]},{"text":"impl Send for PassTimes","synthetic":true,"types":[]},{"text":"impl Send for TimingToken","synthetic":true,"types":[]},{"text":"impl Send for VerifierError","synthetic":true,"types":[]},{"text":"impl Send for VerifierErrors","synthetic":true,"types":[]},{"text":"impl Send for PlainWriter","synthetic":true,"types":[]}];
implementors["cranelift_codegen_shared"] = [{"text":"impl Send for IntCC","synthetic":true,"types":[]},{"text":"impl Send for FloatCC","synthetic":true,"types":[]},{"text":"impl Send for EncodingBits","synthetic":true,"types":[]},{"text":"impl Send for OpcodePrefix","synthetic":true,"types":[]}];
implementors["cranelift_entity"] = [{"text":"impl&lt;K, V&gt; Send for BoxedSlice&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for Keys&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for EntityList&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ListPool&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for SecondaryMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for PrimaryMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for EntitySet&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for SparseMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PackedOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cranelift_frontend"] = [{"text":"impl&lt;'a&gt; Send for FunctionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FunctionBuilderContext","synthetic":true,"types":[]},{"text":"impl Send for Switch","synthetic":true,"types":[]},{"text":"impl Send for Variable","synthetic":true,"types":[]}];
implementors["cranelift_wasm"] = [{"text":"impl Send for DummyEnvironment","synthetic":true,"types":[]},{"text":"impl Send for WasmFuncType","synthetic":true,"types":[]},{"text":"impl Send for FuncTranslator","synthetic":true,"types":[]},{"text":"impl Send for FuncTranslationState","synthetic":true,"types":[]},{"text":"impl Send for ModuleTranslationState","synthetic":true,"types":[]},{"text":"impl Send for DataIndex","synthetic":true,"types":[]},{"text":"impl Send for DefinedFuncIndex","synthetic":true,"types":[]},{"text":"impl Send for DefinedGlobalIndex","synthetic":true,"types":[]},{"text":"impl Send for DefinedMemoryIndex","synthetic":true,"types":[]},{"text":"impl Send for DefinedTableIndex","synthetic":true,"types":[]},{"text":"impl Send for ElemIndex","synthetic":true,"types":[]},{"text":"impl Send for FuncIndex","synthetic":true,"types":[]},{"text":"impl Send for Global","synthetic":true,"types":[]},{"text":"impl Send for GlobalIndex","synthetic":true,"types":[]},{"text":"impl Send for Memory","synthetic":true,"types":[]},{"text":"impl Send for MemoryIndex","synthetic":true,"types":[]},{"text":"impl Send for SignatureIndex","synthetic":true,"types":[]},{"text":"impl Send for Table","synthetic":true,"types":[]},{"text":"impl Send for TableIndex","synthetic":true,"types":[]},{"text":"impl Send for GlobalVariable","synthetic":true,"types":[]},{"text":"impl Send for ReturnMode","synthetic":true,"types":[]},{"text":"impl Send for WasmError","synthetic":true,"types":[]},{"text":"impl Send for WasmType","synthetic":true,"types":[]},{"text":"impl Send for GlobalInit","synthetic":true,"types":[]},{"text":"impl Send for TableElementType","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Send for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for TryIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TryReadyError","synthetic":true,"types":[]},{"text":"impl Send for TrySelectError","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Send for Select&lt;'_&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Send for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Worker&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Stealer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Injector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T, P&gt; !Send for CompareAndSetError&lt;'g, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; !Send for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for LocalHandle","synthetic":true,"types":[]},{"text":"impl !Send for Guard","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send + Sync&gt; Send for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Collector","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl Send for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for ArrayQueue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for SegQueue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl Send for Backoff","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; Send for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Send for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Parker","synthetic":false,"types":[]},{"text":"impl Send for Unparker","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for ShardedLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope, T&gt; Send for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":false,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Send for InvalidKeyLength","synthetic":true,"types":[]},{"text":"impl Send for MacError","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for MacResult&lt;N&gt;","synthetic":true,"types":[]}];
implementors["cuckoofilter"] = [{"text":"impl&lt;H&gt; Send for CuckooFilter&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["curve25519_dalek"] = [{"text":"impl Send for Scalar","synthetic":true,"types":[]},{"text":"impl Send for MontgomeryPoint","synthetic":true,"types":[]},{"text":"impl Send for CompressedEdwardsY","synthetic":true,"types":[]},{"text":"impl Send for EdwardsPoint","synthetic":true,"types":[]},{"text":"impl Send for VartimeEdwardsPrecomputation","synthetic":true,"types":[]},{"text":"impl Send for EdwardsBasepointTable","synthetic":true,"types":[]},{"text":"impl Send for CompressedRistretto","synthetic":true,"types":[]},{"text":"impl Send for RistrettoPoint","synthetic":true,"types":[]},{"text":"impl Send for VartimeRistrettoPrecomputation","synthetic":true,"types":[]},{"text":"impl Send for RistrettoBasepointTable","synthetic":true,"types":[]}];
implementors["data_encoding"] = [{"text":"impl Send for DecodeError","synthetic":true,"types":[]},{"text":"impl Send for DecodePartial","synthetic":true,"types":[]},{"text":"impl Send for Encoding","synthetic":true,"types":[]},{"text":"impl Send for Translate","synthetic":true,"types":[]},{"text":"impl Send for Wrap","synthetic":true,"types":[]},{"text":"impl Send for Specification","synthetic":true,"types":[]},{"text":"impl Send for SpecificationError","synthetic":true,"types":[]},{"text":"impl Send for DecodeKind","synthetic":true,"types":[]},{"text":"impl Send for BitOrder","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl Send for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["directories"] = [{"text":"impl Send for BaseDirs","synthetic":true,"types":[]},{"text":"impl Send for UserDirs","synthetic":true,"types":[]},{"text":"impl Send for ProjectDirs","synthetic":true,"types":[]}];
implementors["dns_parser"] = [{"text":"impl&lt;'a&gt; Send for Question&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ResourceRecord&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Packet&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for QueryType","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for QueryClass","synthetic":true,"types":[]},{"text":"impl Send for ResponseCode","synthetic":true,"types":[]},{"text":"impl Send for Opcode","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Record","synthetic":true,"types":[]},{"text":"impl Send for Record","synthetic":true,"types":[]},{"text":"impl Send for Record","synthetic":true,"types":[]},{"text":"impl Send for Record","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Record","synthetic":true,"types":[]},{"text":"impl Send for Record","synthetic":true,"types":[]},{"text":"impl Send for Record","synthetic":true,"types":[]},{"text":"impl Send for Record","synthetic":true,"types":[]},{"text":"impl Send for Record","synthetic":true,"types":[]},{"text":"impl Send for Record","synthetic":true,"types":[]},{"text":"impl Send for Record","synthetic":true,"types":[]},{"text":"impl Send for Record","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Record","synthetic":true,"types":[]},{"text":"impl Send for Record","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RecordIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Record","synthetic":true,"types":[]}];
implementors["ed25519"] = [{"text":"impl Send for Signature","synthetic":true,"types":[]}];
implementors["ed25519_dalek"] = [{"text":"impl Send for Keypair","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl Send for SecretKey","synthetic":true,"types":[]},{"text":"impl Send for ExpandedSecretKey","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Send for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["env_logger"] = [{"text":"impl&lt;'a&gt; Send for Env&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Logger","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Target","synthetic":true,"types":[]},{"text":"impl Send for WriteStyle","synthetic":true,"types":[]},{"text":"impl Send for Filter","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Timestamp","synthetic":true,"types":[]},{"text":"impl !Send for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for StyledValue&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Formatter","synthetic":true,"types":[]},{"text":"impl Send for Color","synthetic":true,"types":[]},{"text":"impl Send for TimestampPrecision","synthetic":true,"types":[]}];
implementors["erased_serde"] = [{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["errno"] = [{"text":"impl Send for Errno","synthetic":true,"types":[]}];
implementors["event_listener"] = [{"text":"impl Send for Event","synthetic":false,"types":[]},{"text":"impl Send for EventListener","synthetic":false,"types":[]}];
implementors["exit_future"] = [{"text":"impl Send for Exit","synthetic":true,"types":[]},{"text":"impl Send for Signal","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl Send for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SyncFailure&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Send for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["fake_simd"] = [{"text":"impl Send for u32x4","synthetic":true,"types":[]},{"text":"impl Send for u64x2","synthetic":true,"types":[]}];
implementors["fallible_iterator"] = [{"text":"impl&lt;T, F&gt; Send for Map&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Convert&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Filter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for FilterMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Send for FlatMap&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFallibleIterator&gt;::IntoFallibleIter: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as FallibleIterator&gt;::Item as IntoFallibleIterator&gt;::IntoFallibleIter: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Fuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Iterator&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for MapErr&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Peekable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as FallibleIterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, St, F&gt; Send for Scan&lt;I, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for SkipWhile&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for TakeWhile&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Cycle&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Zip&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fastrand"] = [{"text":"impl Send for Rng","synthetic":true,"types":[]}];
implementors["finality_grandpa"] = [{"text":"impl&lt;H, N&gt; Send for Prevote&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Send for Precommit&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Send for PrimaryPropose&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Id, V, S&gt; Send for Equivocation&lt;Id, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Send for SignedMessage&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Send for Commit&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Send for SignedPrevote&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Send for SignedPrecommit&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Send for CompactCommit&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Send for CatchUp&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Send for CommitValidationResult&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Send for HistoricalVotes&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Send for Message&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Send for State&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Id, H, N&gt; Send for RoundParams&lt;Id, H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Id, H, N, Signature&gt; Send for Round&lt;Id, H, N, Signature&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Signature: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Phase","synthetic":true,"types":[]},{"text":"impl&lt;H, N, V&gt; Send for VoteGraph&lt;H, N, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Id&gt; Send for VoterSet&lt;Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for VoterInfo","synthetic":true,"types":[]},{"text":"impl Send for GoodCommit","synthetic":true,"types":[]},{"text":"impl Send for BadCommit","synthetic":true,"types":[]},{"text":"impl Send for GoodCatchUp","synthetic":true,"types":[]},{"text":"impl Send for BadCatchUp","synthetic":true,"types":[]},{"text":"impl&lt;Id, Timer, Input, Output&gt; Send for RoundData&lt;Id, Timer, Input, Output&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Input: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Timer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N, E, GlobalIn, GlobalOut&gt; Send for Voter&lt;H, N, E, GlobalIn, GlobalOut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;GlobalIn: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;GlobalOut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Environment&lt;H, N&gt;&gt;::Id: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Environment&lt;H, N&gt;&gt;::In: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Environment&lt;H, N&gt;&gt;::Out: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Environment&lt;H, N&gt;&gt;::Signature: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Environment&lt;H, N&gt;&gt;::Timer: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Send for CommunicationOut&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CommitProcessingOutcome","synthetic":true,"types":[]},{"text":"impl Send for CatchUpProcessingOutcome","synthetic":true,"types":[]},{"text":"impl&lt;O&gt; Send for Callback&lt;O&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, N, S, Id&gt; Send for CommunicationIn&lt;H, N, S, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Id&gt; Send for RoundState&lt;Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Id&gt; Send for VoterState&lt;Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["flate2"] = [{"text":"impl Send for Crc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for CrcReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for CrcWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for GzBuilder","synthetic":true,"types":[]},{"text":"impl Send for GzHeader","synthetic":true,"types":[]},{"text":"impl Send for Compress","synthetic":true,"types":[]},{"text":"impl Send for CompressError","synthetic":true,"types":[]},{"text":"impl Send for Decompress","synthetic":true,"types":[]},{"text":"impl Send for DecompressError","synthetic":true,"types":[]},{"text":"impl Send for Compression","synthetic":true,"types":[]},{"text":"impl Send for Status","synthetic":true,"types":[]},{"text":"impl Send for FlushCompress","synthetic":true,"types":[]},{"text":"impl Send for FlushDecompress","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DeflateDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for GzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for GzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for ZlibDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Send for FnvHasher","synthetic":true,"types":[]}];
implementors["fork_tree"] = [{"text":"impl&lt;H, N, V&gt; Send for ForkTree&lt;H, N, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Error&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for FinalizationResult&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["form_urlencoded"] = [{"text":"impl&lt;'a&gt; Send for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Serializer&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["frame_benchmarking"] = [{"text":"impl Send for BenchmarkBatch","synthetic":true,"types":[]},{"text":"impl Send for BenchmarkResults","synthetic":true,"types":[]},{"text":"impl Send for BenchmarkConfig","synthetic":true,"types":[]},{"text":"impl Send for Analysis","synthetic":true,"types":[]},{"text":"impl Send for BenchmarkParameter","synthetic":true,"types":[]},{"text":"impl Send for BenchmarkSelector","synthetic":true,"types":[]},{"text":"impl Send for HostFunctions","synthetic":true,"types":[]}];
implementors["frame_benchmarking_cli"] = [{"text":"impl Send for BenchmarkCmd","synthetic":true,"types":[]}];
implementors["frame_executive"] = [{"text":"impl&lt;System, Block, Context, UnsignedValidator, AllModules, OnRuntimeUpgrade&gt; Send for Executive&lt;System, Block, Context, UnsignedValidator, AllModules, OnRuntimeUpgrade&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllModules: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Context: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;OnRuntimeUpgrade: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;System: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;UnsignedValidator: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["frame_metadata"] = [{"text":"impl Send for FunctionMetadata","synthetic":true,"types":[]},{"text":"impl Send for FunctionArgumentMetadata","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for FnEncode&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Send for OuterEventMetadata","synthetic":true,"types":[]},{"text":"impl Send for EventMetadata","synthetic":true,"types":[]},{"text":"impl Send for StorageEntryMetadata","synthetic":true,"types":[]},{"text":"impl Send for ModuleConstantMetadata","synthetic":true,"types":[]},{"text":"impl Send for ErrorMetadata","synthetic":true,"types":[]},{"text":"impl Send for DefaultByteGetter","synthetic":true,"types":[]},{"text":"impl Send for StorageMetadata","synthetic":true,"types":[]},{"text":"impl Send for RuntimeMetadataPrefixed","synthetic":true,"types":[]},{"text":"impl Send for ExtrinsicMetadata","synthetic":true,"types":[]},{"text":"impl Send for RuntimeMetadataV12","synthetic":true,"types":[]},{"text":"impl Send for ModuleMetadata","synthetic":true,"types":[]},{"text":"impl&lt;B, O&gt; Send for DecodeDifferent&lt;B, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StorageHasher","synthetic":true,"types":[]},{"text":"impl Send for StorageEntryType","synthetic":true,"types":[]},{"text":"impl Send for StorageEntryModifier","synthetic":true,"types":[]},{"text":"impl Send for RuntimeMetadata","synthetic":true,"types":[]},{"text":"impl Send for RuntimeMetadataDeprecated","synthetic":true,"types":[]}];
implementors["frame_support_procedural_tools"] = [{"text":"impl !Send for StopParse","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !Send for Braces&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !Send for Brackets&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !Send for Parens&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P, T, V&gt; Send for PunctuatedInner&lt;P, T, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NoTrailing","synthetic":true,"types":[]},{"text":"impl Send for Trailing","synthetic":true,"types":[]},{"text":"impl !Send for Meta","synthetic":true,"types":[]},{"text":"impl !Send for OuterAttributes","synthetic":true,"types":[]}];
implementors["frame_system"] = [{"text":"impl&lt;T&gt; Send for CheckMortality&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CheckGenesis&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CheckNonce&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Index: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CheckSpecVersion&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CheckTxVersion&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CheckWeight&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; Send for EventRecord&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Index, AccountData&gt; Send for AccountInfo&lt;Index, AccountData&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountData: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Index: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for LastRuntimeUpgradeInfo","synthetic":true,"types":[]},{"text":"impl Send for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Account&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BlockHash&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for LastRuntimeUpgrade","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; Send for EnsureRoot&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; Send for EnsureSigned&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Who, AccountId&gt; Send for EnsureSignedBy&lt;Who, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Who: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; Send for EnsureNone&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for EnsureNever&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, L, R&gt; Send for EnsureOneOf&lt;AccountId, L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CallOnCreatedAccount&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CallKillAccount&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ChainContext&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Phase","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; Send for RawOrigin&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; Send for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for InitKind","synthetic":true,"types":[]},{"text":"impl Send for RefStatus","synthetic":true,"types":[]},{"text":"impl Send for ForAll","synthetic":true,"types":[]},{"text":"impl Send for ForAny","synthetic":true,"types":[]},{"text":"impl&lt;T, OverarchingCall&gt; Send for SubmitTransaction&lt;T, OverarchingCall&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OverarchingCall: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, C, X&gt; Send for Signer&lt;T, C, X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as SigningTypes&gt;::Public: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Account&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as SigningTypes&gt;::Public: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;T&gt; Send for Async&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AsyncSink&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Send for Lazy&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for FutureResult&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Send for LoopFn&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Send for AndThen&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Flatten&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;A as Future&gt;::Item as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Fuse&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Join&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C&gt; Send for Join3&lt;A, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; Send for Join4&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E&gt; Send for Join5&lt;A, B, C, D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Send for Map&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Send for MapErr&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, E&gt; Send for FromErr&lt;A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Send for OrElse&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for SelectNext&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Select2&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Send for Then&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Send for Inspect&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for CatchUnwind&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for JoinAll&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for SelectAll&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for SelectOk&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Shared&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Error: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SharedItem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SharedError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for ExecuteError&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for Loop&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ExecuteErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Send for IterOk&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for IterResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Repeat&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Send for AndThen&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Send for Chain&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Concat&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Concat2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Filter&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut, T&gt; Send for Fold&lt;S, F, Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Send for ForEach&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; Send for FromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for StreamFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for InspectErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for MapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Send for Merge&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Error: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Once&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Send for OrElse&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Peekable&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Send for Select&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; Send for SkipWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; Send for TakeWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Send for Then&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Send for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Send for Zip&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S1 as Stream&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Forward&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Buffered&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Stream&gt;::Item as IntoFuture&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Stream&gt;::Item as IntoFuture&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for BufferUnordered&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Stream&gt;::Item as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for CatchUnwind&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Chunks&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Collect&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Wait&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SplitStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SplitSink&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReuniteError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FuturesOrdered&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I1, I2&gt; Send for MergedItem&lt;I1, I2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; !Send for IterMut&lt;'a, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Buffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Wait&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, Fut&gt; Send for With&lt;S, U, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, St&gt; Send for WithFlatMap&lt;S, U, F, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Flush&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Send&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for SendAll&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for SinkMapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; Send for SinkFromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Fanout&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Sink&gt;::SinkItem: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Sink&gt;::SinkItem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for Spawn&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UnparkEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BiLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for BiLockGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BiLockAcquire&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BiLockAcquired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Canceled","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for SpawnHandle&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Execute&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedReceiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; Send for SpawnHandle&lt;Item, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Execute&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; !Send for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Send for Execute&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !Send for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !Send for Execute&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for FuturesUnordered&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for AtomicTask","synthetic":false,"types":[]},{"text":"impl Send for NotifyHandle","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedReceiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Canceled","synthetic":true,"types":[]}];
implementors["futures_codec"] = [{"text":"impl Send for BytesCodec","synthetic":true,"types":[]},{"text":"impl Send for LengthCodec","synthetic":true,"types":[]},{"text":"impl Send for LinesCodec","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; Send for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["futures_core"] = [{"text":"impl&lt;'a, T&gt; !Send for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;T, '_&gt; Send for FutureObj&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["futures_cpupool"] = [{"text":"impl Send for CpuPool","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for CpuFuture&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["futures_diagnose"] = [{"text":"impl&lt;T&gt; Send for DiagnoseFuture&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DiagSpawn&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["futures_executor"] = [{"text":"impl&lt;S&gt; Send for BlockingStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for LocalPool","synthetic":true,"types":[]},{"text":"impl !Send for LocalSpawner","synthetic":true,"types":[]},{"text":"impl Send for ThreadPool","synthetic":true,"types":[]},{"text":"impl Send for ThreadPoolBuilder","synthetic":true,"types":[]},{"text":"impl Send for Enter","synthetic":true,"types":[]},{"text":"impl Send for EnterError","synthetic":true,"types":[]}];
implementors["futures_lite"] = [{"text":"impl&lt;T&gt; Send for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollOnce&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for YieldNow","synthetic":true,"types":[]},{"text":"impl&lt;F1, F2&gt; Send for Zip&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F2 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F1, F2&gt; Send for TryZip&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F2 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F1, F2&gt; Send for Or&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F1, F2&gt; Send for Race&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for CatchUnwind&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for BlockOn&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for RepeatWith&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Send for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Send for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for NextFuture&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for TryNextFuture&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S:&nbsp;?Sized&gt; Send for CountFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, C&gt; Send for CollectFuture&lt;S, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, C&gt; Send for TryCollectFuture&lt;S, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, B&gt; Send for PartitionFuture&lt;S, P, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, T&gt; Send for FoldFuture&lt;S, F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, F, B&gt; Send for TryFoldFuture&lt;'a, S, F, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, St, F&gt; Send for Scan&lt;S, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F&gt; Send for FlatMap&lt;S, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut&gt; Send for Then&lt;S, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Send for Filter&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Send for Or&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Send for Race&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Send for TakeWhile&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Send for SkipWhile&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for StepBy&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U&gt; Send for Chain&lt;S, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Cloned&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Copied&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Cycle&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Enumerate&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for NthFuture&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for LastFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, P&gt; Send for FindFuture&lt;'a, S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, F&gt; Send for FindMapFuture&lt;'a, S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, P&gt; Send for PositionFuture&lt;'a, S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, P&gt; Send for AllFuture&lt;'a, S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, P&gt; Send for AnyFuture&lt;'a, S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for ForEachFuture&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, F&gt; Send for TryForEachFuture&lt;'a, S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, FromA, FromB&gt; Send for UnzipFuture&lt;S, FromA, FromB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FromA: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;FromB: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AssertAsync&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BlockOn&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Empty","synthetic":true,"types":[]},{"text":"impl Send for Repeat","synthetic":true,"types":[]},{"text":"impl Send for Sink","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for FillBuf&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadUntilFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadLineFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadVectoredFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadToEndFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadToStringFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadExactFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Bytes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R1, R2&gt; Send for Chain&lt;R1, R2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for SeekFuture&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for WriteFuture&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for WriteVectoredFuture&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for WriteAllFuture&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for FlushFuture&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for CloseFuture&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReadHalf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WriteHalf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl Send for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, '_&gt; Send for FutureObj&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["futures_timer"] = [{"text":"impl Send for Delay","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;F&gt; Send for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Send for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; Send for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Remote&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RemoteHandle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Shared&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for WeakShared&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Send for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Send for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Send for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Send for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; Send for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Send for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Si&gt; Send for FlattenSink&lt;Fut, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Send for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Send for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Send for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Send for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for JoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for SelectAll&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Send for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Send for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Send for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Send for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for TryJoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for SelectOk&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Abortable&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AbortHandle","synthetic":true,"types":[]},{"text":"impl Send for AbortRegistration","synthetic":true,"types":[]},{"text":"impl Send for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Send for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Send for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Cycle&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; Send for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Send for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Send for Next&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; Send for Peek&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; Send for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Send for SelectNextSome&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; Send for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Send for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Si&gt; Send for Forward&lt;St, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for BufferUnordered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Buffered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;St as Stream&gt;::Item as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for ForEachConcurrent&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; Send for ReuniteError&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, Item&gt; Send for SplitSink&lt;S, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SplitStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; Send for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Send for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Send for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Send for TryNext&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryTakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Send for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for IntoAsyncRead&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryBufferUnordered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryBuffered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;St as TryStream&gt;::Ok as TryFuture&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;St as TryStream&gt;::Ok as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryForEachConcurrent&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Send for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Send for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FuturesOrdered&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for SelectAll&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Send for Close&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Drain&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si1, Si2&gt; Send for Fanout&lt;Si1, Si2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Send for Flush&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, E&gt; Send for SinkErrInto&lt;Si, Item, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, F&gt; Send for SinkMapErr&lt;Si, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Send for Send&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, St:&nbsp;?Sized&gt; Send for SendAll&lt;'a, Si, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, Fut, F&gt; Send for With&lt;Si, Item, U, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, St, F&gt; Send for WithFlatMap&lt;Si, Item, U, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item&gt; Send for Buffer&lt;Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ex&gt; Send for Executor01As03&lt;Ex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Compat01As03&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, SinkItem&gt; Send for Compat01As03Sink&lt;S, SinkItem&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;SinkItem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Compat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; Send for CompatSink&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for Close&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; Send for Copy&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; Send for CopyBuf&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Empty","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for FillBuf&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for Flush&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, Item&gt; Send for IntoSink&lt;W, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for Read&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadVectored&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadExact&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadLine&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadToEnd&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadToString&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadUntil&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Repeat","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for Seek&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Sink","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReadHalf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WriteHalf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReuniteError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for Write&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for WriteVectored&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for WriteAll&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BiLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for BiLockAcquire&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for BiLockGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReuniteError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut:&nbsp;Send&gt; Send for FuturesUnordered&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send, '_&gt; Send for MutexLockFuture&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send, '_&gt; Send for MutexGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send, U:&nbsp;?Sized + Send, '_&gt; Send for MappedMutexGuard&lt;'_, T, U&gt;","synthetic":false,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, N&gt; Send for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send, N:&nbsp;ArrayLength&lt;T&gt;&gt; Send for GenericArray&lt;T, N&gt;","synthetic":false,"types":[]}];
implementors["get_if_addrs"] = [{"text":"impl Send for Interface","synthetic":true,"types":[]},{"text":"impl Send for Ifv4Addr","synthetic":true,"types":[]},{"text":"impl Send for Ifv6Addr","synthetic":true,"types":[]},{"text":"impl Send for IfAddr","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["ghash"] = [{"text":"impl Send for GHash","synthetic":true,"types":[]}];
implementors["gimli"] = [{"text":"impl Send for Encoding","synthetic":true,"types":[]},{"text":"impl Send for LineEncoding","synthetic":true,"types":[]},{"text":"impl Send for Register","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugAbbrevOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugAddrBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugAddrIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugInfoOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugLineOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugLineStrOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LocationListsOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugLocListsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugLocListsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugMacinfoOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugMacroOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RangeListsOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugRngListsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugRngListsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugStrOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugStrOffsetsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugStrOffsetsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugTypesOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DebugTypeSignature","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugFrameOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for EhFrameOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Arm","synthetic":true,"types":[]},{"text":"impl Send for X86","synthetic":true,"types":[]},{"text":"impl Send for X86_64","synthetic":true,"types":[]},{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]},{"text":"impl Send for Format","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnitSectionOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SectionId","synthetic":true,"types":[]},{"text":"impl Send for RunTimeEndian","synthetic":true,"types":[]},{"text":"impl Send for DwUt","synthetic":true,"types":[]},{"text":"impl Send for DwCfa","synthetic":true,"types":[]},{"text":"impl Send for DwChildren","synthetic":true,"types":[]},{"text":"impl Send for DwTag","synthetic":true,"types":[]},{"text":"impl Send for DwAt","synthetic":true,"types":[]},{"text":"impl Send for DwForm","synthetic":true,"types":[]},{"text":"impl Send for DwAte","synthetic":true,"types":[]},{"text":"impl Send for DwLle","synthetic":true,"types":[]},{"text":"impl Send for DwDs","synthetic":true,"types":[]},{"text":"impl Send for DwEnd","synthetic":true,"types":[]},{"text":"impl Send for DwAccess","synthetic":true,"types":[]},{"text":"impl Send for DwVis","synthetic":true,"types":[]},{"text":"impl Send for DwVirtuality","synthetic":true,"types":[]},{"text":"impl Send for DwLang","synthetic":true,"types":[]},{"text":"impl Send for DwAddr","synthetic":true,"types":[]},{"text":"impl Send for DwId","synthetic":true,"types":[]},{"text":"impl Send for DwCc","synthetic":true,"types":[]},{"text":"impl Send for DwInl","synthetic":true,"types":[]},{"text":"impl Send for DwOrd","synthetic":true,"types":[]},{"text":"impl Send for DwDsc","synthetic":true,"types":[]},{"text":"impl Send for DwIdx","synthetic":true,"types":[]},{"text":"impl Send for DwDefaulted","synthetic":true,"types":[]},{"text":"impl Send for DwLns","synthetic":true,"types":[]},{"text":"impl Send for DwLne","synthetic":true,"types":[]},{"text":"impl Send for DwLnct","synthetic":true,"types":[]},{"text":"impl Send for DwMacro","synthetic":true,"types":[]},{"text":"impl Send for DwRle","synthetic":true,"types":[]},{"text":"impl Send for DwOp","synthetic":true,"types":[]},{"text":"impl Send for DwEhPe","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugAddr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugFrame&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for EhFrameHdr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ParsedEhFrameHdr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for EhHdrTable&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for EhFrame&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BaseAddresses","synthetic":true,"types":[]},{"text":"impl Send for SectionBaseAddresses","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Send for CfiEntriesIter&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Augmentation","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for CommonInformationEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Send for PartialFrameDescriptionEntry&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Section as UnwindSection&lt;R&gt;&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for FrameDescriptionEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for UninitializedUnwindContext&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for UnwindContext&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for UnwindTable&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'iter, R&gt; Send for RegisterRuleIter&lt;'iter, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for UnwindTableRow&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for CallFrameInstructionIter&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Dwarf&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for Unit&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RangeIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'input, Endian&gt; Send for EndianSlice&lt;'input, Endian&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Endian, T&gt; Send for EndianReader&lt;Endian, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ReaderOffsetId","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugAbbrev&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Abbreviations","synthetic":true,"types":[]},{"text":"impl Send for Abbreviation","synthetic":true,"types":[]},{"text":"impl Send for AttributeSpecification","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ArangeEntry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugAranges&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ArangeEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugLine&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Program, Offset&gt; Send for LineRows&lt;R, Program, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Program: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for LineInstructions&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for LineRow","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for LineSequence&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for LineProgramHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for IncompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for CompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for FileEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FileEntryFormat","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugLoc&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugLocLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for LocationLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RawLocListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for LocListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for LocationListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for Piece&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Expression&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for OperationIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Evaluation&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for PubNamesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugPubNames&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for PubNamesEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for PubTypesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugPubTypes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for PubTypesEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugRanges&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugRngLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RangeLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RawRngListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RngListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Range","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugStr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugStrOffsets&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugLineStr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnitOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugInfo&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for CompilationUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for CompilationUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for UnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R, Offset&gt; Send for DebuggingInformationEntry&lt;'abbrev, 'unit, R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Attribute&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'entry, 'unit, R&gt; !Send for AttrsIter&lt;'abbrev, 'entry, 'unit, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; Send for EntriesRaw&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; Send for EntriesCursor&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; Send for EntriesTree&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, 'tree, R&gt; Send for EntriesTreeNode&lt;'abbrev, 'unit, 'tree, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, 'tree, R&gt; Send for EntriesTreeIter&lt;'abbrev, 'unit, 'tree, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugTypes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for TypeUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for TypeUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Send for CieOrFde&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Section as UnwindSection&lt;R&gt;&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for CfaRule&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RegisterRule&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for CallFrameInstruction&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Pointer","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for LineInstruction&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ColumnType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RawLocListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DieReference&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for Operation&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for Location&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for EvaluationResult&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RawRngListEntry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for AttributeValue&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ValueType","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;Endian&gt; Send for EndianVec&lt;Endian&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for InitialLengthOffset","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Sections&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DebugAbbrev&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DebugFrame&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for EhFrame&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CieId","synthetic":true,"types":[]},{"text":"impl Send for FrameTable","synthetic":true,"types":[]},{"text":"impl Send for CommonInformationEntry","synthetic":true,"types":[]},{"text":"impl Send for FrameDescriptionEntry","synthetic":true,"types":[]},{"text":"impl Send for Dwarf","synthetic":true,"types":[]},{"text":"impl Send for DwarfUnit","synthetic":true,"types":[]},{"text":"impl Send for LineProgram","synthetic":true,"types":[]},{"text":"impl Send for LineRow","synthetic":true,"types":[]},{"text":"impl Send for DirectoryId","synthetic":true,"types":[]},{"text":"impl Send for FileId","synthetic":true,"types":[]},{"text":"impl Send for FileInfo","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DebugLine&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DebugLoc&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DebugLocLists&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for LocationListOffsets","synthetic":true,"types":[]},{"text":"impl Send for LocationListId","synthetic":true,"types":[]},{"text":"impl Send for LocationListTable","synthetic":true,"types":[]},{"text":"impl Send for LocationList","synthetic":true,"types":[]},{"text":"impl Send for Expression","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DebugRanges&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DebugRngLists&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RangeListOffsets","synthetic":true,"types":[]},{"text":"impl Send for RangeListId","synthetic":true,"types":[]},{"text":"impl Send for RangeListTable","synthetic":true,"types":[]},{"text":"impl Send for RangeList","synthetic":true,"types":[]},{"text":"impl Send for StringId","synthetic":true,"types":[]},{"text":"impl Send for StringTable","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DebugStr&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DebugStrOffsets","synthetic":true,"types":[]},{"text":"impl Send for LineStringId","synthetic":true,"types":[]},{"text":"impl Send for LineStringTable","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DebugLineStr&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DebugLineStrOffsets","synthetic":true,"types":[]},{"text":"impl Send for UnitId","synthetic":true,"types":[]},{"text":"impl Send for UnitEntryId","synthetic":true,"types":[]},{"text":"impl Send for UnitTable","synthetic":true,"types":[]},{"text":"impl Send for Unit","synthetic":true,"types":[]},{"text":"impl Send for DebuggingInformationEntry","synthetic":true,"types":[]},{"text":"impl Send for Attribute","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DebugInfo&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DebugInfoOffsets","synthetic":true,"types":[]},{"text":"impl Send for CallFrameInstruction","synthetic":true,"types":[]},{"text":"impl Send for LineString","synthetic":true,"types":[]},{"text":"impl Send for Location","synthetic":true,"types":[]},{"text":"impl Send for Range","synthetic":true,"types":[]},{"text":"impl Send for AttributeValue","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Address","synthetic":true,"types":[]},{"text":"impl Send for Reference","synthetic":true,"types":[]},{"text":"impl Send for ConvertError","synthetic":true,"types":[]}];
implementors["globset"] = [{"text":"impl Send for Glob","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for GlobBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GlobMatcher","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for GlobSet","synthetic":true,"types":[]},{"text":"impl Send for GlobSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Candidate&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]}];
implementors["governance_os_node"] = [{"text":"impl Send for Cli","synthetic":true,"types":[]},{"text":"impl Send for GeneratePlcrVotesCmd","synthetic":true,"types":[]},{"text":"impl Send for Subcommand","synthetic":true,"types":[]},{"text":"impl Send for Executor","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; Send for FullDeps&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["governance_os_pallet_bylaws"] = [{"text":"impl&lt;T&gt; Send for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Role: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Roles&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Role&gt; Send for RawEvent&lt;AccountId, Role&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Role: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Lookup: StaticLookup,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Role: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Lookup as StaticLookup&gt;::Source: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["governance_os_pallet_coin_voting"] = [{"text":"impl&lt;Balance&gt; Send for VoteData&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber, CurrencyId&gt; Send for VotingParameters&lt;BlockNumber, CurrencyId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Proposals&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Locks&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for VoteCountingStrategy","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["governance_os_pallet_compat"] = [{"text":"impl&lt;T&gt; Send for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Call: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Lookup as StaticLookup&gt;::Source: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["governance_os_pallet_organizations"] = [{"text":"impl&lt;AccountId, VotingSystem&gt; Send for OrganizationDetails&lt;AccountId, VotingSystem&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;VotingSystem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Call, OrganizationId, VotingSystem&gt; Send for Proposal&lt;Call, OrganizationId, VotingSystem&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;OrganizationId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;VotingSystem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::VotingRouter as VotingRouter&gt;::Parameters: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::VotingRouter: VotingRouter,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::VotingRouter as VotingRouter&gt;::VotingSystemId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Counter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Parameters&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Proposals&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, OrganizationDetails, ProposalId, VoteData&gt; Send for RawEvent&lt;AccountId, OrganizationDetails, ProposalId, VoteData&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;OrganizationDetails: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;ProposalId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;VoteData: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Call: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Lookup: StaticLookup,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::VotingRouter as VotingRouter&gt;::Parameters: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Lookup as StaticLookup&gt;::Source: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::VotingRouter as VotingRouter&gt;::VoteData: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::VotingRouter: VotingRouter,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::VotingRouter as VotingRouter&gt;::VotingSystemId: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["governance_os_pallet_plcr_voting"] = [{"text":"impl&lt;BlockNumber, CurrencyId&gt; Send for VotingParameters&lt;BlockNumber, CurrencyId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Proposals&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Locks&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Votes&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance, Hash&gt; Send for VoteData&lt;Balance, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, AccountId&gt; Send for RawEvent&lt;Hash, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["governance_os_pallet_tokens"] = [{"text":"impl&lt;Balance&gt; Send for AccountCurrencyData&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Pallet, GetCurrencyId&gt; Send for NativeCurrencyAdapter&lt;Pallet, GetCurrencyId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;GetCurrencyId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pallet: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; Send for CurrencyDetails&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, GetCurrencyId&gt; Send for NegativeImbalance&lt;T, GetCurrencyId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;GetCurrencyId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Balance: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, GetCurrencyId&gt; Send for PositiveImbalance&lt;T, GetCurrencyId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;GetCurrencyId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Balance: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Balance: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::CurrencyId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Balances&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Locks&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TotalIssuances&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance, CurrencyId, CurrencyDetails&gt; Send for RawEvent&lt;AccountId, Balance, CurrencyId, CurrencyDetails&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyDetails: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;CurrencyId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Balance: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::CurrencyId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Lookup: StaticLookup,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Lookup as StaticLookup&gt;::Source: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["governance_os_primitives"] = [{"text":"impl Send for CurrencyId","synthetic":true,"types":[]},{"text":"impl Send for Role","synthetic":true,"types":[]}];
implementors["governance_os_runtime"] = [{"text":"impl Send for SessionKeys","synthetic":true,"types":[]},{"text":"impl Send for NativeCurrencyId","synthetic":true,"types":[]},{"text":"impl Send for Runtime","synthetic":true,"types":[]},{"text":"impl !Send for Origin","synthetic":true,"types":[]},{"text":"impl Send for PalletInfo","synthetic":true,"types":[]},{"text":"impl Send for GenesisConfig","synthetic":true,"types":[]},{"text":"impl Send for RuntimeApi","synthetic":true,"types":[]},{"text":"impl Send for RuntimeVotingParameters","synthetic":true,"types":[]},{"text":"impl Send for RuntimeVotingSystemId","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for OriginCaller","synthetic":true,"types":[]},{"text":"impl Send for Call","synthetic":true,"types":[]},{"text":"impl&lt;Block:&nbsp;BlockT, C:&nbsp;CallApiAt&lt;Block&gt;&gt; Send for RuntimeApiImpl&lt;Block, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C::StateBackend: StateBackend&lt;HashFor&lt;Block&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["governance_os_support"] = [{"text":"impl Send for AclError","synthetic":true,"types":[]},{"text":"impl Send for ProposalResult","synthetic":true,"types":[]},{"text":"impl Send for BlockHashCount","synthetic":true,"types":[]},{"text":"impl Send for MaximumBlockWeight","synthetic":true,"types":[]},{"text":"impl Send for MaximumBlockLength","synthetic":true,"types":[]},{"text":"impl Send for AvailableBlockRatio","synthetic":true,"types":[]}];
implementors["h2"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Reason","synthetic":true,"types":[]},{"text":"impl Send for FlowControl","synthetic":true,"types":[]},{"text":"impl Send for Ping","synthetic":true,"types":[]},{"text":"impl Send for PingPong","synthetic":true,"types":[]},{"text":"impl Send for Pong","synthetic":true,"types":[]},{"text":"impl Send for RecvStream","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendStream&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StreamId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for ReadySendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ResponseFuture","synthetic":true,"types":[]},{"text":"impl Send for PushedResponseFuture","synthetic":true,"types":[]},{"text":"impl Send for PushPromise","synthetic":true,"types":[]},{"text":"impl Send for PushPromises","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Handshake&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendResponse&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendPushedResponse&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hash256_std_hasher"] = [{"text":"impl Send for Hash256StdHasher","synthetic":true,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K, V, S&gt; Send for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawEntryBuilderMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawVacantEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawEntryBuilder&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Send for Iter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for IntoIter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Send for Drain&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for SymmetricDifference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K:&nbsp;Send, V:&nbsp;Send, '_&gt; Send for IterMut&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Send for RawOccupiedEntryMut&lt;'_, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, S, '_&gt; Send for OccupiedEntry&lt;'_, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["hex"] = [{"text":"impl Send for FromHexError","synthetic":true,"types":[]}];
implementors["hex_fmt"] = [{"text":"impl&lt;T&gt; Send for HexFmt&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for HexList&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; Send for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hmac_drbg"] = [{"text":"impl&lt;D&gt; Send for HmacDRBG&lt;D&gt;","synthetic":true,"types":[]}];
implementors["http"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Extensions","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for HeaderMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Keys&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Values&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ValuesMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for GetAll&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for OccupiedEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ValueIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for HeaderName","synthetic":true,"types":[]},{"text":"impl Send for InvalidHeaderName","synthetic":true,"types":[]},{"text":"impl Send for InvalidHeaderNameBytes","synthetic":true,"types":[]},{"text":"impl Send for HeaderValue","synthetic":true,"types":[]},{"text":"impl Send for InvalidHeaderValue","synthetic":true,"types":[]},{"text":"impl Send for InvalidHeaderValueBytes","synthetic":true,"types":[]},{"text":"impl Send for ToStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Entry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Method","synthetic":true,"types":[]},{"text":"impl Send for InvalidMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Request&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Parts","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Response&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Parts","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for StatusCode","synthetic":true,"types":[]},{"text":"impl Send for InvalidStatusCode","synthetic":true,"types":[]},{"text":"impl Send for Version","synthetic":true,"types":[]},{"text":"impl Send for Authority","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for PathAndQuery","synthetic":true,"types":[]},{"text":"impl Send for Scheme","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Port&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Uri","synthetic":true,"types":[]},{"text":"impl Send for Parts","synthetic":true,"types":[]},{"text":"impl Send for InvalidUri","synthetic":true,"types":[]},{"text":"impl Send for InvalidUriBytes","synthetic":true,"types":[]},{"text":"impl Send for InvalidUriParts","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Send for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for IterMut&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for ValueIterMut&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for ValueDrain&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["http_body"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for Data&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for Trailers&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SizeHint","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl Send for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Send for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Send for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Header&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["httpdate"] = [{"text":"impl Send for HttpDate","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["humantime"] = [{"text":"impl Send for FormattedDuration","synthetic":true,"types":[]},{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for Timestamp","synthetic":true,"types":[]},{"text":"impl Send for Rfc3339Timestamp","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl Send for Body","synthetic":true,"types":[]},{"text":"impl Send for Chunk","synthetic":true,"types":[]},{"text":"impl Send for Sender","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for HttpConnector&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, B&gt; Send for Client&lt;C, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ResponseFuture","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Payload&gt;::Data: Buf + Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Handshake&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ResponseFuture","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for HttpInfo","synthetic":true,"types":[]},{"text":"impl Send for Destination","synthetic":true,"types":[]},{"text":"impl Send for Connected","synthetic":true,"types":[]},{"text":"impl Send for Name","synthetic":true,"types":[]},{"text":"impl Send for GaiResolver","synthetic":true,"types":[]},{"text":"impl Send for GaiAddrs","synthetic":true,"types":[]},{"text":"impl Send for GaiFuture","synthetic":true,"types":[]},{"text":"impl Send for InvalidNameError","synthetic":true,"types":[]},{"text":"impl Send for TokioThreadpoolGaiResolver","synthetic":true,"types":[]},{"text":"impl Send for TokioThreadpoolGaiFuture","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;I, S, E&gt; Send for Server&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Send for Builder&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AddrIncoming","synthetic":true,"types":[]},{"text":"impl Send for AddrStream","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Http&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, S, E&gt; Send for Serve&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F, E&gt; Send for Connecting&lt;I, F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S, E&gt; Send for Connection&lt;T, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Service&gt;::ResBody as Payload&gt;::Data: Buf + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Service&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Service&gt;::ResBody: Payload + Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for Parts&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Upgraded","synthetic":true,"types":[]},{"text":"impl Send for OnUpgrade","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper_rustls"] = [{"text":"impl&lt;T&gt; Send for HttpsConnector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MaybeHttpsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl Send for Errors","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; Send for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Send for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; Send for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["intervalier"] = [{"text":"impl Send for Interval","synthetic":true,"types":[]},{"text":"impl Send for BackSignalGuard","synthetic":true,"types":[]},{"text":"impl Send for BackSignalInterval","synthetic":true,"types":[]},{"text":"impl Send for BackSignalControl","synthetic":true,"types":[]},{"text":"impl Send for ManualSignalInterval","synthetic":true,"types":[]},{"text":"impl Send for ManualIntervalControl","synthetic":true,"types":[]}];
implementors["iovec"] = [{"text":"impl Send for IoVec","synthetic":true,"types":[]}];
implementors["ip_network"] = [{"text":"impl Send for Ipv4Network","synthetic":true,"types":[]},{"text":"impl Send for Ipv6Network","synthetic":true,"types":[]},{"text":"impl Send for IpNetwork","synthetic":true,"types":[]},{"text":"impl Send for Ipv6MulticastScope","synthetic":true,"types":[]},{"text":"impl Send for IpNetworkError","synthetic":true,"types":[]},{"text":"impl Send for IpNetworkParseError","synthetic":true,"types":[]},{"text":"impl Send for Ipv4RangeIterator","synthetic":true,"types":[]},{"text":"impl Send for Ipv4NetworkIterator","synthetic":true,"types":[]},{"text":"impl Send for Ipv6NetworkIterator","synthetic":true,"types":[]}];
implementors["ipnet"] = [{"text":"impl Send for Ipv4AddrRange","synthetic":true,"types":[]},{"text":"impl Send for Ipv6AddrRange","synthetic":true,"types":[]},{"text":"impl Send for Ipv4Net","synthetic":true,"types":[]},{"text":"impl Send for Ipv6Net","synthetic":true,"types":[]},{"text":"impl Send for PrefixLenError","synthetic":true,"types":[]},{"text":"impl Send for Ipv4Subnets","synthetic":true,"types":[]},{"text":"impl Send for Ipv6Subnets","synthetic":true,"types":[]},{"text":"impl Send for AddrParseError","synthetic":true,"types":[]},{"text":"impl Send for IpAddrRange","synthetic":true,"types":[]},{"text":"impl Send for IpNet","synthetic":true,"types":[]},{"text":"impl Send for IpSubnets","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, J&gt; Send for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, Pred&gt; Send for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; Send for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Send for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for Format&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for FormatWith&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for IntoChunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Send for Chunk&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Send for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; Send for GroupBy&lt;K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Send for Group&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Send for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Send for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; Send for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Send for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Send for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; Send for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Send for Buffer","synthetic":true,"types":[]}];
implementors["js_sys"] = [{"text":"impl !Send for Array","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ArrayIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for ArrayBuffer","synthetic":true,"types":[]},{"text":"impl !Send for SharedArrayBuffer","synthetic":true,"types":[]},{"text":"impl !Send for Boolean","synthetic":true,"types":[]},{"text":"impl !Send for DataView","synthetic":true,"types":[]},{"text":"impl !Send for Error","synthetic":true,"types":[]},{"text":"impl !Send for EvalError","synthetic":true,"types":[]},{"text":"impl !Send for Function","synthetic":true,"types":[]},{"text":"impl !Send for Generator","synthetic":true,"types":[]},{"text":"impl !Send for Map","synthetic":true,"types":[]},{"text":"impl !Send for Iterator","synthetic":true,"types":[]},{"text":"impl !Send for AsyncIterator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for IntoIter","synthetic":true,"types":[]},{"text":"impl !Send for IteratorNext","synthetic":true,"types":[]},{"text":"impl !Send for Number","synthetic":true,"types":[]},{"text":"impl !Send for Date","synthetic":true,"types":[]},{"text":"impl !Send for Object","synthetic":true,"types":[]},{"text":"impl !Send for Proxy","synthetic":true,"types":[]},{"text":"impl !Send for RangeError","synthetic":true,"types":[]},{"text":"impl !Send for ReferenceError","synthetic":true,"types":[]},{"text":"impl !Send for RegExp","synthetic":true,"types":[]},{"text":"impl !Send for Set","synthetic":true,"types":[]},{"text":"impl !Send for SyntaxError","synthetic":true,"types":[]},{"text":"impl !Send for TypeError","synthetic":true,"types":[]},{"text":"impl !Send for UriError","synthetic":true,"types":[]},{"text":"impl !Send for WeakMap","synthetic":true,"types":[]},{"text":"impl !Send for WeakSet","synthetic":true,"types":[]},{"text":"impl !Send for JsString","synthetic":true,"types":[]},{"text":"impl !Send for Symbol","synthetic":true,"types":[]},{"text":"impl !Send for Promise","synthetic":true,"types":[]},{"text":"impl !Send for Int8Array","synthetic":true,"types":[]},{"text":"impl !Send for Int16Array","synthetic":true,"types":[]},{"text":"impl !Send for Int32Array","synthetic":true,"types":[]},{"text":"impl !Send for Uint8Array","synthetic":true,"types":[]},{"text":"impl !Send for Uint8ClampedArray","synthetic":true,"types":[]},{"text":"impl !Send for Uint16Array","synthetic":true,"types":[]},{"text":"impl !Send for Uint32Array","synthetic":true,"types":[]},{"text":"impl !Send for Float32Array","synthetic":true,"types":[]},{"text":"impl !Send for Float64Array","synthetic":true,"types":[]},{"text":"impl !Send for CompileError","synthetic":true,"types":[]},{"text":"impl !Send for Instance","synthetic":true,"types":[]},{"text":"impl !Send for LinkError","synthetic":true,"types":[]},{"text":"impl !Send for RuntimeError","synthetic":true,"types":[]},{"text":"impl !Send for Module","synthetic":true,"types":[]},{"text":"impl !Send for Table","synthetic":true,"types":[]},{"text":"impl !Send for Memory","synthetic":true,"types":[]},{"text":"impl !Send for Collator","synthetic":true,"types":[]},{"text":"impl !Send for DateTimeFormat","synthetic":true,"types":[]},{"text":"impl !Send for NumberFormat","synthetic":true,"types":[]},{"text":"impl !Send for PluralRules","synthetic":true,"types":[]}];
implementors["jsonrpc_client_transports"] = [{"text":"impl Send for RpcChannel","synthetic":true,"types":[]},{"text":"impl Send for RpcFuture","synthetic":true,"types":[]},{"text":"impl Send for SubscriptionStream","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TypedSubscriptionStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RawClient","synthetic":true,"types":[]},{"text":"impl Send for TypedClient","synthetic":true,"types":[]},{"text":"impl Send for RpcError","synthetic":true,"types":[]},{"text":"impl Send for RequestBuilder","synthetic":true,"types":[]},{"text":"impl Send for ClientResponse","synthetic":true,"types":[]},{"text":"impl&lt;TSink, TStream&gt; Send for Duplex&lt;TSink, TStream&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSink: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TStream: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;THandler, TMetadata&gt; Send for LocalRpc&lt;THandler, TMetadata&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;THandler: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TMetadata: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["jsonrpc_core"] = [{"text":"impl&lt;M&gt; Send for IoHandler&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for MetaIoHandler&lt;T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RemoteProcedure&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Compatibility","synthetic":true,"types":[]},{"text":"impl&lt;T, M&gt; Send for IoDelegate&lt;T, M&gt;","synthetic":true,"types":[]},{"text":"impl Send for Noop","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorCode","synthetic":true,"types":[]},{"text":"impl Send for Id","synthetic":true,"types":[]},{"text":"impl Send for Params","synthetic":true,"types":[]},{"text":"impl Send for MethodCall","synthetic":true,"types":[]},{"text":"impl Send for Notification","synthetic":true,"types":[]},{"text":"impl Send for Call","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Success","synthetic":true,"types":[]},{"text":"impl Send for Failure","synthetic":true,"types":[]},{"text":"impl Send for Output","synthetic":true,"types":[]},{"text":"impl Send for Response","synthetic":true,"types":[]},{"text":"impl Send for Version","synthetic":true,"types":[]}];
implementors["jsonrpc_http_server"] = [{"text":"impl&lt;M, S&gt; Send for ServerHandler&lt;M, S&gt;","synthetic":true,"types":[]},{"text":"impl Send for Response","synthetic":true,"types":[]},{"text":"impl&lt;M, S&gt; Send for Rpc&lt;M, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M, S&gt; Send for WeakRpc&lt;M, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M, S&gt; Send for ServerBuilder&lt;M, S&gt;","synthetic":true,"types":[]},{"text":"impl Send for CloseHandle","synthetic":true,"types":[]},{"text":"impl Send for Server","synthetic":true,"types":[]},{"text":"impl Send for RequestMiddlewareAction","synthetic":true,"types":[]},{"text":"impl Send for RestApi","synthetic":true,"types":[]}];
implementors["jsonrpc_ipc_server"] = [{"text":"impl Send for NoopExtractor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RequestContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CloseHandle","synthetic":true,"types":[]},{"text":"impl Send for Server","synthetic":true,"types":[]},{"text":"impl&lt;M, S&gt; Send for ServerBuilder&lt;M, S&gt;","synthetic":true,"types":[]}];
implementors["jsonrpc_pubsub"] = [{"text":"impl&lt;T, M&gt; Send for IoDelegate&lt;T, M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for PubSubHandler&lt;T, S&gt;","synthetic":true,"types":[]},{"text":"impl Send for Session","synthetic":true,"types":[]},{"text":"impl Send for Sink","synthetic":true,"types":[]},{"text":"impl Send for Subscriber","synthetic":true,"types":[]},{"text":"impl Send for SubscriptionId","synthetic":true,"types":[]},{"text":"impl Send for NumericIdProvider","synthetic":true,"types":[]},{"text":"impl Send for RandomStringIdProvider","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for SubscriptionManager&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Subscriber&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Sink&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["jsonrpc_server_utils"] = [{"text":"impl&lt;S&gt; Send for SuspendableStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Origin","synthetic":true,"types":[]},{"text":"impl Send for OriginProtocol","synthetic":true,"types":[]},{"text":"impl Send for AccessControlAllowOrigin","synthetic":true,"types":[]},{"text":"impl Send for AccessControlAllowHeaders","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AllowCors&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Host","synthetic":true,"types":[]},{"text":"impl Send for Port","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DomainsValidation&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RpcEventLoop","synthetic":true,"types":[]},{"text":"impl Send for UninitializedExecutor","synthetic":true,"types":[]},{"text":"impl Send for Executor","synthetic":true,"types":[]},{"text":"impl Send for StreamCodec","synthetic":true,"types":[]},{"text":"impl Send for Separator","synthetic":true,"types":[]}];
implementors["jsonrpc_ws_server"] = [{"text":"impl Send for NoopExtractor","synthetic":true,"types":[]},{"text":"impl Send for RequestContext","synthetic":true,"types":[]},{"text":"impl Send for Broadcaster","synthetic":true,"types":[]},{"text":"impl Send for CloseHandle","synthetic":true,"types":[]},{"text":"impl Send for Server","synthetic":true,"types":[]},{"text":"impl&lt;M, S&gt; Send for ServerBuilder&lt;M, S&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for MiddlewareAction","synthetic":true,"types":[]}];
implementors["kvdb"] = [{"text":"impl Send for IoStats","synthetic":true,"types":[]},{"text":"impl Send for DBTransaction","synthetic":true,"types":[]},{"text":"impl Send for Kind","synthetic":true,"types":[]},{"text":"impl Send for DBOp","synthetic":true,"types":[]}];
implementors["kvdb_memorydb"] = [{"text":"impl Send for InMemory","synthetic":true,"types":[]}];
implementors["kvdb_rocksdb"] = [{"text":"impl Send for CompactionProfile","synthetic":true,"types":[]},{"text":"impl Send for DatabaseConfig","synthetic":true,"types":[]},{"text":"impl Send for Database","synthetic":true,"types":[]}];
implementors["lazycell"] = [{"text":"impl&lt;T&gt; Send for LazyCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for AtomicLazyCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["leb128"] = [{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl !Send for group","synthetic":true,"types":[]},{"text":"impl Send for utimbuf","synthetic":true,"types":[]},{"text":"impl Send for timeval","synthetic":true,"types":[]},{"text":"impl Send for timespec","synthetic":true,"types":[]},{"text":"impl Send for rlimit","synthetic":true,"types":[]},{"text":"impl Send for rusage","synthetic":true,"types":[]},{"text":"impl Send for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Send for hostent","synthetic":true,"types":[]},{"text":"impl !Send for iovec","synthetic":true,"types":[]},{"text":"impl Send for pollfd","synthetic":true,"types":[]},{"text":"impl Send for winsize","synthetic":true,"types":[]},{"text":"impl Send for linger","synthetic":true,"types":[]},{"text":"impl !Send for sigval","synthetic":true,"types":[]},{"text":"impl Send for itimerval","synthetic":true,"types":[]},{"text":"impl Send for tms","synthetic":true,"types":[]},{"text":"impl !Send for servent","synthetic":true,"types":[]},{"text":"impl !Send for protoent","synthetic":true,"types":[]},{"text":"impl Send for in_addr","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Send for sockaddr","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl !Send for addrinfo","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Send for fd_set","synthetic":true,"types":[]},{"text":"impl !Send for tm","synthetic":true,"types":[]},{"text":"impl Send for sched_param","synthetic":true,"types":[]},{"text":"impl !Send for Dl_info","synthetic":true,"types":[]},{"text":"impl !Send for lconv","synthetic":true,"types":[]},{"text":"impl Send for in_pktinfo","synthetic":true,"types":[]},{"text":"impl !Send for ifaddrs","synthetic":true,"types":[]},{"text":"impl Send for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Send for arpreq","synthetic":true,"types":[]},{"text":"impl Send for arpreq_old","synthetic":true,"types":[]},{"text":"impl Send for arphdr","synthetic":true,"types":[]},{"text":"impl !Send for mmsghdr","synthetic":true,"types":[]},{"text":"impl Send for epoll_event","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Send for utsname","synthetic":true,"types":[]},{"text":"impl !Send for sigevent","synthetic":true,"types":[]},{"text":"impl Send for rlimit64","synthetic":true,"types":[]},{"text":"impl !Send for glob_t","synthetic":true,"types":[]},{"text":"impl !Send for passwd","synthetic":true,"types":[]},{"text":"impl !Send for spwd","synthetic":true,"types":[]},{"text":"impl Send for dqblk","synthetic":true,"types":[]},{"text":"impl Send for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Send for itimerspec","synthetic":true,"types":[]},{"text":"impl Send for fsid_t","synthetic":true,"types":[]},{"text":"impl Send for packet_mreq","synthetic":true,"types":[]},{"text":"impl Send for cpu_set_t","synthetic":true,"types":[]},{"text":"impl !Send for if_nameindex","synthetic":true,"types":[]},{"text":"impl Send for msginfo","synthetic":true,"types":[]},{"text":"impl Send for sembuf","synthetic":true,"types":[]},{"text":"impl Send for input_event","synthetic":true,"types":[]},{"text":"impl Send for input_id","synthetic":true,"types":[]},{"text":"impl Send for input_absinfo","synthetic":true,"types":[]},{"text":"impl Send for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Send for input_mask","synthetic":true,"types":[]},{"text":"impl Send for ff_replay","synthetic":true,"types":[]},{"text":"impl Send for ff_trigger","synthetic":true,"types":[]},{"text":"impl Send for ff_envelope","synthetic":true,"types":[]},{"text":"impl Send for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl !Send for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_effect","synthetic":true,"types":[]},{"text":"impl !Send for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Send for ucred","synthetic":true,"types":[]},{"text":"impl !Send for mntent","synthetic":true,"types":[]},{"text":"impl !Send for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Send for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Send for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Send for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for arpd_request","synthetic":true,"types":[]},{"text":"impl Send for inotify_event","synthetic":true,"types":[]},{"text":"impl Send for fanotify_response","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Send for regmatch_t","synthetic":true,"types":[]},{"text":"impl Send for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Send for dirent","synthetic":true,"types":[]},{"text":"impl Send for dirent64","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Send for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Send for mq_attr","synthetic":true,"types":[]},{"text":"impl Send for statx","synthetic":true,"types":[]},{"text":"impl Send for statx_timestamp","synthetic":true,"types":[]},{"text":"impl !Send for aiocb","synthetic":true,"types":[]},{"text":"impl Send for __exit_status","synthetic":true,"types":[]},{"text":"impl Send for __timeval","synthetic":true,"types":[]},{"text":"impl !Send for glob64_t","synthetic":true,"types":[]},{"text":"impl !Send for msghdr","synthetic":true,"types":[]},{"text":"impl Send for cmsghdr","synthetic":true,"types":[]},{"text":"impl Send for termios","synthetic":true,"types":[]},{"text":"impl Send for mallinfo","synthetic":true,"types":[]},{"text":"impl Send for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Send for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Send for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Send for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Send for nlattr","synthetic":true,"types":[]},{"text":"impl !Send for rtentry","synthetic":true,"types":[]},{"text":"impl Send for timex","synthetic":true,"types":[]},{"text":"impl Send for ntptimeval","synthetic":true,"types":[]},{"text":"impl !Send for regex_t","synthetic":true,"types":[]},{"text":"impl Send for utmpx","synthetic":true,"types":[]},{"text":"impl Send for sigset_t","synthetic":true,"types":[]},{"text":"impl Send for sysinfo","synthetic":true,"types":[]},{"text":"impl Send for msqid_ds","synthetic":true,"types":[]},{"text":"impl Send for sigaction","synthetic":true,"types":[]},{"text":"impl Send for statfs","synthetic":true,"types":[]},{"text":"impl Send for flock","synthetic":true,"types":[]},{"text":"impl Send for flock64","synthetic":true,"types":[]},{"text":"impl Send for siginfo_t","synthetic":true,"types":[]},{"text":"impl !Send for stack_t","synthetic":true,"types":[]},{"text":"impl Send for stat","synthetic":true,"types":[]},{"text":"impl Send for stat64","synthetic":true,"types":[]},{"text":"impl Send for statfs64","synthetic":true,"types":[]},{"text":"impl Send for statvfs64","synthetic":true,"types":[]},{"text":"impl Send for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Send for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Send for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Send for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Send for user_regs_struct","synthetic":true,"types":[]},{"text":"impl !Send for user","synthetic":true,"types":[]},{"text":"impl !Send for mcontext_t","synthetic":true,"types":[]},{"text":"impl Send for ipc_perm","synthetic":true,"types":[]},{"text":"impl Send for shmid_ds","synthetic":true,"types":[]},{"text":"impl Send for termios2","synthetic":true,"types":[]},{"text":"impl Send for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Send for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl !Send for ucontext_t","synthetic":true,"types":[]},{"text":"impl Send for statvfs","synthetic":true,"types":[]},{"text":"impl Send for max_align_t","synthetic":true,"types":[]},{"text":"impl Send for sem_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Send for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Send for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Send for in6_addr","synthetic":true,"types":[]},{"text":"impl Send for DIR","synthetic":true,"types":[]},{"text":"impl Send for FILE","synthetic":true,"types":[]},{"text":"impl Send for fpos_t","synthetic":true,"types":[]},{"text":"impl Send for timezone","synthetic":true,"types":[]},{"text":"impl Send for fpos64_t","synthetic":true,"types":[]}];
implementors["libp2p"] = [{"text":"impl&lt;TInner&gt; Send for BandwidthLogging&lt;TInner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInner: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TInner&gt; Send for BandwidthListener&lt;TInner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInner: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TInner&gt; Send for BandwidthFuture&lt;TInner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInner: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BandwidthSinks","synthetic":true,"types":[]},{"text":"impl&lt;TInner&gt; Send for BandwidthConnecLogging&lt;TInner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInner: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for SimpleProtocol&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["libp2p_core"] = [{"text":"impl Send for PeerId","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UpgradeError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ListenerId","synthetic":true,"types":[]},{"text":"impl&lt;TTrans&gt; Send for ListenersStream&lt;TTrans&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TTrans: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::Listener: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ConnectionId","synthetic":true,"types":[]},{"text":"impl&lt;TMuxer&gt; Send for Close&lt;TMuxer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TMuxer: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TInEvent, TConnInfo&gt; Send for EstablishedConnection&lt;'a, TInEvent, TConnInfo&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConnInfo: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TInEvent: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, TInEvent, TOutEvent, THandler, TTransErr, THandlerErr, TConnInfo, TPeerId&gt; Send for EstablishedConnectionIter&lt;'a, I, TInEvent, TOutEvent, THandler, TTransErr, THandlerErr, TConnInfo, TPeerId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TConnInfo: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;THandler: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;THandlerErr: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TInEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TTransErr: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TInEvent, TConnInfo, TPeerId&gt; Send for PendingConnection&lt;'a, TInEvent, TConnInfo, TPeerId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConnInfo: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TInEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Connected&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TMuxer, THandler&gt; Send for Connection&lt;TMuxer, THandler&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;THandler: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TMuxer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;THandler as ConnectionHandler&gt;::OutboundOpenInfo: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TMuxer as StreamMuxer&gt;::OutboundSubstream: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IncomingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TPeerId&gt; Send for OutgoingInfo&lt;'a, TPeerId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ConnectionLimit","synthetic":true,"types":[]},{"text":"impl&lt;THandlerErr&gt; Send for ConnectionError&lt;THandlerErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;THandlerErr: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TTransErr&gt; Send for PendingConnectionError&lt;TTransErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TTransErr: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TOutboundOpenInfo, TCustom&gt; Send for ConnectionHandlerEvent&lt;TOutboundOpenInfo, TCustom&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TCustom: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutboundOpenInfo: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TTrans&gt; Send for ListenersEvent&lt;TTrans&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::ListenerUpgrade: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TDialInfo&gt; Send for SubstreamEndpoint&lt;TDialInfo&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TDialInfo: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Endpoint","synthetic":true,"types":[]},{"text":"impl Send for ConnectedPoint","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Event&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for EitherError&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for EitherOutput&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for EitherOutbound&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as StreamMuxer&gt;::OutboundSubstream: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as StreamMuxer&gt;::OutboundSubstream: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for EitherListenStream&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for EitherFuture&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for EitherFuture2&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for EitherName&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for EitherTransport&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Keypair","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl Send for Keypair","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl Send for SecretKey","synthetic":true,"types":[]},{"text":"impl Send for Keypair","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl Send for Keypair","synthetic":true,"types":[]},{"text":"impl Send for SecretKey","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl Send for DecodingError","synthetic":true,"types":[]},{"text":"impl Send for SigningError","synthetic":true,"types":[]},{"text":"impl&lt;TSocket&gt; Send for SingletonMuxer&lt;TSocket&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSocket: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for OutboundSubstreamRefWrapFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as Deref&gt;::Target as StreamMuxer&gt;::OutboundSubstream: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for OutboundSubstreamRefFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as Deref&gt;::Target as StreamMuxer&gt;::OutboundSubstream: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for SubstreamRef&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as Deref&gt;::Target as StreamMuxer&gt;::Substream: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StreamMuxerBox","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for StreamMuxerEvent&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TUpgrade&gt; Send for IncomingConnection&lt;TUpgrade&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUpgrade: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; Send for Network&lt;TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConnInfo: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;THandler: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TInEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TTrans: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;THandler as IntoConnectionHandler&lt;TConnInfo&gt;&gt;::Handler as ConnectionHandler&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;THandler as IntoConnectionHandler&lt;TConnInfo&gt;&gt;::Handler: ConnectionHandler,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::Listener: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NetworkInfo","synthetic":true,"types":[]},{"text":"impl Send for NetworkConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; Send for NetworkEvent&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConnInfo: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TInEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;THandler as IntoConnectionHandler&lt;TConnInfo&gt;&gt;::Handler as ConnectionHandler&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;THandler as IntoConnectionHandler&lt;TConnInfo&gt;&gt;::Handler: ConnectionHandler,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::ListenerUpgrade: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; Send for ConnectedPeer&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConnInfo: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;THandler: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TInEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TTrans: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;THandler as IntoConnectionHandler&lt;TConnInfo&gt;&gt;::Handler as ConnectionHandler&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;THandler as IntoConnectionHandler&lt;TConnInfo&gt;&gt;::Handler: ConnectionHandler,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::Listener: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; Send for DialingPeer&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConnInfo: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;THandler: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TInEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TTrans: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;THandler as IntoConnectionHandler&lt;TConnInfo&gt;&gt;::Handler as ConnectionHandler&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;THandler as IntoConnectionHandler&lt;TConnInfo&gt;&gt;::Handler: ConnectionHandler,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::Listener: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; Send for DisconnectedPeer&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConnInfo: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;THandler: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TInEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TTrans: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;THandler as IntoConnectionHandler&lt;TConnInfo&gt;&gt;::Handler as ConnectionHandler&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;THandler as IntoConnectionHandler&lt;TConnInfo&gt;&gt;::Handler: ConnectionHandler,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::Listener: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TInEvent, TConnInfo, TPeerId&gt; Send for DialingAttempt&lt;'a, TInEvent, TConnInfo, TPeerId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConnInfo: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TInEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TInEvent, TOutEvent, THandler, TTransErr, THandlerErr, TConnInfo, TPeerId&gt; Send for DialingAttemptIter&lt;'a, TInEvent, TOutEvent, THandler, TTransErr, THandlerErr, TConnInfo, TPeerId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConnInfo: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;THandler: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;THandlerErr: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TInEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TTransErr: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; Send for Peer&lt;'a, TTrans, TInEvent, TOutEvent, THandler, TConnInfo, TPeerId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConnInfo: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;THandler: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TInEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TTrans: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;THandler as IntoConnectionHandler&lt;TConnInfo&gt;&gt;::Handler as ConnectionHandler&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;THandler as IntoConnectionHandler&lt;TConnInfo&gt;&gt;::Handler: ConnectionHandler,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTrans as Transport&gt;::Listener: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OptionalTransport&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TUpgr, TErr&gt; Send for ListenerEvent&lt;TUpgr, TErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TErr: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TUpgr: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TErr&gt; Send for TransportError&lt;TErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TErr: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, C&gt; Send for AndThen&lt;T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TListener, TMap&gt; Send for AndThenStream&lt;TListener, TMap&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TListener: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TMap: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TFut, TMap, TMapOut&gt; Send for AndThenFuture&lt;TFut, TMap, TMapOut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TFut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TMap: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TMapOut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, E&gt; Send for Boxed&lt;O, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for OrTransport&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TOut&gt; Send for DummyTransport&lt;TOut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DummyStream","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for Map&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for MapStream&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for MapFuture&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for MapErr&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for MapErrListener&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Transport&gt;::Listener: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for MapErrListenerUpgrade&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Transport&gt;::ListenerUpgrade: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for MapErrDial&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Transport&gt;::Dial: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MemoryTransport","synthetic":true,"types":[]},{"text":"impl Send for DialFuture","synthetic":true,"types":[]},{"text":"impl Send for Listener","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Chan&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MemoryTransportError","synthetic":true,"types":[]},{"text":"impl&lt;InnerTrans&gt; Send for TransportTimeout&lt;InnerTrans&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;InnerTrans: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;InnerStream&gt; Send for TimeoutListener&lt;InnerStream&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;InnerStream: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;InnerFut&gt; Send for Timeout&lt;InnerFut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;InnerFut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TErr&gt; Send for TransportTimeoutError&lt;TErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TErr: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Builder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, U&gt; Send for Authenticate&lt;C, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as InboundUpgrade&lt;Negotiated&lt;C&gt;&gt;&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as OutboundUpgrade&lt;Negotiated&lt;C&gt;&gt;&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as UpgradeInfo&gt;::Info: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as UpgradeInfo&gt;::InfoIter: IntoIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;U as UpgradeInfo&gt;::InfoIter as IntoIterator&gt;::IntoIter: Iterator + Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, U, I&gt; Send for Multiplex&lt;C, U, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as InboundUpgrade&lt;Negotiated&lt;C&gt;&gt;&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as OutboundUpgrade&lt;Negotiated&lt;C&gt;&gt;&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as UpgradeInfo&gt;::Info: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as UpgradeInfo&gt;::InfoIter: IntoIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;U as UpgradeInfo&gt;::InfoIter as IntoIterator&gt;::IntoIter: Iterator + Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Upgrade&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, U, I, C&gt; Send for DialUpgradeFuture&lt;F, U, I, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as OutboundUpgrade&lt;Negotiated&lt;C&gt;&gt;&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as UpgradeInfo&gt;::Info: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as UpgradeInfo&gt;::InfoIter: IntoIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;U as UpgradeInfo&gt;::InfoIter as IntoIterator&gt;::IntoIter: Iterator + Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U&gt; Send for ListenerStream&lt;S, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, U, I, C&gt; Send for ListenerUpgradeFuture&lt;F, U, I, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as InboundUpgrade&lt;Negotiated&lt;C&gt;&gt;&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as UpgradeInfo&gt;::Info: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for TransportUpgradeError&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, U&gt; Send for InboundUpgradeApply&lt;C, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as InboundUpgrade&lt;Negotiated&lt;C&gt;&gt;&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as UpgradeInfo&gt;::Info: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, U&gt; Send for OutboundUpgradeApply&lt;C, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as OutboundUpgrade&lt;Negotiated&lt;C&gt;&gt;&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as UpgradeInfo&gt;::Info: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as UpgradeInfo&gt;::InfoIter: IntoIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;U as UpgradeInfo&gt;::InfoIter as IntoIterator&gt;::IntoIter: Iterator + Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DeniedUpgrade","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; Send for FromFnUpgrade&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U, F&gt; Send for MapInboundUpgrade&lt;U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U, F&gt; Send for MapOutboundUpgrade&lt;U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U, F&gt; Send for MapInboundUpgradeErr&lt;U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U, F&gt; Send for MapOutboundUpgradeErr&lt;U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OptionalUpgrade&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for SelectUpgrade&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for EitherUpgrade&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ReadOneError","synthetic":true,"types":[]}];
implementors["libp2p_deflate"] = [{"text":"impl Send for DeflateConfig","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for DeflateOutput&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["libp2p_dns"] = [{"text":"impl&lt;T&gt; Send for DnsConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TErr&gt; Send for DnsErr&lt;TErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TErr: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["libp2p_floodsub"] = [{"text":"impl Send for Floodsub","synthetic":true,"types":[]},{"text":"impl Send for Topic","synthetic":true,"types":[]},{"text":"impl Send for FloodsubConfig","synthetic":true,"types":[]},{"text":"impl Send for FloodsubEvent","synthetic":true,"types":[]},{"text":"impl Send for FloodsubProtocol","synthetic":true,"types":[]},{"text":"impl Send for FloodsubRpc","synthetic":true,"types":[]},{"text":"impl Send for FloodsubMessage","synthetic":true,"types":[]},{"text":"impl Send for FloodsubSubscription","synthetic":true,"types":[]},{"text":"impl Send for FloodsubDecodeError","synthetic":true,"types":[]},{"text":"impl Send for FloodsubSubscriptionAction","synthetic":true,"types":[]}];
implementors["libp2p_gossipsub"] = [{"text":"impl Send for Gossipsub","synthetic":true,"types":[]},{"text":"impl Send for GossipsubRpc","synthetic":true,"types":[]},{"text":"impl Send for GossipsubConfig","synthetic":true,"types":[]},{"text":"impl Send for GossipsubConfigBuilder","synthetic":true,"types":[]},{"text":"impl Send for Topic","synthetic":true,"types":[]},{"text":"impl Send for TopicHash","synthetic":true,"types":[]},{"text":"impl Send for GossipsubEvent","synthetic":true,"types":[]},{"text":"impl Send for MessageAuthenticity","synthetic":true,"types":[]},{"text":"impl Send for ValidationMode","synthetic":true,"types":[]},{"text":"impl Send for PublishError","synthetic":true,"types":[]},{"text":"impl Send for ProtocolConfig","synthetic":true,"types":[]},{"text":"impl Send for GossipsubCodec","synthetic":true,"types":[]},{"text":"impl Send for MessageId","synthetic":true,"types":[]},{"text":"impl Send for GossipsubMessage","synthetic":true,"types":[]},{"text":"impl Send for GossipsubSubscription","synthetic":true,"types":[]},{"text":"impl Send for GossipsubSubscriptionAction","synthetic":true,"types":[]},{"text":"impl Send for GossipsubControlAction","synthetic":true,"types":[]}];
implementors["libp2p_identify"] = [{"text":"impl Send for Identify","synthetic":true,"types":[]},{"text":"impl Send for IdentifyInfo","synthetic":true,"types":[]},{"text":"impl Send for IdentifyEvent","synthetic":true,"types":[]}];
implementors["libp2p_kad"] = [{"text":"impl Send for Addresses","synthetic":true,"types":[]},{"text":"impl&lt;TStore&gt; Send for Kademlia&lt;TStore&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TStore: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for KademliaConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for QueryRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for QueryMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for QueryStats","synthetic":true,"types":[]},{"text":"impl Send for PeerRecord","synthetic":true,"types":[]},{"text":"impl Send for BootstrapOk","synthetic":true,"types":[]},{"text":"impl Send for GetRecordOk","synthetic":true,"types":[]},{"text":"impl Send for PutRecordOk","synthetic":true,"types":[]},{"text":"impl Send for GetClosestPeersOk","synthetic":true,"types":[]},{"text":"impl Send for AddProviderOk","synthetic":true,"types":[]},{"text":"impl Send for GetProvidersOk","synthetic":true,"types":[]},{"text":"impl Send for QueryId","synthetic":true,"types":[]},{"text":"impl Send for KademliaBucketInserts","synthetic":true,"types":[]},{"text":"impl Send for KademliaEvent","synthetic":true,"types":[]},{"text":"impl Send for Quorum","synthetic":true,"types":[]},{"text":"impl Send for QueryResult","synthetic":true,"types":[]},{"text":"impl Send for QueryInfo","synthetic":true,"types":[]},{"text":"impl Send for BootstrapError","synthetic":true,"types":[]},{"text":"impl Send for GetRecordError","synthetic":true,"types":[]},{"text":"impl Send for PutRecordPhase","synthetic":true,"types":[]},{"text":"impl Send for PutRecordContext","synthetic":true,"types":[]},{"text":"impl Send for PutRecordError","synthetic":true,"types":[]},{"text":"impl Send for GetClosestPeersError","synthetic":true,"types":[]},{"text":"impl Send for AddProviderPhase","synthetic":true,"types":[]},{"text":"impl Send for AddProviderContext","synthetic":true,"types":[]},{"text":"impl Send for AddProviderError","synthetic":true,"types":[]},{"text":"impl Send for GetProvidersError","synthetic":true,"types":[]},{"text":"impl&lt;TUserData&gt; Send for KademliaHandler&lt;TUserData&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUserData: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for KademliaHandlerConfig","synthetic":true,"types":[]},{"text":"impl Send for KademliaRequestId","synthetic":true,"types":[]},{"text":"impl&lt;TUserData&gt; Send for KademliaHandlerEvent&lt;TUserData&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUserData: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for KademliaHandlerQueryErr","synthetic":true,"types":[]},{"text":"impl&lt;TUserData&gt; Send for KademliaHandlerIn&lt;TUserData&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUserData: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TKey, TVal&gt; Send for Node&lt;TKey, TVal&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKey: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TVal: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TKey, TVal&gt; Send for AppliedPending&lt;TKey, TVal&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKey: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TVal: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Key&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for KeyBytes","synthetic":true,"types":[]},{"text":"impl Send for Distance","synthetic":true,"types":[]},{"text":"impl&lt;'a, TPeerId, TVal&gt; Send for EntryRefView&lt;'a, TPeerId, TVal&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TVal: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TKey, TVal&gt; Send for NodeRefView&lt;'a, TKey, TVal&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKey: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TVal: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TKey, TVal&gt; Send for EntryView&lt;TKey, TVal&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKey: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TVal: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TKey, TVal&gt; Send for PresentEntry&lt;'a, TKey, TVal&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKey: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TVal: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TKey, TVal&gt; Send for PendingEntry&lt;'a, TKey, TVal&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKey: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TVal: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TKey, TVal&gt; Send for AbsentEntry&lt;'a, TKey, TVal&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKey: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TVal: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TKey, TVal&gt; Send for KBucketsTable&lt;TKey, TVal&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKey: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TVal: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TKey, TVal&gt; Send for KBucketRef&lt;'a, TKey, TVal&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKey: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TVal: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NodeStatus","synthetic":true,"types":[]},{"text":"impl&lt;TKey&gt; Send for InsertResult&lt;TKey&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKey: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TPeerId, TVal&gt; Send for Entry&lt;'a, TPeerId, TVal&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeerId: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TVal: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for KadPeer","synthetic":true,"types":[]},{"text":"impl Send for KademliaProtocolConfig","synthetic":true,"types":[]},{"text":"impl Send for KadConnectionType","synthetic":true,"types":[]},{"text":"impl Send for KadRequestMsg","synthetic":true,"types":[]},{"text":"impl Send for KadResponseMsg","synthetic":true,"types":[]},{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl Send for Record","synthetic":true,"types":[]},{"text":"impl Send for ProviderRecord","synthetic":true,"types":[]},{"text":"impl Send for MemoryStore","synthetic":true,"types":[]},{"text":"impl Send for MemoryStoreConfig","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["libp2p_mdns"] = [{"text":"impl Send for Mdns","synthetic":true,"types":[]},{"text":"impl Send for MdnsEvent","synthetic":true,"types":[]},{"text":"impl Send for MdnsResponseError","synthetic":true,"types":[]},{"text":"impl Send for MdnsService","synthetic":true,"types":[]},{"text":"impl Send for MdnsQuery","synthetic":true,"types":[]},{"text":"impl Send for MdnsServiceDiscovery","synthetic":true,"types":[]},{"text":"impl Send for MdnsResponse","synthetic":true,"types":[]},{"text":"impl Send for MdnsPeer","synthetic":true,"types":[]},{"text":"impl Send for MdnsPacket","synthetic":true,"types":[]}];
implementors["libp2p_mplex"] = [{"text":"impl Send for MplexConfig","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for Multiplex&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OutboundSubstream","synthetic":true,"types":[]},{"text":"impl Send for Substream","synthetic":true,"types":[]},{"text":"impl Send for MaxBufferBehaviour","synthetic":true,"types":[]}];
implementors["libp2p_noise"] = [{"text":"impl&lt;T&gt; Send for NoiseOutput&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, C&gt; Send for Handshake&lt;T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Keypair&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AuthenticKeypair&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for KeypairIdentity","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PublicKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SecretKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ProtocolParams","synthetic":true,"types":[]},{"text":"impl Send for X25519","synthetic":true,"types":[]},{"text":"impl Send for X25519Spec","synthetic":true,"types":[]},{"text":"impl&lt;P, C, R&gt; Send for NoiseConfig&lt;P, C, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, C, R&gt; Send for NoiseAuthenticated&lt;P, C, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for LegacyConfig","synthetic":true,"types":[]},{"text":"impl Send for NoiseError","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for RemoteIdentity&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IdentityExchange","synthetic":true,"types":[]},{"text":"impl Send for IX","synthetic":true,"types":[]},{"text":"impl Send for IK","synthetic":true,"types":[]},{"text":"impl Send for XX","synthetic":true,"types":[]}];
implementors["libp2p_ping"] = [{"text":"impl Send for Ping","synthetic":true,"types":[]},{"text":"impl Send for PingEvent","synthetic":true,"types":[]},{"text":"impl Send for Ping","synthetic":true,"types":[]},{"text":"impl Send for PingConfig","synthetic":true,"types":[]},{"text":"impl Send for PingHandler","synthetic":true,"types":[]},{"text":"impl Send for PingSuccess","synthetic":true,"types":[]},{"text":"impl Send for PingFailure","synthetic":true,"types":[]}];
implementors["libp2p_plaintext"] = [{"text":"impl Send for PlainText1Config","synthetic":true,"types":[]},{"text":"impl Send for PlainText2Config","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for PlainTextMiddleware&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for PlainTextOutput&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["libp2p_pnet"] = [{"text":"impl Send for PreSharedKey","synthetic":true,"types":[]},{"text":"impl Send for Fingerprint","synthetic":true,"types":[]},{"text":"impl Send for PnetConfig","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for PnetOutput&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for KeyParseError","synthetic":true,"types":[]},{"text":"impl Send for PnetError","synthetic":true,"types":[]}];
implementors["libp2p_request_response"] = [{"text":"impl&lt;TResponse&gt; Send for ResponseChannel&lt;TResponse&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TResponse: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RequestId","synthetic":true,"types":[]},{"text":"impl Send for RequestResponseConfig","synthetic":true,"types":[]},{"text":"impl&lt;TCodec&gt; Send for RequestResponse&lt;TCodec&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TCodec: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TCodec as RequestResponseCodec&gt;::Protocol: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TCodec as RequestResponseCodec&gt;::Request: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TCodec as RequestResponseCodec&gt;::Response: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ProtocolSupport","synthetic":true,"types":[]},{"text":"impl&lt;TRequest, TResponse, TChannelResponse&gt; Send for RequestResponseMessage&lt;TRequest, TResponse, TChannelResponse&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TChannelResponse: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRequest: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TResponse: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TRequest, TResponse, TChannelResponse&gt; Send for RequestResponseEvent&lt;TRequest, TResponse, TChannelResponse&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TChannelResponse: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRequest: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TResponse: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OutboundFailure","synthetic":true,"types":[]},{"text":"impl Send for InboundFailure","synthetic":true,"types":[]},{"text":"impl&lt;TCodec&gt; Send for RequestProtocol&lt;TCodec&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TCodec: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TCodec as RequestResponseCodec&gt;::Protocol: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TCodec as RequestResponseCodec&gt;::Request: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TCodec&gt; Send for ResponseProtocol&lt;TCodec&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TCodec: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TCodec as RequestResponseCodec&gt;::Protocol: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TCodec as RequestResponseCodec&gt;::Request: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TCodec as RequestResponseCodec&gt;::Response: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for Throttled&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as RequestResponseCodec&gt;::Protocol: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as RequestResponseCodec&gt;::Request: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as RequestResponseCodec&gt;::Response: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Req, Res, CRes&gt; Send for Event&lt;Req, Res, CRes&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CRes: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Req: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Res: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["libp2p_swarm"] = [{"text":"impl&lt;TProto1, TProto2&gt; Send for IntoProtocolsHandlerSelect&lt;TProto1, TProto2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TProto1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TProto2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TProto1, TProto2&gt; Send for ProtocolsHandlerSelect&lt;TProto1, TProto2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TProto1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TProto2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TInbound, TOutbound, TEvent&gt; Send for OneShotHandler&lt;TInbound, TOutbound, TEvent&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TInbound: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TOutbound as OutboundUpgradeSend&gt;::Error: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OneShotHandlerConfig","synthetic":true,"types":[]},{"text":"impl&lt;TBehaviour, TInEvent, TOutEvent, THandler, TConnInfo&gt; Send for ExpandedSwarm&lt;TBehaviour, TInEvent, TOutEvent, THandler, TConnInfo&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBehaviour: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TConnInfo: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TInEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;THandler as IntoProtocolsHandler&gt;::Handler as ProtocolsHandler&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;THandler as IntoProtocolsHandler&gt;::Handler: ProtocolsHandler,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SwarmPollParameters&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TBehaviour, TConnInfo&gt; Send for SwarmBuilder&lt;TBehaviour, TConnInfo&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBehaviour: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DummyBehaviour","synthetic":true,"types":[]},{"text":"impl&lt;TInEvent, TOutEvent&gt; Send for NetworkBehaviourAction&lt;TInEvent, TOutEvent&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInEvent: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutEvent: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NotifyHandler","synthetic":true,"types":[]},{"text":"impl Send for DialPeerCondition","synthetic":true,"types":[]},{"text":"impl&lt;TBvEv, THandleErr&gt; Send for SwarmEvent&lt;TBvEv, THandleErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBvEv: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;THandleErr: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DialError","synthetic":true,"types":[]},{"text":"impl Send for DummyProtocolsHandler","synthetic":true,"types":[]},{"text":"impl&lt;TProtoHandler, TNewIn, TMap&gt; Send for MapInEvent&lt;TProtoHandler, TNewIn, TMap&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TMap: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TNewIn: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TProtoHandler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TProtoHandler, TMap&gt; Send for MapOutEvent&lt;TProtoHandler, TMap&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TMap: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TProtoHandler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TProtoHandler&gt; Send for NodeHandlerWrapper&lt;TProtoHandler&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;TProtoHandler as ProtocolsHandler&gt;::InboundProtocol as InboundUpgradeSend&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;TProtoHandler as ProtocolsHandler&gt;::OutboundProtocol as OutboundUpgradeSend&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TProtoHandler as ProtocolsHandler&gt;::InboundOpenInfo: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TProtoHandler as ProtocolsHandler&gt;::InboundProtocol: InboundUpgradeSend + Send + UpgradeInfoSend,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;TProtoHandler as ProtocolsHandler&gt;::InboundProtocol as UpgradeInfoSend&gt;::Info: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;TProtoHandler as ProtocolsHandler&gt;::OutboundProtocol as UpgradeInfoSend&gt;::Info: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;TProtoHandler as ProtocolsHandler&gt;::OutboundProtocol as UpgradeInfoSend&gt;::InfoIter: IntoIterator + Iterator + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&lt;TProtoHandler as ProtocolsHandler&gt;::OutboundProtocol as UpgradeInfoSend&gt;::InfoIter as IntoIterator&gt;::IntoIter: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&lt;TProtoHandler as ProtocolsHandler&gt;::OutboundProtocol as UpgradeInfoSend&gt;::InfoIter as IntoIterator&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TProtoHandler as ProtocolsHandler&gt;::OutboundOpenInfo: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TProtoHandler as ProtocolsHandler&gt;::OutboundProtocol: OutboundUpgradeSend + Send + UpgradeInfoSend,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TIntoProtoHandler&gt; Send for NodeHandlerWrapperBuilder&lt;TIntoProtoHandler&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TIntoProtoHandler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TUpgrade, TInfo&gt; Send for SubstreamProtocol&lt;TUpgrade, TInfo&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInfo: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TUpgrade: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TErr&gt; Send for NodeHandlerWrapperError&lt;TErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TErr: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TConnectionUpgrade, TOutboundOpenInfo, TCustom, TErr&gt; Send for ProtocolsHandlerEvent&lt;TConnectionUpgrade, TOutboundOpenInfo, TCustom, TErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConnectionUpgrade: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TCustom: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TErr: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutboundOpenInfo: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TUpgrErr&gt; Send for ProtocolsHandlerUpgrErr&lt;TUpgrErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUpgrErr: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for KeepAlive","synthetic":true,"types":[]},{"text":"impl&lt;K, H&gt; Send for MultiHandler&lt;K, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, H&gt; Send for IntoMultiHandler&lt;K, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for IndexedProtoName&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, I&gt; Send for Info&lt;K, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, H&gt; Send for Upgrade&lt;K, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DuplicateProtonameError","synthetic":true,"types":[]},{"text":"impl&lt;TBehaviour&gt; Send for Toggle&lt;TBehaviour&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBehaviour: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TInner&gt; Send for ToggleIntoProtoHandler&lt;TInner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInner: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TInner&gt; Send for ToggleProtoHandler&lt;TInner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInner: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["libp2p_tcp"] = [{"text":"impl Send for TcpConfig","synthetic":true,"types":[]},{"text":"impl Send for TcpListenStream","synthetic":true,"types":[]},{"text":"impl Send for TcpTransStream","synthetic":true,"types":[]}];
implementors["libp2p_uds"] = [{"text":"impl Send for UdsConfig","synthetic":true,"types":[]}];
implementors["libp2p_wasm_ext"] = [{"text":"impl Send for ExtTransport","synthetic":true,"types":[]},{"text":"impl Send for Dial","synthetic":true,"types":[]},{"text":"impl Send for Listen","synthetic":true,"types":[]},{"text":"impl Send for Connection","synthetic":true,"types":[]},{"text":"impl Send for JsErr","synthetic":true,"types":[]},{"text":"impl !Send for Transport","synthetic":true,"types":[]},{"text":"impl !Send for Connection","synthetic":true,"types":[]},{"text":"impl !Send for ListenEvent","synthetic":true,"types":[]},{"text":"impl !Send for ConnectionEvent","synthetic":true,"types":[]}];
implementors["libp2p_websocket"] = [{"text":"impl&lt;T&gt; Send for WsConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BytesConnection&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Error&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WsConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Connection&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IncomingData","synthetic":true,"types":[]},{"text":"impl Send for OutgoingData","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for PrivateKey","synthetic":true,"types":[]},{"text":"impl Send for Certificate","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["libp2p_yamux"] = [{"text":"impl&lt;S&gt; Send for Yamux&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OpenSubstreamToken","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for LocalConfig","synthetic":true,"types":[]},{"text":"impl Send for YamuxError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Incoming&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for LocalIncoming&lt;T&gt;","synthetic":true,"types":[]}];
implementors["librocksdb_sys"] = [{"text":"impl Send for __fsid_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_backup_engine_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_backup_engine_info_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_restore_options_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_cache_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_compactionfilter_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_compactionfiltercontext_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_compactionfilterfactory_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_comparator_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_dbpath_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_env_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_fifo_compaction_options_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_filelock_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_filterpolicy_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_flushoptions_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_logger_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_mergeoperator_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_options_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_compactoptions_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_block_based_table_options_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_cuckoo_table_options_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_randomfile_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_readoptions_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_seqfile_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_slicetransform_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_snapshot_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_writablefile_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_writebatch_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_writebatch_wi_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_writeoptions_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_universal_compaction_options_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_livefiles_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_column_family_handle_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_envoptions_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_ingestexternalfileoptions_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_sstfilewriter_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_ratelimiter_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_perfcontext_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_pinnableslice_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_transactiondb_options_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_transactiondb_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_transaction_options_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_optimistictransactiondb_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_optimistictransaction_options_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_transaction_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_checkpoint_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_wal_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_wal_readoptions_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_memory_consumers_t","synthetic":true,"types":[]},{"text":"impl Send for rocksdb_memory_usage_t","synthetic":true,"types":[]},{"text":"impl !Send for __va_list_tag","synthetic":true,"types":[]}];
implementors["libz_sys"] = [{"text":"impl !Send for gz_header","synthetic":true,"types":[]},{"text":"impl !Send for z_stream","synthetic":true,"types":[]},{"text":"impl Send for internal_state","synthetic":true,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !Send for OccupiedEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !Send for Entry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K:&nbsp;Send, V:&nbsp;Send, S:&nbsp;Send&gt; Send for LinkedHashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for Entries&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["linked_hash_set"] = [{"text":"impl&lt;T, S&gt; Send for LinkedHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Send for Iter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for IntoIter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for SymmetricDifference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linregress"] = [{"text":"impl&lt;'a&gt; Send for FormulaRegressionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RegressionData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for RegressionDataBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegressionModel","synthetic":true,"types":[]},{"text":"impl Send for RegressionParameters","synthetic":true,"types":[]},{"text":"impl Send for InvalidValueHandling","synthetic":true,"types":[]}];
implementors["lock_api"] = [{"text":"impl Send for GuardSend","synthetic":true,"types":[]},{"text":"impl !Send for GuardNoSend","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for MutexGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawMutex&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T&gt; !Send for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T&gt; !Send for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for RwLockReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for RwLockWriteGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for RwLockUpgradableReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Send, T:&nbsp;?Sized + Send&gt; Send for Mutex&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;?Sized + 'a&gt; Send for MappedMutexGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::GuardMarker: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Send, G:&nbsp;GetThreadId + Send, T:&nbsp;?Sized + Send&gt; Send for ReentrantMutex&lt;R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawRwLock + Send, T:&nbsp;?Sized + Send&gt; Send for RwLock&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Send for MappedRwLockReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::GuardMarker: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Send for MappedRwLockWriteGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::GuardMarker: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; !Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Send for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for LevelFilter","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'k&gt; Send for Key&lt;'k&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'v&gt; !Send for Value&lt;'v&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'f&gt; !Send for Slot&lt;'s, 'f&gt;","synthetic":true,"types":[]}];
implementors["lru"] = [{"text":"impl&lt;K, V, S&nbsp;=&nbsp;ABuildHasher&gt; !Send for LruCache&lt;K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K:&nbsp;Send, V:&nbsp;Send&gt; Send for LruCache&lt;K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Send, V:&nbsp;Send&gt; Send for Iter&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Send, V:&nbsp;Send&gt; Send for IterMut&lt;'a, K, V&gt;","synthetic":false,"types":[]}];
implementors["lru_time_cache"] = [{"text":"impl&lt;'a, Key, Value&gt; Send for Iter&lt;'a, Key, Value&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Key, Value&gt; Send for NotifyIter&lt;'a, Key, Value&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Key, Value&gt; Send for PeekIter&lt;'a, Key, Value&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Key, Value&gt; Send for VacantEntry&lt;'a, Key, Value&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Value&gt; Send for OccupiedEntry&lt;'a, Value&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Key, Value&gt; Send for LruCache&lt;Key, Value&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Key, Value&gt; Send for TimedEntry&lt;'a, Key, Value&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Key, Value&gt; Send for Entry&lt;'a, Key, Value&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["matchers"] = [{"text":"impl&lt;S, A&gt; Send for Pattern&lt;S, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, A&gt; Send for Matcher&lt;'a, S, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Send for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["memmap"] = [{"text":"impl Send for MmapOptions","synthetic":true,"types":[]},{"text":"impl Send for Mmap","synthetic":true,"types":[]},{"text":"impl Send for MmapMut","synthetic":true,"types":[]}];
implementors["memory_db"] = [{"text":"impl&lt;T&gt; Send for MemCounter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for NoopTracker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, KF, T, M&gt; Send for MemoryDB&lt;H, KF, T, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;KF: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;KF as KeyFunction&lt;H&gt;&gt;::Key: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for HashKey&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for PrefixedKey&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for LegacyPrefixedKey&lt;H&gt;","synthetic":true,"types":[]}];
implementors["memory_units"] = [{"text":"impl Send for Bytes","synthetic":true,"types":[]},{"text":"impl Send for Words","synthetic":true,"types":[]},{"text":"impl Send for Pages","synthetic":true,"types":[]},{"text":"impl Send for Words","synthetic":true,"types":[]},{"text":"impl Send for Pages","synthetic":true,"types":[]}];
implementors["merlin"] = [{"text":"impl Send for Transcript","synthetic":true,"types":[]},{"text":"impl Send for TranscriptRng","synthetic":true,"types":[]},{"text":"impl Send for TranscriptRngBuilder","synthetic":true,"types":[]}];
implementors["minicbor"] = [{"text":"impl&lt;'b&gt; Send for Decoder&lt;'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Send for Probe&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T&gt; Send for ArrayIter&lt;'a, 'b, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Send for BytesIter&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, K, V&gt; Send for MapIter&lt;'a, 'b, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Send for StrIter&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Error&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for EndOfSlice","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Send for StreamResult","synthetic":true,"types":[]},{"text":"impl Send for MZFlush","synthetic":true,"types":[]},{"text":"impl Send for MZStatus","synthetic":true,"types":[]},{"text":"impl Send for MZError","synthetic":true,"types":[]},{"text":"impl Send for DataFormat","synthetic":true,"types":[]},{"text":"impl Send for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Send for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl Send for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl Send for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl Send for TINFLStatus","synthetic":true,"types":[]},{"text":"impl Send for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl Send for MinReset","synthetic":true,"types":[]},{"text":"impl Send for ZeroReset","synthetic":true,"types":[]},{"text":"impl Send for FullReset","synthetic":true,"types":[]},{"text":"impl Send for InflateState","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl Send for Poll","synthetic":true,"types":[]},{"text":"impl Send for PollOpt","synthetic":true,"types":[]},{"text":"impl Send for Ready","synthetic":true,"types":[]},{"text":"impl Send for Token","synthetic":true,"types":[]},{"text":"impl Send for Events","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EventedFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for UnixReady","synthetic":true,"types":[]},{"text":"impl Send for TcpListener","synthetic":true,"types":[]},{"text":"impl Send for TcpStream","synthetic":true,"types":[]},{"text":"impl Send for UdpSocket","synthetic":true,"types":[]},{"text":"impl Send for Registration","synthetic":false,"types":[]},{"text":"impl Send for SetReadiness","synthetic":false,"types":[]}];
implementors["mio_extras"] = [{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SyncSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Timer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Timeout","synthetic":true,"types":[]}];
implementors["mio_uds"] = [{"text":"impl Send for UnixStream","synthetic":true,"types":[]},{"text":"impl Send for UnixListener","synthetic":true,"types":[]},{"text":"impl Send for UnixDatagram","synthetic":true,"types":[]}];
implementors["multihash"] = [{"text":"impl&lt;T&gt; Send for MultihashGeneric&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for MultihashRefGeneric&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DecodeOwnedError","synthetic":true,"types":[]},{"text":"impl Send for Identity","synthetic":true,"types":[]},{"text":"impl Send for Sha1","synthetic":true,"types":[]},{"text":"impl Send for Sha2_256","synthetic":true,"types":[]},{"text":"impl Send for Sha2_512","synthetic":true,"types":[]},{"text":"impl Send for Sha3_224","synthetic":true,"types":[]},{"text":"impl Send for Sha3_256","synthetic":true,"types":[]},{"text":"impl Send for Sha3_384","synthetic":true,"types":[]},{"text":"impl Send for Sha3_512","synthetic":true,"types":[]},{"text":"impl Send for Keccak224","synthetic":true,"types":[]},{"text":"impl Send for Keccak256","synthetic":true,"types":[]},{"text":"impl Send for Keccak384","synthetic":true,"types":[]},{"text":"impl Send for Keccak512","synthetic":true,"types":[]},{"text":"impl Send for Blake2b256","synthetic":true,"types":[]},{"text":"impl Send for Blake2b512","synthetic":true,"types":[]},{"text":"impl Send for Blake2s128","synthetic":true,"types":[]},{"text":"impl Send for Blake2s256","synthetic":true,"types":[]},{"text":"impl Send for DecodeError","synthetic":true,"types":[]},{"text":"impl Send for EncodeError","synthetic":true,"types":[]},{"text":"impl Send for Code","synthetic":true,"types":[]}];
implementors["multistream_select"] = [{"text":"impl&lt;TInner&gt; Send for Negotiated&lt;TInner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInner: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TInner&gt; Send for NegotiatedComplete&lt;TInner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInner: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, N&gt; Send for ListenerSelectFuture&lt;R, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NegotiationError","synthetic":true,"types":[]},{"text":"impl Send for ProtocolError","synthetic":true,"types":[]},{"text":"impl Send for Version","synthetic":true,"types":[]}];
implementors["nalgebra"] = [{"text":"impl&lt;N, R, C, S&gt; Send for Matrix&lt;N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Unit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for EuclideanNorm","synthetic":true,"types":[]},{"text":"impl Send for LpNorm","synthetic":true,"types":[]},{"text":"impl Send for UniformNorm","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; Send for ArrayStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; Send for VecStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ShapeConstraint","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for X&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for XY&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for XYZ&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for XYZW&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for XYZWA&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for XYZWAB&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for IJKW&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M2x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M2x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M2x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M2x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M2x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M3x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M3x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M3x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M3x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M3x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M4x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M4x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M4x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M4x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M4x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M5x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M5x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M5x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M5x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M5x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M6x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M6x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M6x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M6x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M6x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DefaultAllocator","synthetic":true,"types":[]},{"text":"impl Send for Dynamic","synthetic":true,"types":[]},{"text":"impl Send for U1","synthetic":true,"types":[]},{"text":"impl Send for U0","synthetic":true,"types":[]},{"text":"impl Send for U2","synthetic":true,"types":[]},{"text":"impl Send for U3","synthetic":true,"types":[]},{"text":"impl Send for U4","synthetic":true,"types":[]},{"text":"impl Send for U5","synthetic":true,"types":[]},{"text":"impl Send for U6","synthetic":true,"types":[]},{"text":"impl Send for U7","synthetic":true,"types":[]},{"text":"impl Send for U8","synthetic":true,"types":[]},{"text":"impl Send for U9","synthetic":true,"types":[]},{"text":"impl Send for U10","synthetic":true,"types":[]},{"text":"impl Send for U11","synthetic":true,"types":[]},{"text":"impl Send for U12","synthetic":true,"types":[]},{"text":"impl Send for U13","synthetic":true,"types":[]},{"text":"impl Send for U14","synthetic":true,"types":[]},{"text":"impl Send for U15","synthetic":true,"types":[]},{"text":"impl Send for U16","synthetic":true,"types":[]},{"text":"impl Send for U17","synthetic":true,"types":[]},{"text":"impl Send for U18","synthetic":true,"types":[]},{"text":"impl Send for U19","synthetic":true,"types":[]},{"text":"impl Send for U20","synthetic":true,"types":[]},{"text":"impl Send for U21","synthetic":true,"types":[]},{"text":"impl Send for U22","synthetic":true,"types":[]},{"text":"impl Send for U23","synthetic":true,"types":[]},{"text":"impl Send for U24","synthetic":true,"types":[]},{"text":"impl Send for U25","synthetic":true,"types":[]},{"text":"impl Send for U26","synthetic":true,"types":[]},{"text":"impl Send for U27","synthetic":true,"types":[]},{"text":"impl Send for U28","synthetic":true,"types":[]},{"text":"impl Send for U29","synthetic":true,"types":[]},{"text":"impl Send for U30","synthetic":true,"types":[]},{"text":"impl Send for U31","synthetic":true,"types":[]},{"text":"impl Send for U32","synthetic":true,"types":[]},{"text":"impl Send for U33","synthetic":true,"types":[]},{"text":"impl Send for U34","synthetic":true,"types":[]},{"text":"impl Send for U35","synthetic":true,"types":[]},{"text":"impl Send for U36","synthetic":true,"types":[]},{"text":"impl Send for U37","synthetic":true,"types":[]},{"text":"impl Send for U38","synthetic":true,"types":[]},{"text":"impl Send for U39","synthetic":true,"types":[]},{"text":"impl Send for U40","synthetic":true,"types":[]},{"text":"impl Send for U41","synthetic":true,"types":[]},{"text":"impl Send for U42","synthetic":true,"types":[]},{"text":"impl Send for U43","synthetic":true,"types":[]},{"text":"impl Send for U44","synthetic":true,"types":[]},{"text":"impl Send for U45","synthetic":true,"types":[]},{"text":"impl Send for U46","synthetic":true,"types":[]},{"text":"impl Send for U47","synthetic":true,"types":[]},{"text":"impl Send for U48","synthetic":true,"types":[]},{"text":"impl Send for U49","synthetic":true,"types":[]},{"text":"impl Send for U50","synthetic":true,"types":[]},{"text":"impl Send for U51","synthetic":true,"types":[]},{"text":"impl Send for U52","synthetic":true,"types":[]},{"text":"impl Send for U53","synthetic":true,"types":[]},{"text":"impl Send for U54","synthetic":true,"types":[]},{"text":"impl Send for U55","synthetic":true,"types":[]},{"text":"impl Send for U56","synthetic":true,"types":[]},{"text":"impl Send for U57","synthetic":true,"types":[]},{"text":"impl Send for U58","synthetic":true,"types":[]},{"text":"impl Send for U59","synthetic":true,"types":[]},{"text":"impl Send for U60","synthetic":true,"types":[]},{"text":"impl Send for U61","synthetic":true,"types":[]},{"text":"impl Send for U62","synthetic":true,"types":[]},{"text":"impl Send for U63","synthetic":true,"types":[]},{"text":"impl Send for U64","synthetic":true,"types":[]},{"text":"impl Send for U65","synthetic":true,"types":[]},{"text":"impl Send for U66","synthetic":true,"types":[]},{"text":"impl Send for U67","synthetic":true,"types":[]},{"text":"impl Send for U68","synthetic":true,"types":[]},{"text":"impl Send for U69","synthetic":true,"types":[]},{"text":"impl Send for U70","synthetic":true,"types":[]},{"text":"impl Send for U71","synthetic":true,"types":[]},{"text":"impl Send for U72","synthetic":true,"types":[]},{"text":"impl Send for U73","synthetic":true,"types":[]},{"text":"impl Send for U74","synthetic":true,"types":[]},{"text":"impl Send for U75","synthetic":true,"types":[]},{"text":"impl Send for U76","synthetic":true,"types":[]},{"text":"impl Send for U77","synthetic":true,"types":[]},{"text":"impl Send for U78","synthetic":true,"types":[]},{"text":"impl Send for U79","synthetic":true,"types":[]},{"text":"impl Send for U80","synthetic":true,"types":[]},{"text":"impl Send for U81","synthetic":true,"types":[]},{"text":"impl Send for U82","synthetic":true,"types":[]},{"text":"impl Send for U83","synthetic":true,"types":[]},{"text":"impl Send for U84","synthetic":true,"types":[]},{"text":"impl Send for U85","synthetic":true,"types":[]},{"text":"impl Send for U86","synthetic":true,"types":[]},{"text":"impl Send for U87","synthetic":true,"types":[]},{"text":"impl Send for U88","synthetic":true,"types":[]},{"text":"impl Send for U89","synthetic":true,"types":[]},{"text":"impl Send for U90","synthetic":true,"types":[]},{"text":"impl Send for U91","synthetic":true,"types":[]},{"text":"impl Send for U92","synthetic":true,"types":[]},{"text":"impl Send for U93","synthetic":true,"types":[]},{"text":"impl Send for U94","synthetic":true,"types":[]},{"text":"impl Send for U95","synthetic":true,"types":[]},{"text":"impl Send for U96","synthetic":true,"types":[]},{"text":"impl Send for U97","synthetic":true,"types":[]},{"text":"impl Send for U98","synthetic":true,"types":[]},{"text":"impl Send for U99","synthetic":true,"types":[]},{"text":"impl Send for U100","synthetic":true,"types":[]},{"text":"impl Send for U101","synthetic":true,"types":[]},{"text":"impl Send for U102","synthetic":true,"types":[]},{"text":"impl Send for U103","synthetic":true,"types":[]},{"text":"impl Send for U104","synthetic":true,"types":[]},{"text":"impl Send for U105","synthetic":true,"types":[]},{"text":"impl Send for U106","synthetic":true,"types":[]},{"text":"impl Send for U107","synthetic":true,"types":[]},{"text":"impl Send for U108","synthetic":true,"types":[]},{"text":"impl Send for U109","synthetic":true,"types":[]},{"text":"impl Send for U110","synthetic":true,"types":[]},{"text":"impl Send for U111","synthetic":true,"types":[]},{"text":"impl Send for U112","synthetic":true,"types":[]},{"text":"impl Send for U113","synthetic":true,"types":[]},{"text":"impl Send for U114","synthetic":true,"types":[]},{"text":"impl Send for U115","synthetic":true,"types":[]},{"text":"impl Send for U116","synthetic":true,"types":[]},{"text":"impl Send for U117","synthetic":true,"types":[]},{"text":"impl Send for U118","synthetic":true,"types":[]},{"text":"impl Send for U119","synthetic":true,"types":[]},{"text":"impl Send for U120","synthetic":true,"types":[]},{"text":"impl Send for U121","synthetic":true,"types":[]},{"text":"impl Send for U122","synthetic":true,"types":[]},{"text":"impl Send for U123","synthetic":true,"types":[]},{"text":"impl Send for U124","synthetic":true,"types":[]},{"text":"impl Send for U125","synthetic":true,"types":[]},{"text":"impl Send for U126","synthetic":true,"types":[]},{"text":"impl Send for U127","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !Send for MatrixIter&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !Send for MatrixIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Send for RowIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !Send for RowIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Send for ColumnIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !Send for ColumnIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Send for Point&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Send for Rotation&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Send for Translation&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, R&gt; !Send for Isometry&lt;N, D, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, R&gt; !Send for Similarity&lt;N, D, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, C&gt; !Send for Transform&lt;N, D, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, S&gt; Send for Reflection&lt;N, D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Orthographic3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Perspective3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TGeneral","synthetic":true,"types":[]},{"text":"impl Send for TProjective","synthetic":true,"types":[]},{"text":"impl Send for TAffine","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Send for Bidiagonal&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Send for Cholesky&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Send for FullPivLU&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Send for Hessenberg&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Send for LU&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !Send for PermutationSequence&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Send for QR&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Send for Schur&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Send for SVD&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Send for SymmetricEigen&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Send for SymmetricTridiagonal&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for GivensRotation&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ComplexField&gt;::RealField: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Scalar + Send, R:&nbsp;Dim, C:&nbsp;Dim, RStride:&nbsp;Dim, CStride:&nbsp;Dim&gt; Send for SliceStorage&lt;'a, N, R, C, RStride, CStride&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Scalar + Send, R:&nbsp;Dim, C:&nbsp;Dim, RStride:&nbsp;Dim, CStride:&nbsp;Dim&gt; Send for SliceStorageMut&lt;'a, N, R, C, RStride, CStride&gt;","synthetic":false,"types":[]}];
implementors["names"] = [{"text":"impl&lt;'a&gt; Send for Generator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Name","synthetic":true,"types":[]}];
implementors["net2"] = [{"text":"impl Send for TcpBuilder","synthetic":true,"types":[]},{"text":"impl Send for UdpBuilder","synthetic":true,"types":[]}];
implementors["nix"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; Send for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl Send for Entry","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for Errno","synthetic":true,"types":[]},{"text":"impl Send for AtFlags","synthetic":true,"types":[]},{"text":"impl Send for OFlag","synthetic":true,"types":[]},{"text":"impl Send for SealFlag","synthetic":true,"types":[]},{"text":"impl Send for FdFlag","synthetic":true,"types":[]},{"text":"impl Send for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl Send for FallocateFlags","synthetic":true,"types":[]},{"text":"impl Send for PosixFadviseAdvice","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FlockArg","synthetic":true,"types":[]},{"text":"impl Send for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl !Send for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl Send for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl Send for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl Send for MsFlags","synthetic":true,"types":[]},{"text":"impl Send for MntFlags","synthetic":true,"types":[]},{"text":"impl Send for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl Send for FdFlag","synthetic":true,"types":[]},{"text":"impl Send for MqAttr","synthetic":true,"types":[]},{"text":"impl Send for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl Send for PollFd","synthetic":true,"types":[]},{"text":"impl Send for PollFlags","synthetic":true,"types":[]},{"text":"impl Send for OpenptyResult","synthetic":true,"types":[]},{"text":"impl Send for ForkptyResult","synthetic":true,"types":[]},{"text":"impl Send for PtyMaster","synthetic":true,"types":[]},{"text":"impl Send for CloneFlags","synthetic":true,"types":[]},{"text":"impl Send for CpuSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl Send for LioOpcode","synthetic":true,"types":[]},{"text":"impl Send for LioMode","synthetic":true,"types":[]},{"text":"impl Send for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for EpollFlags","synthetic":true,"types":[]},{"text":"impl Send for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl Send for EpollEvent","synthetic":true,"types":[]},{"text":"impl Send for EpollOp","synthetic":true,"types":[]},{"text":"impl Send for EfdFlags","synthetic":true,"types":[]},{"text":"impl Send for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl Send for ProtFlags","synthetic":true,"types":[]},{"text":"impl Send for MapFlags","synthetic":true,"types":[]},{"text":"impl Send for MsFlags","synthetic":true,"types":[]},{"text":"impl Send for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl Send for MmapAdvise","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl Send for Dqblk","synthetic":true,"types":[]},{"text":"impl Send for QuotaType","synthetic":true,"types":[]},{"text":"impl Send for QuotaFmt","synthetic":true,"types":[]},{"text":"impl Send for RebootMode","synthetic":true,"types":[]},{"text":"impl Send for FdSet","synthetic":true,"types":[]},{"text":"impl !Send for SigEvent","synthetic":true,"types":[]},{"text":"impl Send for SignalIterator","synthetic":true,"types":[]},{"text":"impl Send for SaFlags","synthetic":true,"types":[]},{"text":"impl Send for SigSet","synthetic":true,"types":[]},{"text":"impl Send for SigAction","synthetic":true,"types":[]},{"text":"impl Send for Signal","synthetic":true,"types":[]},{"text":"impl Send for SigmaskHow","synthetic":true,"types":[]},{"text":"impl Send for SigHandler","synthetic":true,"types":[]},{"text":"impl Send for SigevNotify","synthetic":true,"types":[]},{"text":"impl Send for SfdFlags","synthetic":true,"types":[]},{"text":"impl Send for SignalFd","synthetic":true,"types":[]},{"text":"impl Send for UnixAddr","synthetic":true,"types":[]},{"text":"impl Send for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl Send for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl Send for LinkAddr","synthetic":true,"types":[]},{"text":"impl Send for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl Send for AlgAddr","synthetic":true,"types":[]},{"text":"impl Send for VsockAddr","synthetic":true,"types":[]},{"text":"impl Send for SockFlag","synthetic":true,"types":[]},{"text":"impl Send for MsgFlags","synthetic":true,"types":[]},{"text":"impl Send for UnixCredentials","synthetic":true,"types":[]},{"text":"impl Send for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl Send for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for AddressFamily","synthetic":true,"types":[]},{"text":"impl Send for SockAddr","synthetic":true,"types":[]},{"text":"impl Send for InetAddr","synthetic":true,"types":[]},{"text":"impl Send for IpAddr","synthetic":true,"types":[]},{"text":"impl Send for SockType","synthetic":true,"types":[]},{"text":"impl Send for SockProtocol","synthetic":true,"types":[]},{"text":"impl Send for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SockLevel","synthetic":true,"types":[]},{"text":"impl Send for Shutdown","synthetic":true,"types":[]},{"text":"impl Send for ReuseAddr","synthetic":true,"types":[]},{"text":"impl Send for ReusePort","synthetic":true,"types":[]},{"text":"impl Send for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl Send for Linger","synthetic":true,"types":[]},{"text":"impl Send for IpAddMembership","synthetic":true,"types":[]},{"text":"impl Send for IpDropMembership","synthetic":true,"types":[]},{"text":"impl Send for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl Send for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl Send for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl Send for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl Send for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl Send for SendTimeout","synthetic":true,"types":[]},{"text":"impl Send for Broadcast","synthetic":true,"types":[]},{"text":"impl Send for OobInline","synthetic":true,"types":[]},{"text":"impl Send for SocketError","synthetic":true,"types":[]},{"text":"impl Send for KeepAlive","synthetic":true,"types":[]},{"text":"impl Send for PeerCredentials","synthetic":true,"types":[]},{"text":"impl Send for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl Send for RcvBuf","synthetic":true,"types":[]},{"text":"impl Send for SndBuf","synthetic":true,"types":[]},{"text":"impl Send for RcvBufForce","synthetic":true,"types":[]},{"text":"impl Send for SndBufForce","synthetic":true,"types":[]},{"text":"impl Send for SockType","synthetic":true,"types":[]},{"text":"impl Send for AcceptConn","synthetic":true,"types":[]},{"text":"impl Send for OriginalDst","synthetic":true,"types":[]},{"text":"impl Send for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl Send for IpTransparent","synthetic":true,"types":[]},{"text":"impl Send for Mark","synthetic":true,"types":[]},{"text":"impl Send for PassCred","synthetic":true,"types":[]},{"text":"impl Send for TcpCongestion","synthetic":true,"types":[]},{"text":"impl Send for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl Send for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl Send for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AlgSetKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SFlag","synthetic":true,"types":[]},{"text":"impl Send for Mode","synthetic":true,"types":[]},{"text":"impl Send for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl Send for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl Send for Statfs","synthetic":true,"types":[]},{"text":"impl Send for FsType","synthetic":true,"types":[]},{"text":"impl Send for FsFlags","synthetic":true,"types":[]},{"text":"impl Send for Statvfs","synthetic":true,"types":[]},{"text":"impl Send for SysInfo","synthetic":true,"types":[]},{"text":"impl Send for Termios","synthetic":true,"types":[]},{"text":"impl Send for InputFlags","synthetic":true,"types":[]},{"text":"impl Send for OutputFlags","synthetic":true,"types":[]},{"text":"impl Send for ControlFlags","synthetic":true,"types":[]},{"text":"impl Send for LocalFlags","synthetic":true,"types":[]},{"text":"impl Send for BaudRate","synthetic":true,"types":[]},{"text":"impl Send for SetArg","synthetic":true,"types":[]},{"text":"impl Send for FlushArg","synthetic":true,"types":[]},{"text":"impl Send for FlowArg","synthetic":true,"types":[]},{"text":"impl Send for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl Send for TimeSpec","synthetic":true,"types":[]},{"text":"impl Send for TimeVal","synthetic":true,"types":[]},{"text":"impl Send for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for IoVec&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for UtsName","synthetic":true,"types":[]},{"text":"impl Send for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl Send for WaitStatus","synthetic":true,"types":[]},{"text":"impl Send for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl Send for InitFlags","synthetic":true,"types":[]},{"text":"impl Send for Inotify","synthetic":true,"types":[]},{"text":"impl Send for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl Send for InotifyEvent","synthetic":true,"types":[]},{"text":"impl !Send for UContext","synthetic":true,"types":[]},{"text":"impl Send for Uid","synthetic":true,"types":[]},{"text":"impl Send for Gid","synthetic":true,"types":[]},{"text":"impl Send for Pid","synthetic":true,"types":[]},{"text":"impl Send for AccessFlags","synthetic":true,"types":[]},{"text":"impl Send for User","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for ForkResult","synthetic":true,"types":[]},{"text":"impl Send for FchownatFlags","synthetic":true,"types":[]},{"text":"impl Send for Whence","synthetic":true,"types":[]},{"text":"impl Send for LinkatFlags","synthetic":true,"types":[]},{"text":"impl Send for UnlinkatFlags","synthetic":true,"types":[]},{"text":"impl Send for PathconfVar","synthetic":true,"types":[]},{"text":"impl Send for SysconfVar","synthetic":true,"types":[]},{"text":"impl Send for Dir","synthetic":false,"types":[]}];
implementors["nodrop"] = [{"text":"impl&lt;T&gt; Send for NoDrop&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["nohash_hasher"] = [{"text":"impl&lt;T&gt; Send for NoHashHasher&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Send for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl Send for BigUint","synthetic":true,"types":[]},{"text":"impl Send for BigInt","synthetic":true,"types":[]},{"text":"impl Send for Sign","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Send for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Send for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Send for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Send for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Send for FloatErrorKind","synthetic":true,"types":[]}];
implementors["object"] = [{"text":"impl Send for Architecture","synthetic":true,"types":[]},{"text":"impl Send for AddressSize","synthetic":true,"types":[]},{"text":"impl Send for BinaryFormat","synthetic":true,"types":[]},{"text":"impl Send for SectionKind","synthetic":true,"types":[]},{"text":"impl Send for SymbolKind","synthetic":true,"types":[]},{"text":"impl Send for SymbolScope","synthetic":true,"types":[]},{"text":"impl Send for RelocationKind","synthetic":true,"types":[]},{"text":"impl Send for RelocationEncoding","synthetic":true,"types":[]},{"text":"impl Send for FileFlags","synthetic":true,"types":[]},{"text":"impl Send for SectionFlags","synthetic":true,"types":[]},{"text":"impl&lt;Section&gt; Send for SymbolFlags&lt;Section&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]},{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U16Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U32Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U64Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I16Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I32Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I64Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Endianness","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for Bytes&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for StringTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for File&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for SegmentIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for Segment&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for SectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for Section&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for SymbolIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for RelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for SectionIndex","synthetic":true,"types":[]},{"text":"impl Send for SymbolIndex","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for Symbol&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for SymbolMap&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Send for Relocation","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for CompressedData&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Send for SymbolSection","synthetic":true,"types":[]},{"text":"impl Send for RelocationTarget","synthetic":true,"types":[]},{"text":"impl Send for CompressionFormat","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for CoffFile&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for SectionTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffSegmentIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffSegment&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffSectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffSection&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for SymbolTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffSymbolIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffRelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Send for ElfFile&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfSegmentIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfSegment&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Send for SectionTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfSectionIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfSection&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Send for SymbolTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfSymbolIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RelocationSections","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfRelocationIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Rel: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Rela: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Send for ElfNoteIterator&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Send for ElfNote&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::NoteHeader: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Mach&gt; Send for MachOFile&lt;'data, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOSegmentIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOSegment&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Segment: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOSectionIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOSection&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Mach&gt; Send for SymbolTable&lt;'data, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOSymbolIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachORelocationIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Pe&gt; Send for PeFile&lt;'data, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Send for PeSegmentIterator&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Send for PeSegment&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Send for PeSectionIterator&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Send for PeSection&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for PeRelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for WasmFile&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for WasmSegmentIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for WasmSegment&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for WasmSectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for WasmSection&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for WasmSymbolIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for WasmRelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Object","synthetic":true,"types":[]},{"text":"impl Send for SectionId","synthetic":true,"types":[]},{"text":"impl Send for Section","synthetic":true,"types":[]},{"text":"impl Send for SymbolId","synthetic":true,"types":[]},{"text":"impl Send for Symbol","synthetic":true,"types":[]},{"text":"impl Send for Relocation","synthetic":true,"types":[]},{"text":"impl Send for StandardSegment","synthetic":true,"types":[]},{"text":"impl Send for StandardSection","synthetic":true,"types":[]},{"text":"impl Send for SymbolSection","synthetic":true,"types":[]},{"text":"impl Send for Mangling","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for FileHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for FileHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Ident","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SectionHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SectionHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for CompressionHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for CompressionHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Sym32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Sym64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Syminfo32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Syminfo64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Rel32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Rela32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Rel64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Rela64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ProgramHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ProgramHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Dyn32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Dyn64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for NoteHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for NoteHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FatHeader","synthetic":true,"types":[]},{"text":"impl Send for FatArch32","synthetic":true,"types":[]},{"text":"impl Send for FatArch64","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for MachHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for MachHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for LoadCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for LcStr&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SegmentCommand32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SegmentCommand64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Section32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Section64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Fvmlib&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for FvmlibCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Dylib&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DylibCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SubFrameworkCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SubClientCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SubUmbrellaCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SubLibraryCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for PreboundDylibCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DylinkerCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ThreadCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for RoutinesCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for RoutinesCommand_64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SymtabCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DysymtabCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DylibTableOfContents&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DylibModule32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DylibModule64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DylibReference&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for TwolevelHintsCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for TwolevelHint&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for PrebindCksumCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UuidCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for RpathCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for LinkeditDataCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for EncryptionInfoCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for EncryptionInfoCommand64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for VersionMinCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BuildVersionCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BuildToolVersion&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DyldInfoCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for LinkerOptionCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SymSegCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for IdentCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for FvmfileCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for EntryPointCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SourceVersionCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DataInCodeEntry&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for NoteCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Nlist32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Nlist64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Relocation&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RelocationInfo","synthetic":true,"types":[]},{"text":"impl Send for ScatteredRelocationInfo","synthetic":true,"types":[]},{"text":"impl Send for ImageDosHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageOs2Header","synthetic":true,"types":[]},{"text":"impl Send for ImageVxdHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageFileHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageDataDirectory","synthetic":true,"types":[]},{"text":"impl Send for ImageOptionalHeader32","synthetic":true,"types":[]},{"text":"impl Send for ImageRomOptionalHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageOptionalHeader64","synthetic":true,"types":[]},{"text":"impl Send for ImageNtHeaders64","synthetic":true,"types":[]},{"text":"impl Send for ImageNtHeaders32","synthetic":true,"types":[]},{"text":"impl Send for ImageRomHeaders","synthetic":true,"types":[]},{"text":"impl Send for Guid","synthetic":true,"types":[]},{"text":"impl Send for AnonObjectHeader","synthetic":true,"types":[]},{"text":"impl Send for AnonObjectHeaderV2","synthetic":true,"types":[]},{"text":"impl Send for AnonObjectHeaderBigobj","synthetic":true,"types":[]},{"text":"impl Send for ImageSectionHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageSymbol","synthetic":true,"types":[]},{"text":"impl Send for ImageSymbolBytes","synthetic":true,"types":[]},{"text":"impl Send for ImageSymbolEx","synthetic":true,"types":[]},{"text":"impl Send for ImageSymbolExBytes","synthetic":true,"types":[]},{"text":"impl Send for ImageAuxSymbolTokenDef","synthetic":true,"types":[]},{"text":"impl Send for ImageAuxSymbolFunction","synthetic":true,"types":[]},{"text":"impl Send for ImageAuxSymbolFunctionBeginEnd","synthetic":true,"types":[]},{"text":"impl Send for ImageAuxSymbolWeak","synthetic":true,"types":[]},{"text":"impl Send for ImageAuxSymbolSection","synthetic":true,"types":[]},{"text":"impl Send for ImageAuxSymbolCrc","synthetic":true,"types":[]},{"text":"impl Send for ImageRelocation","synthetic":true,"types":[]},{"text":"impl Send for ImageLinenumber","synthetic":true,"types":[]},{"text":"impl Send for ImageBaseRelocation","synthetic":true,"types":[]},{"text":"impl Send for ImageArchiveMemberHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageExportDirectory","synthetic":true,"types":[]},{"text":"impl Send for ImageImportByName","synthetic":true,"types":[]},{"text":"impl Send for ImageTlsDirectory64","synthetic":true,"types":[]},{"text":"impl Send for ImageTlsDirectory32","synthetic":true,"types":[]},{"text":"impl Send for ImageImportDescriptor","synthetic":true,"types":[]},{"text":"impl Send for ImageBoundImportDescriptor","synthetic":true,"types":[]},{"text":"impl Send for ImageBoundForwarderRef","synthetic":true,"types":[]},{"text":"impl Send for ImageDelayloadDescriptor","synthetic":true,"types":[]},{"text":"impl Send for ImageResourceDirectory","synthetic":true,"types":[]},{"text":"impl Send for ImageResourceDirectoryEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageResourceDirectoryString","synthetic":true,"types":[]},{"text":"impl Send for ImageResourceDirStringU","synthetic":true,"types":[]},{"text":"impl Send for ImageResourceDataEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageLoadConfigCodeIntegrity","synthetic":true,"types":[]},{"text":"impl Send for ImageDynamicRelocationTable","synthetic":true,"types":[]},{"text":"impl Send for ImageDynamicRelocation32","synthetic":true,"types":[]},{"text":"impl Send for ImageDynamicRelocation64","synthetic":true,"types":[]},{"text":"impl Send for ImageDynamicRelocation32V2","synthetic":true,"types":[]},{"text":"impl Send for ImageDynamicRelocation64V2","synthetic":true,"types":[]},{"text":"impl Send for ImagePrologueDynamicRelocationHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageEpilogueDynamicRelocationHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageLoadConfigDirectory32","synthetic":true,"types":[]},{"text":"impl Send for ImageLoadConfigDirectory64","synthetic":true,"types":[]},{"text":"impl Send for ImageHotPatchInfo","synthetic":true,"types":[]},{"text":"impl Send for ImageHotPatchBase","synthetic":true,"types":[]},{"text":"impl Send for ImageHotPatchHashes","synthetic":true,"types":[]},{"text":"impl Send for ImageArmRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageArm64RuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageAlpha64RuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageAlphaRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageEnclaveConfig32","synthetic":true,"types":[]},{"text":"impl Send for ImageEnclaveConfig64","synthetic":true,"types":[]},{"text":"impl Send for ImageEnclaveImport","synthetic":true,"types":[]},{"text":"impl Send for ImageDebugDirectory","synthetic":true,"types":[]},{"text":"impl Send for ImageCoffSymbolsHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageDebugMisc","synthetic":true,"types":[]},{"text":"impl Send for ImageFunctionEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageFunctionEntry64","synthetic":true,"types":[]},{"text":"impl Send for ImageSeparateDebugHeader","synthetic":true,"types":[]},{"text":"impl Send for NonPagedDebugInfo","synthetic":true,"types":[]},{"text":"impl Send for ImageArchitectureEntry","synthetic":true,"types":[]},{"text":"impl Send for ImportObjectHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageCor20Header","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; Send for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for OnceCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["openssl_probe"] = [{"text":"impl Send for ProbeResult","synthetic":true,"types":[]}];
implementors["owning_ref"] = [{"text":"impl&lt;O, H&gt; Send for OwningHandle&lt;O, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T:&nbsp;?Sized&gt; Send for OwningRef&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;'a T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T:&nbsp;?Sized&gt; Send for OwningRefMut&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;'a mut T: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_aura"] = [{"text":"impl&lt;T&gt; Send for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AuthorityId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Authorities&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_authorship"] = [{"text":"impl&lt;T&gt; Send for SealVerify&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; Send for OnePerAuthorPerHeight&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Header: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_finality_tracker"] = [{"text":"impl Send for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::BlockNumber: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_grandpa"] = [{"text":"impl&lt;I, R, O&gt; Send for EquivocationHandler&lt;I, R, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;FullIdentification&gt; Send for GrandpaEquivocationOffence&lt;FullIdentification&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FullIdentification: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for GrandpaTimeSlot","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for OldStoredPendingChange&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for StoredPendingChange&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for StoredState&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::BlockNumber: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::KeyOwnerProof: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_randomness_collective_flip"] = [{"text":"impl&lt;T&gt; Send for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_session"] = [{"text":"impl&lt;Period, Offset&gt; Send for PeriodicSessions&lt;Period, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Period: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TestSessionHandler","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Keys: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::ValidatorId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Inner&gt; Send for FindAccountFromAuthorIndex&lt;T, Inner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Inner: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Keys: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_timestamp"] = [{"text":"impl&lt;T&gt; Send for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Now&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Moment: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_transaction_payment"] = [{"text":"impl&lt;T, S, V, M&gt; Send for TargetedFeeAdjustment&lt;T, S, V, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for GenesisConfig","synthetic":true,"types":[]},{"text":"impl Send for NextFeeMultiplier","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ChargeTransactionPayment&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Balance: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_transaction_payment_rpc"] = [{"text":"impl&lt;BlockHash, ResponseType&gt; Send for Client&lt;BlockHash, ResponseType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockHash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;ResponseType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; Send for TransactionPayment&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["pallet_transaction_payment_rpc_runtime_api"] = [{"text":"impl&lt;Balance&gt; Send for RuntimeDispatchInfo&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parity_db"] = [{"text":"impl Send for Db","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["parity_multiaddr"] = [{"text":"impl&lt;'a&gt; Send for Onion3Addr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Multiaddr","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Protocol&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FromUrlErr","synthetic":true,"types":[]}];
implementors["parity_scale_codec"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for OptionBool","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for IoReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Compact&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, U&gt; Send for Ref&lt;'a, T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parity_send_wrapper"] = [{"text":"impl&lt;T&gt; Send for SendWrapper&lt;T&gt;","synthetic":false,"types":[]}];
implementors["parity_tokio_ipc"] = [{"text":"impl Send for SecurityAttributes","synthetic":true,"types":[]},{"text":"impl Send for Endpoint","synthetic":true,"types":[]},{"text":"impl Send for RemoteId","synthetic":true,"types":[]},{"text":"impl Send for Incoming","synthetic":true,"types":[]},{"text":"impl Send for IpcConnection","synthetic":true,"types":[]}];
implementors["parity_util_mem"] = [{"text":"impl !Send for MallocSizeOfOps","synthetic":true,"types":[]}];
implementors["parity_wasm"] = [{"text":"impl Send for Module","synthetic":true,"types":[]},{"text":"impl Send for FunctionSection","synthetic":true,"types":[]},{"text":"impl Send for CodeSection","synthetic":true,"types":[]},{"text":"impl Send for MemorySection","synthetic":true,"types":[]},{"text":"impl Send for DataSection","synthetic":true,"types":[]},{"text":"impl Send for ImportSection","synthetic":true,"types":[]},{"text":"impl Send for ExportSection","synthetic":true,"types":[]},{"text":"impl Send for GlobalSection","synthetic":true,"types":[]},{"text":"impl Send for TypeSection","synthetic":true,"types":[]},{"text":"impl Send for ElementSection","synthetic":true,"types":[]},{"text":"impl Send for TableSection","synthetic":true,"types":[]},{"text":"impl Send for CustomSection","synthetic":true,"types":[]},{"text":"impl Send for ImportEntry","synthetic":true,"types":[]},{"text":"impl Send for ResizableLimits","synthetic":true,"types":[]},{"text":"impl Send for MemoryType","synthetic":true,"types":[]},{"text":"impl Send for TableType","synthetic":true,"types":[]},{"text":"impl Send for GlobalType","synthetic":true,"types":[]},{"text":"impl Send for ExportEntry","synthetic":true,"types":[]},{"text":"impl Send for GlobalEntry","synthetic":true,"types":[]},{"text":"impl Send for VarUint32","synthetic":true,"types":[]},{"text":"impl Send for VarUint7","synthetic":true,"types":[]},{"text":"impl Send for Uint8","synthetic":true,"types":[]},{"text":"impl Send for VarUint1","synthetic":true,"types":[]},{"text":"impl Send for VarInt7","synthetic":true,"types":[]},{"text":"impl Send for Uint32","synthetic":true,"types":[]},{"text":"impl Send for VarInt32","synthetic":true,"types":[]},{"text":"impl Send for VarInt64","synthetic":true,"types":[]},{"text":"impl Send for Uint64","synthetic":true,"types":[]},{"text":"impl Send for VarUint64","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CountedList&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Send for CountedWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for CountedListWriter&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FunctionType","synthetic":true,"types":[]},{"text":"impl Send for Instructions","synthetic":true,"types":[]},{"text":"impl Send for InitExpr","synthetic":true,"types":[]},{"text":"impl Send for BrTableData","synthetic":true,"types":[]},{"text":"impl Send for Func","synthetic":true,"types":[]},{"text":"impl Send for FuncBody","synthetic":true,"types":[]},{"text":"impl Send for Local","synthetic":true,"types":[]},{"text":"impl Send for ElementSegment","synthetic":true,"types":[]},{"text":"impl Send for DataSegment","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IndexMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NameSection","synthetic":true,"types":[]},{"text":"impl Send for ModuleNameSubsection","synthetic":true,"types":[]},{"text":"impl Send for FunctionNameSubsection","synthetic":true,"types":[]},{"text":"impl Send for LocalNameSubsection","synthetic":true,"types":[]},{"text":"impl Send for RelocSection","synthetic":true,"types":[]},{"text":"impl Send for Unparsed","synthetic":true,"types":[]},{"text":"impl Send for ImportCountType","synthetic":true,"types":[]},{"text":"impl Send for Section","synthetic":true,"types":[]},{"text":"impl Send for External","synthetic":true,"types":[]},{"text":"impl Send for Internal","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for ValueType","synthetic":true,"types":[]},{"text":"impl Send for BlockType","synthetic":true,"types":[]},{"text":"impl Send for TableElementType","synthetic":true,"types":[]},{"text":"impl Send for Instruction","synthetic":true,"types":[]},{"text":"impl Send for RelocationEntry","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for SignatureBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for SignaturesBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for FunctionBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for TypeRefBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for FuncBodyBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FunctionDefinition","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for DataSegmentBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for ExportBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for ExportInternalBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for GlobalBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for ImportBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Identity","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for MemoryBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for ModuleBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for TableBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TableDefinition","synthetic":true,"types":[]},{"text":"impl Send for TableEntryDefinition","synthetic":true,"types":[]}];
implementors["parity_ws"] = [{"text":"impl Send for Sender","synthetic":true,"types":[]},{"text":"impl Send for Frame","synthetic":true,"types":[]},{"text":"impl Send for Handshake","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Response","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Settings","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for WebSocket&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Factory&gt;::Handler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl Send for CloseCode","synthetic":true,"types":[]},{"text":"impl Send for OpCode","synthetic":true,"types":[]},{"text":"impl Send for Kind","synthetic":true,"types":[]}];
implementors["parking"] = [{"text":"impl Send for Parker","synthetic":true,"types":[]},{"text":"impl Send for Unparker","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Send for Condvar","synthetic":true,"types":[]},{"text":"impl Send for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl Send for Once","synthetic":true,"types":[]},{"text":"impl Send for RawMutex","synthetic":true,"types":[]},{"text":"impl Send for RawRwLock","synthetic":true,"types":[]},{"text":"impl Send for RawThreadId","synthetic":true,"types":[]},{"text":"impl Send for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Send for ParkToken","synthetic":true,"types":[]},{"text":"impl Send for UnparkResult","synthetic":true,"types":[]},{"text":"impl Send for UnparkToken","synthetic":true,"types":[]},{"text":"impl Send for SpinWait","synthetic":true,"types":[]},{"text":"impl Send for FilterOp","synthetic":true,"types":[]},{"text":"impl Send for ParkResult","synthetic":true,"types":[]},{"text":"impl Send for RequeueOp","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Send for SIMPLE_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl Send for QUERY_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl Send for DEFAULT_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl Send for PATH_SEGMENT_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl Send for USERINFO_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for PercentEncode&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["polling"] = [{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for Poller","synthetic":true,"types":[]}];
implementors["poly1305"] = [{"text":"impl Send for Poly1305","synthetic":true,"types":[]}];
implementors["polyval"] = [{"text":"impl Send for Polyval","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Send for YesS3","synthetic":true,"types":[]},{"text":"impl Send for NoS3","synthetic":true,"types":[]},{"text":"impl Send for YesS4","synthetic":true,"types":[]},{"text":"impl Send for NoS4","synthetic":true,"types":[]},{"text":"impl Send for YesA1","synthetic":true,"types":[]},{"text":"impl Send for NoA1","synthetic":true,"types":[]},{"text":"impl Send for YesA2","synthetic":true,"types":[]},{"text":"impl Send for NoA2","synthetic":true,"types":[]},{"text":"impl Send for YesNI","synthetic":true,"types":[]},{"text":"impl Send for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Send for SseMachine&lt;S3, S4, NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S4: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Send for Avx2Machine&lt;NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for vec128_storage","synthetic":true,"types":[]},{"text":"impl Send for vec256_storage","synthetic":true,"types":[]},{"text":"impl Send for vec512_storage","synthetic":true,"types":[]}];
implementors["primitive_types"] = [{"text":"impl Send for U128","synthetic":true,"types":[]},{"text":"impl Send for U256","synthetic":true,"types":[]},{"text":"impl Send for U512","synthetic":true,"types":[]},{"text":"impl Send for H128","synthetic":true,"types":[]},{"text":"impl Send for H160","synthetic":true,"types":[]},{"text":"impl Send for H256","synthetic":true,"types":[]},{"text":"impl Send for H512","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !Send for TokenStream","synthetic":true,"types":[]},{"text":"impl !Send for LexError","synthetic":true,"types":[]},{"text":"impl !Send for Span","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl !Send for Punct","synthetic":true,"types":[]},{"text":"impl !Send for Ident","synthetic":true,"types":[]},{"text":"impl !Send for Literal","synthetic":true,"types":[]},{"text":"impl !Send for TokenTree","synthetic":true,"types":[]},{"text":"impl Send for Delimiter","synthetic":true,"types":[]},{"text":"impl Send for Spacing","synthetic":true,"types":[]},{"text":"impl !Send for IntoIter","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl !Send for Diagnostic","synthetic":true,"types":[]},{"text":"impl !Send for SpanRange","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]}];
implementors["prometheus"] = [{"text":"impl Send for TextEncoder","synthetic":true,"types":[]},{"text":"impl Send for Histogram","synthetic":true,"types":[]},{"text":"impl Send for HistogramOpts","synthetic":true,"types":[]},{"text":"impl Send for HistogramTimer","synthetic":true,"types":[]},{"text":"impl Send for Opts","synthetic":true,"types":[]},{"text":"impl Send for Registry","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for LabelPair","synthetic":true,"types":[]},{"text":"impl Send for Gauge","synthetic":true,"types":[]},{"text":"impl Send for Counter","synthetic":true,"types":[]},{"text":"impl Send for Quantile","synthetic":true,"types":[]},{"text":"impl Send for Summary","synthetic":true,"types":[]},{"text":"impl Send for Untyped","synthetic":true,"types":[]},{"text":"impl Send for Histogram","synthetic":true,"types":[]},{"text":"impl Send for Bucket","synthetic":true,"types":[]},{"text":"impl Send for Metric","synthetic":true,"types":[]},{"text":"impl Send for MetricFamily","synthetic":true,"types":[]},{"text":"impl Send for MetricType","synthetic":true,"types":[]},{"text":"impl Send for AtomicF64","synthetic":true,"types":[]},{"text":"impl Send for AtomicI64","synthetic":true,"types":[]},{"text":"impl Send for AtomicU64","synthetic":true,"types":[]},{"text":"impl&lt;T, V, D&gt; Send for AFLocalCounter&lt;T, V, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; Send for AFLocalHistogram&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for GenericCounter&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for GenericLocalCounter&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Atomic&gt;::T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for GenericLocalCounterVec&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Atomic&gt;::T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Desc","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for GenericGauge&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl Send for LocalHistogram","synthetic":true,"types":[]},{"text":"impl Send for LocalHistogramTimer","synthetic":true,"types":[]},{"text":"impl Send for LocalHistogramVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MetricVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as MetricVecBuilder&gt;::M: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as MetricVecBuilder&gt;::P: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["prost"] = [{"text":"impl Send for DecodeError","synthetic":true,"types":[]},{"text":"impl Send for EncodeError","synthetic":true,"types":[]}];
implementors["pwasm_utils"] = [{"text":"impl !Send for Module","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for RefList&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Entry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for EntryRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for DeleteTransaction&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for TargetSymbols","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for SourceTarget","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for TargetRuntime","synthetic":true,"types":[]},{"text":"impl Send for UnknownInstruction","synthetic":true,"types":[]},{"text":"impl Send for Set","synthetic":true,"types":[]},{"text":"impl Send for Metering","synthetic":true,"types":[]},{"text":"impl Send for InstructionType","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["quick_error"] = [{"text":"impl&lt;X, E&gt; Send for Context&lt;X, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["quicksink"] = [{"text":"impl&lt;S, F, T, A, E&gt; Send for SinkImpl&lt;S, F, T, A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Action&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Send for Bernoulli","synthetic":true,"types":[]},{"text":"impl Send for Open01","synthetic":true,"types":[]},{"text":"impl Send for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Send for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Binomial","synthetic":true,"types":[]},{"text":"impl Send for Cauchy","synthetic":true,"types":[]},{"text":"impl Send for Dirichlet","synthetic":true,"types":[]},{"text":"impl Send for Exp","synthetic":true,"types":[]},{"text":"impl Send for Exp1","synthetic":true,"types":[]},{"text":"impl Send for Beta","synthetic":true,"types":[]},{"text":"impl Send for ChiSquared","synthetic":true,"types":[]},{"text":"impl Send for FisherF","synthetic":true,"types":[]},{"text":"impl Send for Gamma","synthetic":true,"types":[]},{"text":"impl Send for StudentT","synthetic":true,"types":[]},{"text":"impl Send for LogNormal","synthetic":true,"types":[]},{"text":"impl Send for Normal","synthetic":true,"types":[]},{"text":"impl Send for StandardNormal","synthetic":true,"types":[]},{"text":"impl Send for Pareto","synthetic":true,"types":[]},{"text":"impl Send for Poisson","synthetic":true,"types":[]},{"text":"impl Send for Triangular","synthetic":true,"types":[]},{"text":"impl Send for UnitCircle","synthetic":true,"types":[]},{"text":"impl Send for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Send for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Send for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Standard","synthetic":true,"types":[]},{"text":"impl Send for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for EntropyRng","synthetic":true,"types":[]},{"text":"impl Send for SmallRng","synthetic":true,"types":[]},{"text":"impl Send for StdRng","synthetic":true,"types":[]},{"text":"impl !Send for ThreadRng","synthetic":true,"types":[]},{"text":"impl Send for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Send for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Send for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Send for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Send for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Send for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Send for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Send for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_hc"] = [{"text":"impl Send for Hc128Rng","synthetic":true,"types":[]},{"text":"impl Send for Hc128Core","synthetic":true,"types":[]}];
implementors["rand_isaac"] = [{"text":"impl Send for IsaacRng","synthetic":true,"types":[]},{"text":"impl Send for IsaacCore","synthetic":true,"types":[]},{"text":"impl Send for Isaac64Rng","synthetic":true,"types":[]},{"text":"impl Send for Isaac64Core","synthetic":true,"types":[]}];
implementors["rand_jitter"] = [{"text":"impl Send for JitterRng","synthetic":true,"types":[]},{"text":"impl Send for TimerError","synthetic":true,"types":[]}];
implementors["rand_os"] = [{"text":"impl Send for OsRng","synthetic":true,"types":[]}];
implementors["rand_pcg"] = [{"text":"impl Send for Lcg64Xsh32","synthetic":true,"types":[]},{"text":"impl Send for Lcg128Xsl64","synthetic":true,"types":[]},{"text":"impl Send for Mcg128Xsl64","synthetic":true,"types":[]}];
implementors["rand_xorshift"] = [{"text":"impl Send for XorShiftRng","synthetic":true,"types":[]}];
implementors["raw_cpuid"] = [{"text":"impl Send for CpuId","synthetic":true,"types":[]},{"text":"impl Send for CpuIdResult","synthetic":true,"types":[]},{"text":"impl Send for VendorInfo","synthetic":true,"types":[]},{"text":"impl Send for CacheInfoIter","synthetic":true,"types":[]},{"text":"impl Send for CacheInfo","synthetic":true,"types":[]},{"text":"impl Send for ProcessorSerial","synthetic":true,"types":[]},{"text":"impl Send for FeatureInfo","synthetic":true,"types":[]},{"text":"impl Send for CacheParametersIter","synthetic":true,"types":[]},{"text":"impl Send for CacheParameter","synthetic":true,"types":[]},{"text":"impl Send for MonitorMwaitInfo","synthetic":true,"types":[]},{"text":"impl Send for ThermalPowerInfo","synthetic":true,"types":[]},{"text":"impl Send for ExtendedFeatures","synthetic":true,"types":[]},{"text":"impl Send for DirectCacheAccessInfo","synthetic":true,"types":[]},{"text":"impl Send for PerformanceMonitoringInfo","synthetic":true,"types":[]},{"text":"impl Send for ExtendedTopologyIter","synthetic":true,"types":[]},{"text":"impl Send for ExtendedTopologyLevel","synthetic":true,"types":[]},{"text":"impl Send for ExtendedStateInfo","synthetic":true,"types":[]},{"text":"impl Send for ExtendedStateIter","synthetic":true,"types":[]},{"text":"impl Send for ExtendedState","synthetic":true,"types":[]},{"text":"impl Send for RdtMonitoringInfo","synthetic":true,"types":[]},{"text":"impl Send for L3MonitoringInfo","synthetic":true,"types":[]},{"text":"impl Send for RdtAllocationInfo","synthetic":true,"types":[]},{"text":"impl Send for L3CatInfo","synthetic":true,"types":[]},{"text":"impl Send for L2CatInfo","synthetic":true,"types":[]},{"text":"impl Send for MemBwAllocationInfo","synthetic":true,"types":[]},{"text":"impl Send for SgxInfo","synthetic":true,"types":[]},{"text":"impl Send for SgxSectionIter","synthetic":true,"types":[]},{"text":"impl Send for EpcSection","synthetic":true,"types":[]},{"text":"impl Send for ProcessorTraceInfo","synthetic":true,"types":[]},{"text":"impl Send for TscInfo","synthetic":true,"types":[]},{"text":"impl Send for ProcessorFrequencyInfo","synthetic":true,"types":[]},{"text":"impl Send for DatIter","synthetic":true,"types":[]},{"text":"impl Send for DatInfo","synthetic":true,"types":[]},{"text":"impl Send for SoCVendorInfo","synthetic":true,"types":[]},{"text":"impl Send for SoCVendorAttributesIter","synthetic":true,"types":[]},{"text":"impl Send for SoCVendorBrand","synthetic":true,"types":[]},{"text":"impl Send for HypervisorInfo","synthetic":true,"types":[]},{"text":"impl Send for ExtendedFunctionInfo","synthetic":true,"types":[]},{"text":"impl Send for MemoryEncryptionInfo","synthetic":true,"types":[]},{"text":"impl Send for CacheInfoType","synthetic":true,"types":[]},{"text":"impl Send for CacheType","synthetic":true,"types":[]},{"text":"impl Send for TopologyType","synthetic":true,"types":[]},{"text":"impl Send for SgxSectionInfo","synthetic":true,"types":[]},{"text":"impl Send for DatType","synthetic":true,"types":[]},{"text":"impl Send for Hypervisor","synthetic":true,"types":[]},{"text":"impl Send for L2Associativity","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Chain&lt;A, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Chunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Cloned&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Copied&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Enumerate&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Flatten&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for FlattenIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; Send for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Send for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Interleave&lt;I, J&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for InterleaveShortest&lt;I, J&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MaxLen&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MinLen&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; Send for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; Send for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Once&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PanicFuse&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Send for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Repeat&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RepeatN&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Rev&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Send for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; Send for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Send for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WhileSome&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Zip&lt;A, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for ZipEq&lt;A, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for StepBy&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Iter&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Chunks&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for ChunksExact&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Windows&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for ChunksExactMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Send for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Send for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for Split&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for SplitTerminator&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for Matches&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for MatchIndices&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Drain&lt;'data, T&gt;","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl Send for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Send for ThreadPool","synthetic":true,"types":[]},{"text":"impl Send for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !Send for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Configuration","synthetic":true,"types":[]},{"text":"impl !Send for FnContext","synthetic":true,"types":[]}];
implementors["regalloc"] = [{"text":"impl&lt;T&gt; Send for Set&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Reg","synthetic":true,"types":[]},{"text":"impl Send for RealReg","synthetic":true,"types":[]},{"text":"impl Send for VirtualReg","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Writable&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RealRegUniverse","synthetic":true,"types":[]},{"text":"impl Send for RegClassInfo","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RegUsageCollector&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TyIx, Ty&gt; Send for TypedIxVec&lt;TyIx, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TyIx: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Range&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for RegAllocResult&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Function&gt;::Inst: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CheckerErrors","synthetic":true,"types":[]},{"text":"impl Send for BacktrackingOptions","synthetic":true,"types":[]},{"text":"impl Send for LinearScanOptions","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for StackmapRequestInfo","synthetic":true,"types":[]},{"text":"impl Send for IRSnapshot","synthetic":true,"types":[]},{"text":"impl Send for RegClass","synthetic":true,"types":[]},{"text":"impl Send for SpillSlot","synthetic":true,"types":[]},{"text":"impl Send for BlockIx","synthetic":true,"types":[]},{"text":"impl Send for InstIx","synthetic":true,"types":[]},{"text":"impl Send for AlgorithmWithDefaults","synthetic":true,"types":[]},{"text":"impl Send for AnalysisError","synthetic":true,"types":[]},{"text":"impl Send for CheckerError","synthetic":true,"types":[]},{"text":"impl Send for RegAllocError","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Send for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSet","synthetic":true,"types":[]},{"text":"impl Send for SetMatches","synthetic":true,"types":[]},{"text":"impl Send for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Send for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Send for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for RegexSet","synthetic":true,"types":[]},{"text":"impl Send for SetMatches","synthetic":true,"types":[]},{"text":"impl Send for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_automata"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for Regex&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for DenseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for SparseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for Premultiplied&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for PremultipliedByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Send for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Span","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl Send for WithComments","synthetic":true,"types":[]},{"text":"impl Send for Comment","synthetic":true,"types":[]},{"text":"impl Send for Alternation","synthetic":true,"types":[]},{"text":"impl Send for Concat","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for ClassPerl","synthetic":true,"types":[]},{"text":"impl Send for ClassAscii","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Send for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Send for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Send for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Send for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Send for Assertion","synthetic":true,"types":[]},{"text":"impl Send for Repetition","synthetic":true,"types":[]},{"text":"impl Send for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for CaptureName","synthetic":true,"types":[]},{"text":"impl Send for SetFlags","synthetic":true,"types":[]},{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl Send for FlagsItem","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Ast","synthetic":true,"types":[]},{"text":"impl Send for LiteralKind","synthetic":true,"types":[]},{"text":"impl Send for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Send for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Send for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Send for ClassSet","synthetic":true,"types":[]},{"text":"impl Send for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Send for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Send for AssertionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Send for GroupKind","synthetic":true,"types":[]},{"text":"impl Send for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Send for Flag","synthetic":true,"types":[]},{"text":"impl Send for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for Printer","synthetic":true,"types":[]},{"text":"impl Send for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Hir","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Send for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for Repetition","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for HirKind","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for Anchor","synthetic":true,"types":[]},{"text":"impl Send for WordBoundary","synthetic":true,"types":[]},{"text":"impl Send for GroupKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Send for Literals","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for Printer","synthetic":true,"types":[]},{"text":"impl Send for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl Send for Translator","synthetic":true,"types":[]},{"text":"impl Send for Utf8Range","synthetic":true,"types":[]},{"text":"impl Send for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl Send for Utf8Sequence","synthetic":true,"types":[]}];
implementors["region"] = [{"text":"impl Send for Protection","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for LockGuard","synthetic":false,"types":[]},{"text":"impl Send for ProtectGuard","synthetic":false,"types":[]},{"text":"impl Send for Region","synthetic":false,"types":[]}];
implementors["ring"] = [{"text":"impl Send for TestCase","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for File&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Nonce","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for OpeningKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for SealingKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Aad&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UnboundKey","synthetic":true,"types":[]},{"text":"impl Send for LessSafeKey","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for SealingKey","synthetic":true,"types":[]},{"text":"impl Send for OpeningKey","synthetic":true,"types":[]},{"text":"impl Send for HeaderProtectionKey","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for EphemeralPrivateKey","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Positive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Context","synthetic":true,"types":[]},{"text":"impl Send for Digest","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Ed25519KeyPair","synthetic":true,"types":[]},{"text":"impl Send for EdDSAParameters","synthetic":true,"types":[]},{"text":"impl Send for EcdsaSigningAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for EcdsaKeyPair","synthetic":true,"types":[]},{"text":"impl Send for EcdsaVerificationAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for Unspecified","synthetic":true,"types":[]},{"text":"impl Send for KeyRejected","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Salt","synthetic":true,"types":[]},{"text":"impl Send for Prk","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Send for Okm&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl Send for Context","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Document","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Random&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SystemRandom","synthetic":true,"types":[]},{"text":"impl Send for RsaParameters","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for RsaPublicKeyComponents&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RsaKeyPair","synthetic":true,"types":[]},{"text":"impl Send for RsaSubjectPublicKey","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rocksdb"] = [{"text":"impl Send for ColumnFamilyDescriptor","synthetic":true,"types":[]},{"text":"impl Send for LiveFile","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DBIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for DBWALIterator","synthetic":true,"types":[]},{"text":"impl !Send for Cache","synthetic":true,"types":[]},{"text":"impl !Send for CompactOptions","synthetic":true,"types":[]},{"text":"impl !Send for DBPath","synthetic":true,"types":[]},{"text":"impl !Send for Env","synthetic":true,"types":[]},{"text":"impl !Send for FifoCompactOptions","synthetic":true,"types":[]},{"text":"impl !Send for FlushOptions","synthetic":true,"types":[]},{"text":"impl Send for PlainTableFactoryOptions","synthetic":true,"types":[]},{"text":"impl !Send for UniversalCompactOptions","synthetic":true,"types":[]},{"text":"impl !Send for SliceTransform","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Direction","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IteratorMode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BlockBasedIndexType","synthetic":true,"types":[]},{"text":"impl Send for BottommostLevelCompaction","synthetic":true,"types":[]},{"text":"impl Send for DBCompactionStyle","synthetic":true,"types":[]},{"text":"impl Send for DBCompressionType","synthetic":true,"types":[]},{"text":"impl Send for DBRecoveryMode","synthetic":true,"types":[]},{"text":"impl Send for DataBlockIndexType","synthetic":true,"types":[]},{"text":"impl Send for MemtableFactory","synthetic":true,"types":[]},{"text":"impl Send for UniversalCompactionStopStyle","synthetic":true,"types":[]},{"text":"impl Send for BackupEngineInfo","synthetic":true,"types":[]},{"text":"impl !Send for BackupEngine","synthetic":true,"types":[]},{"text":"impl !Send for BackupEngineOptions","synthetic":true,"types":[]},{"text":"impl !Send for RestoreOptions","synthetic":true,"types":[]},{"text":"impl !Send for Checkpoint","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for CompactionFilterCallback&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Decision","synthetic":true,"types":[]},{"text":"impl Send for CompactionFilterContext","synthetic":true,"types":[]},{"text":"impl Send for MergeOperatorCallback","synthetic":true,"types":[]},{"text":"impl !Send for MergeOperands","synthetic":true,"types":[]},{"text":"impl !Send for PerfContext","synthetic":true,"types":[]},{"text":"impl Send for MemoryUsageStats","synthetic":true,"types":[]},{"text":"impl Send for PerfStatsLevel","synthetic":true,"types":[]},{"text":"impl Send for PerfMetric","synthetic":true,"types":[]},{"text":"impl Send for ColumnFamily","synthetic":false,"types":[]},{"text":"impl Send for DB","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for DBRawIterator&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Send for Options","synthetic":false,"types":[]},{"text":"impl Send for WriteOptions","synthetic":false,"types":[]},{"text":"impl Send for BlockBasedOptions","synthetic":false,"types":[]},{"text":"impl Send for ReadOptions","synthetic":false,"types":[]},{"text":"impl Send for IngestExternalFileOptions","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for DBPinnableSlice&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for Snapshot&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for SstFileWriter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Send for WriteBatch","synthetic":false,"types":[]}];
implementors["rustc_demangle"] = [{"text":"impl&lt;'a&gt; Send for Demangle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for TryDemangleError","synthetic":true,"types":[]}];
implementors["rustc_hash"] = [{"text":"impl Send for FxHasher","synthetic":true,"types":[]}];
implementors["rustc_hex"] = [{"text":"impl&lt;T&gt; Send for ToHexIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FromHexIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FromHexError","synthetic":true,"types":[]}];
implementors["rustls"] = [{"text":"impl&lt;'a, S:&nbsp;?Sized, T:&nbsp;?Sized&gt; Send for Stream&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Send for StreamOwned&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RootCertStore","synthetic":true,"types":[]},{"text":"impl Send for NoClientSessionStorage","synthetic":true,"types":[]},{"text":"impl Send for ClientSessionMemoryCache","synthetic":true,"types":[]},{"text":"impl Send for ClientConfig","synthetic":true,"types":[]},{"text":"impl Send for ClientSession","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WriteEarlyData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for NoServerSessionStorage","synthetic":true,"types":[]},{"text":"impl Send for ServerSessionMemoryCache","synthetic":true,"types":[]},{"text":"impl Send for ServerConfig","synthetic":true,"types":[]},{"text":"impl Send for ServerSession","synthetic":true,"types":[]},{"text":"impl Send for ResolvesServerCertUsingSNI","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClientHello&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Ticketer","synthetic":true,"types":[]},{"text":"impl Send for NoClientAuth","synthetic":true,"types":[]},{"text":"impl Send for AllowAnyAuthenticatedClient","synthetic":true,"types":[]},{"text":"impl Send for AllowAnyAnonymousOrAuthenticatedClient","synthetic":true,"types":[]},{"text":"impl Send for SupportedCipherSuite","synthetic":true,"types":[]},{"text":"impl Send for Certificate","synthetic":true,"types":[]},{"text":"impl Send for PrivateKey","synthetic":true,"types":[]},{"text":"impl Send for NoKeyLog","synthetic":true,"types":[]},{"text":"impl Send for KeyLogFile","synthetic":true,"types":[]},{"text":"impl Send for ProtocolVersion","synthetic":true,"types":[]},{"text":"impl Send for SignatureScheme","synthetic":true,"types":[]},{"text":"impl Send for CipherSuite","synthetic":true,"types":[]},{"text":"impl Send for TLSError","synthetic":true,"types":[]},{"text":"impl Send for BulkAlgorithm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Reader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for u24","synthetic":true,"types":[]},{"text":"impl Send for Payload","synthetic":true,"types":[]},{"text":"impl Send for PayloadU24","synthetic":true,"types":[]},{"text":"impl Send for PayloadU16","synthetic":true,"types":[]},{"text":"impl Send for PayloadU8","synthetic":true,"types":[]},{"text":"impl Send for HashAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for SignatureAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for ClientCertificateType","synthetic":true,"types":[]},{"text":"impl Send for Compression","synthetic":true,"types":[]},{"text":"impl Send for ContentType","synthetic":true,"types":[]},{"text":"impl Send for HandshakeType","synthetic":true,"types":[]},{"text":"impl Send for AlertLevel","synthetic":true,"types":[]},{"text":"impl Send for AlertDescription","synthetic":true,"types":[]},{"text":"impl Send for HeartbeatMessageType","synthetic":true,"types":[]},{"text":"impl Send for ExtensionType","synthetic":true,"types":[]},{"text":"impl Send for ServerNameType","synthetic":true,"types":[]},{"text":"impl Send for NamedCurve","synthetic":true,"types":[]},{"text":"impl Send for NamedGroup","synthetic":true,"types":[]},{"text":"impl Send for ECPointFormat","synthetic":true,"types":[]},{"text":"impl Send for HeartbeatMode","synthetic":true,"types":[]},{"text":"impl Send for ECCurveType","synthetic":true,"types":[]},{"text":"impl Send for PSKKeyExchangeMode","synthetic":true,"types":[]},{"text":"impl Send for KeyUpdateRequest","synthetic":true,"types":[]},{"text":"impl Send for CertificateStatusType","synthetic":true,"types":[]},{"text":"impl Send for AlertMessagePayload","synthetic":true,"types":[]},{"text":"impl Send for Random","synthetic":true,"types":[]},{"text":"impl Send for SessionID","synthetic":true,"types":[]},{"text":"impl Send for UnknownExtension","synthetic":true,"types":[]},{"text":"impl Send for ServerName","synthetic":true,"types":[]},{"text":"impl Send for KeyShareEntry","synthetic":true,"types":[]},{"text":"impl Send for PresharedKeyIdentity","synthetic":true,"types":[]},{"text":"impl Send for PresharedKeyOffer","synthetic":true,"types":[]},{"text":"impl Send for OCSPCertificateStatusRequest","synthetic":true,"types":[]},{"text":"impl Send for ClientHelloPayload","synthetic":true,"types":[]},{"text":"impl Send for HelloRetryRequest","synthetic":true,"types":[]},{"text":"impl Send for ServerHelloPayload","synthetic":true,"types":[]},{"text":"impl Send for CertificateEntry","synthetic":true,"types":[]},{"text":"impl Send for CertificatePayloadTLS13","synthetic":true,"types":[]},{"text":"impl Send for ECParameters","synthetic":true,"types":[]},{"text":"impl Send for DigitallySignedStruct","synthetic":true,"types":[]},{"text":"impl Send for ClientECDHParams","synthetic":true,"types":[]},{"text":"impl Send for ServerECDHParams","synthetic":true,"types":[]},{"text":"impl Send for ECDHEServerKeyExchange","synthetic":true,"types":[]},{"text":"impl Send for CertificateRequestPayload","synthetic":true,"types":[]},{"text":"impl Send for CertificateRequestPayloadTLS13","synthetic":true,"types":[]},{"text":"impl Send for NewSessionTicketPayload","synthetic":true,"types":[]},{"text":"impl Send for NewSessionTicketPayloadTLS13","synthetic":true,"types":[]},{"text":"impl Send for CertificateStatus","synthetic":true,"types":[]},{"text":"impl Send for HandshakeMessagePayload","synthetic":true,"types":[]},{"text":"impl Send for ServerNamePayload","synthetic":true,"types":[]},{"text":"impl Send for CertificateStatusRequest","synthetic":true,"types":[]},{"text":"impl Send for ClientExtension","synthetic":true,"types":[]},{"text":"impl Send for ServerExtension","synthetic":true,"types":[]},{"text":"impl Send for HelloRetryExtension","synthetic":true,"types":[]},{"text":"impl Send for CertificateExtension","synthetic":true,"types":[]},{"text":"impl Send for KeyExchangeAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for ServerKeyExchangePayload","synthetic":true,"types":[]},{"text":"impl Send for CertReqExtension","synthetic":true,"types":[]},{"text":"impl Send for NewSessionTicketExtension","synthetic":true,"types":[]},{"text":"impl Send for HandshakePayload","synthetic":true,"types":[]},{"text":"impl Send for ChangeCipherSpecPayload","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BorrowMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for MessagePayload","synthetic":true,"types":[]},{"text":"impl Send for MessageError","synthetic":true,"types":[]},{"text":"impl Send for ClientSessionKey","synthetic":true,"types":[]},{"text":"impl Send for ClientSessionValue","synthetic":true,"types":[]},{"text":"impl Send for ServerSessionValue","synthetic":true,"types":[]},{"text":"impl Send for MessageDeframer","synthetic":true,"types":[]},{"text":"impl Send for MessageFragmenter","synthetic":true,"types":[]},{"text":"impl Send for HandshakeJoiner","synthetic":true,"types":[]},{"text":"impl Send for CertifiedKey","synthetic":true,"types":[]},{"text":"impl Send for RSASigningKey","synthetic":true,"types":[]}];
implementors["rw_stream_sink"] = [{"text":"impl&lt;S&gt; Send for RwStreamSink&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Send for Buffer","synthetic":true,"types":[]}];
implementors["salsa20"] = [{"text":"impl Send for XSalsa20","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Salsa&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_basic_authorship"] = [{"text":"impl&lt;A, B, C&gt; Send for ProposerFactory&lt;A, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, Block, C, A&gt; Send for Proposer&lt;B, Block, C, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_block_builder"] = [{"text":"impl&lt;Block, StateBackend&gt; Send for BuiltBlock&lt;Block, StateBackend&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;StateBackend as Backend&lt;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing&gt;&gt;::Transaction: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Block, A, B&gt; Send for BlockBuilder&lt;'a, Block, A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as ProvideRuntimeApi&lt;Block&gt;&gt;::Api: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Extrinsic: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_chain_spec"] = [{"text":"impl&lt;G, E&gt; Send for ChainSpec&lt;G, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for LightSyncState&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SerializableLightSyncState","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber, T&gt; Send for Forks&lt;BlockNumber, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Group&gt;::Fork: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_cli"] = [{"text":"impl Send for BuildSpecCmd","synthetic":true,"types":[]},{"text":"impl Send for BuildSyncSpecCmd","synthetic":true,"types":[]},{"text":"impl Send for CheckBlockCmd","synthetic":true,"types":[]},{"text":"impl Send for ExportBlocksCmd","synthetic":true,"types":[]},{"text":"impl Send for ExportStateCmd","synthetic":true,"types":[]},{"text":"impl Send for ImportBlocksCmd","synthetic":true,"types":[]},{"text":"impl Send for PurgeChainCmd","synthetic":true,"types":[]},{"text":"impl Send for SignCmd","synthetic":true,"types":[]},{"text":"impl Send for GenerateCmd","synthetic":true,"types":[]},{"text":"impl Send for InsertCmd","synthetic":true,"types":[]},{"text":"impl Send for InspectKeyCmd","synthetic":true,"types":[]},{"text":"impl Send for GenerateNodeKeyCmd","synthetic":true,"types":[]},{"text":"impl Send for InspectNodeKeyCmd","synthetic":true,"types":[]},{"text":"impl Send for VanityCmd","synthetic":true,"types":[]},{"text":"impl Send for VerifyCmd","synthetic":true,"types":[]},{"text":"impl Send for RevertCmd","synthetic":true,"types":[]},{"text":"impl Send for RunCmd","synthetic":true,"types":[]},{"text":"impl Send for DatabaseParams","synthetic":true,"types":[]},{"text":"impl Send for ImportParams","synthetic":true,"types":[]},{"text":"impl Send for ExecutionStrategiesParams","synthetic":true,"types":[]},{"text":"impl Send for KeystoreParams","synthetic":true,"types":[]},{"text":"impl Send for NetworkParams","synthetic":true,"types":[]},{"text":"impl Send for NodeKeyParams","synthetic":true,"types":[]},{"text":"impl Send for OffchainWorkerParams","synthetic":true,"types":[]},{"text":"impl Send for PruningParams","synthetic":true,"types":[]},{"text":"impl Send for SharedParams","synthetic":true,"types":[]},{"text":"impl Send for TransactionPoolParams","synthetic":true,"types":[]},{"text":"impl Send for GenericNumber","synthetic":true,"types":[]},{"text":"impl Send for BlockNumberOrHash","synthetic":true,"types":[]},{"text":"impl Send for CryptoSchemeFlag","synthetic":true,"types":[]},{"text":"impl Send for OutputTypeFlag","synthetic":true,"types":[]},{"text":"impl Send for NetworkSchemeFlag","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for Runner&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for KeySubcommand","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for WasmExecutionMethod","synthetic":true,"types":[]},{"text":"impl Send for TracingReceiver","synthetic":true,"types":[]},{"text":"impl Send for NodeKeyType","synthetic":true,"types":[]},{"text":"impl Send for CryptoScheme","synthetic":true,"types":[]},{"text":"impl Send for OutputType","synthetic":true,"types":[]},{"text":"impl Send for ExecutionStrategy","synthetic":true,"types":[]},{"text":"impl Send for RpcMethods","synthetic":true,"types":[]},{"text":"impl Send for Database","synthetic":true,"types":[]},{"text":"impl Send for OffchainWorkerEnabled","synthetic":true,"types":[]}];
implementors["sc_client_api"] = [{"text":"impl&lt;Block&gt; Send for ImportSummary&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block, B&gt; Send for ClientImportOperation&lt;Block, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&lt;Block&gt;&gt;::BlockImportOperation: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, State, Block&gt; Send for KeyIterator&lt;'a, State, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;State: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NewBlockState","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for ClientInfo&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MemorySize","synthetic":true,"types":[]},{"text":"impl Send for StateDbMemoryInfo","synthetic":true,"types":[]},{"text":"impl Send for MemoryInfo","synthetic":true,"types":[]},{"text":"impl Send for IoInfo","synthetic":true,"types":[]},{"text":"impl Send for UsageInfo","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for BlockImportNotification&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for FinalityNotification&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ExecutionStrategies","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for ExecutionExtensions&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for Blockchain&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header + Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for BlockImportOperation&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Codec + Ord + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for Backend&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header + Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; Send for RemoteCallRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; Send for RemoteHeaderRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; Send for RemoteReadRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; Send for RemoteReadChildRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; Send for RemoteChangesRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; Send for ChangesProof&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; Send for RemoteBodyRequest&lt;Header&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Data, Request&gt; Send for LocalOrRemote&lt;Data, Request&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Data: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Request: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Send for ImportDisplaced&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Send for FinalizationDisplaced&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Send for LeafSet&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, N&gt; Send for Undo&lt;'a, H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StorageChangeSet","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for StorageNotifications&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_client_db"] = [{"text":"impl&lt;Block&gt; Send for RefTrackingState&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DatabaseSettings","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for BlockchainDb&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for BlockImportOperation&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Extrinsic: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for Backend&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DatabaseSettingsSrc","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for LightStorage&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for LocalStorage","synthetic":true,"types":[]},{"text":"impl Send for KeyTracker","synthetic":true,"types":[]},{"text":"impl Send for ReadWriteTracker","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for BenchmarkingState&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Hashing: Hasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_consensus"] = [{"text":"impl&lt;B, Block&gt; Send for LongestChain&lt;B, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_consensus_aura"] = [{"text":"impl&lt;C, P, CAW&gt; Send for AuraVerifier&lt;C, P, CAW&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;CAW: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block, C, I, P&gt; Send for AuraBlockImport&lt;Block, C, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_consensus_slots"] = [{"text":"impl Send for SignedDuration","synthetic":true,"types":[]},{"text":"impl Send for SlotInfo","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SlotDuration&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, S&gt; Send for CheckedHeader&lt;H, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_executor"] = [{"text":"impl&lt;D&gt; Send for NativeExecutor&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for WasmExecutor","synthetic":true,"types":[]},{"text":"impl Send for WasmExecutionMethod","synthetic":true,"types":[]}];
implementors["sc_executor_common"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for WasmError","synthetic":true,"types":[]},{"text":"impl Send for SupervisorFuncIndex","synthetic":true,"types":[]},{"text":"impl&lt;'a, FE&gt; !Send for GuestExternals&lt;'a, FE&gt;","synthetic":true,"types":[]},{"text":"impl&lt;FR&gt; !Send for SandboxInstance&lt;FR&gt;","synthetic":true,"types":[]},{"text":"impl !Send for GuestEnvironment","synthetic":true,"types":[]},{"text":"impl&lt;FR&gt; !Send for UnregisteredInstance&lt;FR&gt;","synthetic":true,"types":[]},{"text":"impl&lt;FR&gt; !Send for Store&lt;FR&gt;","synthetic":true,"types":[]},{"text":"impl Send for InstantiationError","synthetic":true,"types":[]},{"text":"impl Send for WasmModuleInfo","synthetic":true,"types":[]},{"text":"impl Send for DataSegmentsSnapshot","synthetic":true,"types":[]}];
implementors["sc_executor_wasmi"] = [{"text":"impl Send for WasmiRuntime","synthetic":true,"types":[]},{"text":"impl Send for WasmiInstance","synthetic":false,"types":[]}];
implementors["sc_finality_grandpa"] = [{"text":"impl&lt;H, N&gt; Send for SharedAuthoritySet&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; Send for FinalityProofFragment&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, Block&gt; Send for FinalityProofProvider&lt;B, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for GrandpaJustificationSender&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for GrandpaJustificationStream&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Backend, Block, Client, SC&gt; Send for GrandpaBlockImport&lt;Backend, Block, Client, SC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Backend: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Client: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;SC: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for GrandpaJustification&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;BE, Block, Client&gt; Send for GrandpaLightBlockImport&lt;BE, Block, Client&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BE: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Client: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for BeforeBestBlockBy&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ThreeQuartersOfTheUnfinalizedChain","synthetic":true,"types":[]},{"text":"impl&lt;Block, B&gt; Send for VotingRulesBuilder&lt;Block, B&gt;","synthetic":true,"types":[]},{"text":"impl Send for SharedVoterState","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl&lt;Block, C, SC&gt; Send for LinkHalf&lt;Block, C, SC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;SC: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block, C, N, SC, VR&gt; Send for GrandpaParams&lt;Block, C, N, SC, VR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;SC: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;VR: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["sc_informant"] = [{"text":"impl Send for OutputFormat","synthetic":true,"types":[]}];
implementors["sc_keystore"] = [{"text":"impl Send for Store","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["sc_light"] = [{"text":"impl&lt;S, H&gt; Send for Backend&lt;S, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block, S&gt; Send for ImportOperation&lt;Block, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for GenesisOrUnavailableState&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Blockchain&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, L&gt; Send for GenesisCallExecutor&lt;B, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, H, B, S&gt; Send for LightDataChecker&lt;E, H, B, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_network"] = [{"text":"impl&lt;B&gt; Send for PeerInfo&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, H&gt; Send for NetworkService&lt;B, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, H&gt; Send for NetworkWorker&lt;B, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Extrinsic: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Header: Header + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NotificationSender","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for NotificationSenderReady&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for NetworkStatus&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DhtEvent","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ObservedRole","synthetic":true,"types":[]},{"text":"impl Send for SyncState","synthetic":true,"types":[]},{"text":"impl Send for RequestFailure","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for OnDemand&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Extrinsic: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Header: Header + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AlwaysBadChecker","synthetic":true,"types":[]},{"text":"impl Send for ProtocolConfig","synthetic":true,"types":[]},{"text":"impl Send for IncomingRequest","synthetic":true,"types":[]},{"text":"impl&lt;B, H&gt; Send for Params&lt;B, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Extrinsic: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Header: Header + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DummyFinalityProofRequestBuilder","synthetic":true,"types":[]},{"text":"impl Send for EmptyTransactionPool","synthetic":true,"types":[]},{"text":"impl Send for ProtocolId","synthetic":true,"types":[]},{"text":"impl Send for MultiaddrWithPeerId","synthetic":true,"types":[]},{"text":"impl Send for NetworkConfiguration","synthetic":true,"types":[]},{"text":"impl Send for Role","synthetic":true,"types":[]},{"text":"impl Send for TransactionImport","synthetic":true,"types":[]},{"text":"impl Send for ParseErr","synthetic":true,"types":[]},{"text":"impl Send for TransportConfig","synthetic":true,"types":[]},{"text":"impl Send for NonReservedPeerMode","synthetic":true,"types":[]},{"text":"impl Send for NodeKeyConfig","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for Secret&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for QueuedSender&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, M&gt; Send for QueueGuard&lt;'a, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NetworkState","synthetic":true,"types":[]},{"text":"impl Send for Peer","synthetic":true,"types":[]},{"text":"impl Send for NotConnectedPeer","synthetic":true,"types":[]},{"text":"impl Send for PeerEndpoint","synthetic":true,"types":[]}];
implementors["sc_network_gossip"] = [{"text":"impl&lt;B&gt; Send for GossipEngine&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TopicNotification","synthetic":true,"types":[]},{"text":"impl Send for DiscardAll","synthetic":true,"types":[]},{"text":"impl Send for MessageIntent","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for ValidationResult&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_offchain"] = [{"text":"impl&lt;Client, Storage, Block&gt; Send for OffchainWorkers&lt;Client, Storage, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Client: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Storage: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_peerset"] = [{"text":"impl Send for ReputationChange","synthetic":true,"types":[]},{"text":"impl Send for PeersetHandle","synthetic":true,"types":[]},{"text":"impl Send for IncomingIndex","synthetic":true,"types":[]},{"text":"impl Send for PeersetConfig","synthetic":true,"types":[]},{"text":"impl Send for Peerset","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]}];
implementors["sc_proposer_metrics"] = [{"text":"impl Send for MetricsLink","synthetic":true,"types":[]},{"text":"impl Send for Metrics","synthetic":true,"types":[]}];
implementors["sc_rpc"] = [{"text":"impl Send for SubscriptionTaskExecutor","synthetic":true,"types":[]},{"text":"impl&lt;P, Client&gt; Send for Author&lt;P, Client&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Client: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block, Client&gt; Send for Chain&lt;Block, Client&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Offchain&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, Client&gt; Send for State&lt;Block, Client&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, Client&gt; Send for ChildState&lt;Block, Client&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for System&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Request&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_rpc_api"] = [{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Metadata","synthetic":true,"types":[]},{"text":"impl Send for DenyUnsafe","synthetic":true,"types":[]},{"text":"impl&lt;Hash, BlockHash&gt; Send for Client&lt;Hash, BlockHash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockHash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; Send for ExtrinsicOrHash&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Number, Hash, Header, SignedBlock&gt; Send for Client&lt;Number, Hash, Header, SignedBlock&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;SignedBlock: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Client","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; Send for Client&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; Send for ReadProof&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; Send for Client&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number&gt; Send for Client&lt;Hash, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for SystemInfo","synthetic":true,"types":[]},{"text":"impl Send for Health","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number&gt; Send for PeerInfo&lt;Hash, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NodeRole","synthetic":true,"types":[]}];
implementors["sc_rpc_server"] = [{"text":"impl Send for RpcMiddleware","synthetic":true,"types":[]},{"text":"impl Send for RpcMetrics","synthetic":true,"types":[]}];
implementors["sc_service"] = [{"text":"impl&lt;'a, TBl, TExPool, TImpQu, TCl&gt; !Send for BuildNetworkParams&lt;'a, TBl, TExPool, TImpQu, TCl&gt;","synthetic":true,"types":[]},{"text":"impl Send for NetworkStarter","synthetic":true,"types":[]},{"text":"impl&lt;'a, TBl, TCl, TExPool, TRpc, Backend&gt; Send for SpawnTasksParams&lt;'a, TBl, TCl, TExPool, TRpc, Backend&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Backend: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TCl: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TExPool: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TBl as Block&gt;::Extrinsic: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TBl as Block&gt;::Hash: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TBl as Block&gt;::Header: Header + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;TBl as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for NoopRpcExtensionBuilder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SpawnTaskHandle","synthetic":true,"types":[]},{"text":"impl Send for TaskManager","synthetic":true,"types":[]},{"text":"impl Send for RpcHandlers","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for NetworkStatusSinks&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TelemetryConnectionSinks","synthetic":true,"types":[]},{"text":"impl&lt;Client, Backend, SelectChain, ImportQueue, TransactionPool, Other&gt; Send for PartialComponents&lt;Client, Backend, SelectChain, ImportQueue, TransactionPool, Other&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Backend: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Client: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ImportQueue: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Other: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;SelectChain: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TransactionPool: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RpcSession","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; Send for TransactionPoolAdapter&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Configuration","synthetic":true,"types":[]},{"text":"impl Send for OffchainWorkerConfig","synthetic":true,"types":[]},{"text":"impl Send for PrometheusConfig","synthetic":true,"types":[]},{"text":"impl Send for TaskExecutor","synthetic":true,"types":[]},{"text":"impl Send for TaskType","synthetic":true,"types":[]},{"text":"impl Send for KeystoreConfig","synthetic":true,"types":[]},{"text":"impl Send for RpcMethods","synthetic":true,"types":[]},{"text":"impl Send for BasePath","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["sc_state_db"] = [{"text":"impl&lt;H&gt; Send for ChangeSet&lt;H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for CommitSet&lt;H&gt;","synthetic":true,"types":[]},{"text":"impl Send for Constraints","synthetic":true,"types":[]},{"text":"impl&lt;BlockHash, Key&gt; Send for StateDb&lt;BlockHash, Key&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Error&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PinError","synthetic":true,"types":[]},{"text":"impl Send for PruningMode","synthetic":true,"types":[]}];
implementors["sc_telemetry"] = [{"text":"impl Send for TelemetryConfig","synthetic":true,"types":[]},{"text":"impl Send for TelemetryEndpoints","synthetic":true,"types":[]},{"text":"impl Send for Telemetry","synthetic":true,"types":[]},{"text":"impl Send for TelemetryEvent","synthetic":true,"types":[]}];
implementors["sc_tracing"] = [{"text":"impl Send for ProfilingLayer","synthetic":true,"types":[]},{"text":"impl Send for TraceEvent","synthetic":true,"types":[]},{"text":"impl Send for SpanDatum","synthetic":true,"types":[]},{"text":"impl Send for Values","synthetic":true,"types":[]},{"text":"impl Send for LogTraceHandler","synthetic":true,"types":[]},{"text":"impl Send for TelemetryTraceHandler","synthetic":true,"types":[]},{"text":"impl Send for TracingReceiver","synthetic":true,"types":[]}];
implementors["sc_transaction_graph"] = [{"text":"impl&lt;B&gt; Send for Pool&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as ChainApi&gt;::Block: Block,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as ChainApi&gt;::Block as Block&gt;::Extrinsic: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as ChainApi&gt;::Block as Block&gt;::Hash: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Ex, Error&gt; Send for ValidatedTransaction&lt;Hash, Ex, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Ex&gt; Send for PruneStatus&lt;Hash, Ex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Extrinsic&gt; Send for Transaction&lt;Hash, Extrinsic&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Extrinsic: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Ex&gt; Send for BasePool&lt;Hash, Ex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Limit","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Ex&gt; Send for Imported&lt;Hash, Ex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, BH&gt; Send for Watcher&lt;H, BH&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BH: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, BH&gt; Send for Sender&lt;H, BH&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BH: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_transaction_pool"] = [{"text":"impl&lt;Client, Block&gt; Send for FullChainApi&lt;Client, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Client: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Client, F, Block&gt; Send for LightChainApi&lt;Client, F, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Client: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PoolApi, Block&gt; Send for BasicPool&lt;PoolApi, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Extrinsic: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RevalidationType","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["schnorrkel"] = [{"text":"impl Send for RistrettoBoth","synthetic":true,"types":[]},{"text":"impl Send for MiniSecretKey","synthetic":true,"types":[]},{"text":"impl Send for SecretKey","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl Send for Keypair","synthetic":true,"types":[]},{"text":"impl Send for ExpansionMode","synthetic":true,"types":[]},{"text":"impl Send for SigningContext","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for XoFTranscript&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, R&gt; Send for SigningTranscriptWithRng&lt;T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Malleable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for VRFOutput","synthetic":true,"types":[]},{"text":"impl Send for VRFInOut","synthetic":true,"types":[]},{"text":"impl Send for VRFProof","synthetic":true,"types":[]},{"text":"impl Send for VRFProofBatchable","synthetic":true,"types":[]},{"text":"impl Send for ChainCode","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for ExtendedKey&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ECQVCertSecret","synthetic":true,"types":[]},{"text":"impl Send for ECQVCertPublic","synthetic":true,"types":[]},{"text":"impl Send for MultiSignatureStage","synthetic":true,"types":[]},{"text":"impl Send for SignatureError","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Send for AggregatePublicKeySlice&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Commitment","synthetic":true,"types":[]},{"text":"impl Send for Reveal","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for MuSig&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for CommitStage&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for RevealStage&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CosignStage","synthetic":true,"types":[]},{"text":"impl Send for Cosignature","synthetic":true,"types":[]},{"text":"impl Send for CollectStage","synthetic":true,"types":[]}];
implementors["scoped_tls"] = [{"text":"impl&lt;T&gt; Send for ScopedKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Send for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Always","synthetic":true,"types":[]}];
implementors["scroll"] = [{"text":"impl Send for Uleb128","synthetic":true,"types":[]},{"text":"impl Send for Sleb128","synthetic":true,"types":[]},{"text":"impl Send for Endian","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for StrCtx","synthetic":true,"types":[]}];
implementors["sct"] = [{"text":"impl&lt;'a&gt; Send for Log&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["secp256k1"] = [{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl Send for SecretKey","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl Send for RecoveryId","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for SharedSecret&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Digest&gt;::OutputSize: ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for PublicKeyFormat","synthetic":true,"types":[]},{"text":"impl Send for Field","synthetic":true,"types":[]},{"text":"impl Send for Affine","synthetic":true,"types":[]},{"text":"impl Send for Jacobian","synthetic":true,"types":[]},{"text":"impl Send for AffineStorage","synthetic":true,"types":[]},{"text":"impl Send for Scalar","synthetic":true,"types":[]},{"text":"impl Send for ECMultContext","synthetic":true,"types":[]},{"text":"impl Send for ECMultGenContext","synthetic":true,"types":[]},{"text":"impl Send for SignatureArray","synthetic":true,"types":[]}];
implementors["secrecy"] = [{"text":"impl&lt;S&gt; Send for Secret&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Send for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Send for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Send for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Send for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; Send for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Send for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Send for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Number","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CharEscape","synthetic":true,"types":[]},{"text":"impl Send for Serializer","synthetic":true,"types":[]}];
implementors["sha1"] = [{"text":"impl Send for Sha1","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl Send for Sha224","synthetic":true,"types":[]},{"text":"impl Send for Sha256","synthetic":true,"types":[]},{"text":"impl Send for Sha384","synthetic":true,"types":[]},{"text":"impl Send for Sha512","synthetic":true,"types":[]},{"text":"impl Send for Sha512Trunc224","synthetic":true,"types":[]},{"text":"impl Send for Sha512Trunc256","synthetic":true,"types":[]}];
implementors["sha3"] = [{"text":"impl Send for Sha3XofReader","synthetic":true,"types":[]},{"text":"impl Send for Keccak224","synthetic":true,"types":[]},{"text":"impl Send for Keccak256","synthetic":true,"types":[]},{"text":"impl Send for Keccak384","synthetic":true,"types":[]},{"text":"impl Send for Keccak512","synthetic":true,"types":[]},{"text":"impl Send for Keccak256Full","synthetic":true,"types":[]},{"text":"impl Send for Sha3_224","synthetic":true,"types":[]},{"text":"impl Send for Sha3_256","synthetic":true,"types":[]},{"text":"impl Send for Sha3_384","synthetic":true,"types":[]},{"text":"impl Send for Sha3_512","synthetic":true,"types":[]},{"text":"impl Send for Shake128","synthetic":true,"types":[]},{"text":"impl Send for Shake256","synthetic":true,"types":[]}];
implementors["sharded_slab"] = [{"text":"impl Send for DefaultConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, C&nbsp;=&nbsp;DefaultConfig&gt; !Send for Entry&lt;'a, T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, C&nbsp;=&nbsp;DefaultConfig&gt; !Send for VacantEntry&lt;'a, T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, C&nbsp;=&nbsp;DefaultConfig&gt; !Send for Ref&lt;'a, T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, C&nbsp;=&nbsp;DefaultConfig&gt; !Send for RefMut&lt;'a, T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, C&gt; Send for Pool&lt;T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Clear + Default,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Config,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, C&gt; Send for OwnedRef&lt;T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync + Clear + Default,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Config,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, C&gt; Send for OwnedRefMut&lt;T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync + Clear + Default,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Config,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send, C:&nbsp;Config&gt; Send for Slab&lt;T, C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, C&gt; Send for OwnedEntry&lt;T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Config,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl Send for SigId","synthetic":true,"types":[]}];
implementors["signature"] = [{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; Send for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slog"] = [{"text":"impl&lt;D&gt; Send for Logger&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl Send for Discard","synthetic":true,"types":[]},{"text":"impl&lt;D, F&gt; Send for Filter&lt;D, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for LevelFilter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, E&gt; Send for MapError&lt;D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D1, D2&gt; Send for Duplicate&lt;D1, D2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;D2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for Fuse&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for IgnoreResult&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RecordStatic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V, F&gt; Send for FnValue&lt;V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for PushFnValueSerializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PushFnValue&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ErrorValue&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for SingleKV&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for OwnedKV&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for BorrowedKV&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedKVList","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for MutexDrainError&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Drain&gt;::Err: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for FilterLevel","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["slog_json"] = [{"text":"impl&lt;W&gt; Send for Json&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for JsonBuilder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slog_scope"] = [{"text":"impl Send for GlobalLoggerGuard","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Send for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["snow"] = [{"text":"impl&lt;'builder&gt; Send for Builder&lt;'builder&gt;","synthetic":true,"types":[]},{"text":"impl Send for Keypair","synthetic":true,"types":[]},{"text":"impl Send for HandshakeState","synthetic":true,"types":[]},{"text":"impl Send for StatelessTransportState","synthetic":true,"types":[]},{"text":"impl Send for TransportState","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for PatternProblem","synthetic":true,"types":[]},{"text":"impl Send for InitStage","synthetic":true,"types":[]},{"text":"impl Send for Prerequisite","synthetic":true,"types":[]},{"text":"impl Send for StateProblem","synthetic":true,"types":[]},{"text":"impl Send for HandshakeChoice","synthetic":true,"types":[]},{"text":"impl Send for NoiseParams","synthetic":true,"types":[]},{"text":"impl Send for HandshakeModifier","synthetic":true,"types":[]},{"text":"impl Send for HandshakePattern","synthetic":true,"types":[]},{"text":"impl Send for BaseChoice","synthetic":true,"types":[]},{"text":"impl Send for DHChoice","synthetic":true,"types":[]},{"text":"impl Send for CipherChoice","synthetic":true,"types":[]},{"text":"impl Send for HashChoice","synthetic":true,"types":[]},{"text":"impl Send for DefaultResolver","synthetic":true,"types":[]},{"text":"impl Send for RingResolver","synthetic":true,"types":[]},{"text":"impl Send for FallbackResolver","synthetic":true,"types":[]}];
implementors["socket2"] = [{"text":"impl Send for SockAddr","synthetic":true,"types":[]},{"text":"impl Send for Socket","synthetic":true,"types":[]},{"text":"impl Send for Domain","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for Protocol","synthetic":true,"types":[]}];
implementors["soketto"] = [{"text":"impl&lt;T, N&gt; Send for Parsing&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Storage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for UnknownOpCode","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl Send for Codec","synthetic":true,"types":[]},{"text":"impl Send for OpCode","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ByteSlice125&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SliceTooLarge","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Data","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Param&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Deflate","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Client&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ServerResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Server&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClientRequest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Response&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Builder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Mode","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["sp_allocator"] = [{"text":"impl Send for FreeingBumpHeapAllocator","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["sp_api"] = [{"text":"impl&lt;'a, Block, C, NC, Backend&gt; !Send for CallApiAtParams&lt;'a, Block, C, NC, Backend&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ApiRef&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OldRuntimeVersion","synthetic":true,"types":[]},{"text":"impl&lt;'a, Block&gt; !Send for InitializeBlock&lt;'a, Block&gt;","synthetic":true,"types":[]}];
implementors["sp_application_crypto"] = [{"text":"impl Send for Public","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl Send for Pair","synthetic":true,"types":[]},{"text":"impl Send for Public","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl Send for Pair","synthetic":true,"types":[]},{"text":"impl Send for Public","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl Send for Pair","synthetic":true,"types":[]}];
implementors["sp_arithmetic"] = [{"text":"impl Send for FixedI64","synthetic":true,"types":[]},{"text":"impl Send for FixedI128","synthetic":true,"types":[]},{"text":"impl Send for FixedU128","synthetic":true,"types":[]},{"text":"impl Send for Percent","synthetic":true,"types":[]},{"text":"impl Send for PerU16","synthetic":true,"types":[]},{"text":"impl Send for Permill","synthetic":true,"types":[]},{"text":"impl Send for Perbill","synthetic":true,"types":[]},{"text":"impl Send for Perquintill","synthetic":true,"types":[]},{"text":"impl Send for Rational128","synthetic":true,"types":[]},{"text":"impl Send for BigUint","synthetic":true,"types":[]}];
implementors["sp_authorship"] = [{"text":"impl&lt;F, H&gt; Send for InherentDataProvider&lt;F, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for InherentError","synthetic":true,"types":[]}];
implementors["sp_blockchain"] = [{"text":"impl&lt;Block&gt; Send for Info&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for HashAndNumber&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for TreeRoute&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for HeaderMetadataCache&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for CachedHeaderMetadata&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ApplyExtrinsicFailed","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for BlockStatus","synthetic":true,"types":[]}];
implementors["sp_chain_spec"] = [{"text":"impl Send for ChainType","synthetic":true,"types":[]}];
implementors["sp_consensus"] = [{"text":"impl&lt;Block, Transaction&gt; Send for Proposal&lt;Block, Transaction&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Transaction: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NoNetwork","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CanAuthorWithNativeVersion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AlwaysCanAuthor","synthetic":true,"types":[]},{"text":"impl Send for NeverCanAuthor","synthetic":true,"types":[]},{"text":"impl Send for BlockStatus","synthetic":true,"types":[]},{"text":"impl Send for RecordProof","synthetic":true,"types":[]},{"text":"impl Send for DefaultBlockAnnounceValidator","synthetic":true,"types":[]},{"text":"impl Send for Validation","synthetic":true,"types":[]},{"text":"impl&lt;AuthorityId&gt; Send for OfflineTracker&lt;AuthorityId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AuthorityId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ImportedAux","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for BlockCheckParams&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block, Transaction&gt; !Send for BlockImportParams&lt;Block, Transaction&gt;","synthetic":true,"types":[]},{"text":"impl Send for ImportResult","synthetic":true,"types":[]},{"text":"impl Send for BlockOrigin","synthetic":true,"types":[]},{"text":"impl Send for ForkChoiceStrategy","synthetic":true,"types":[]},{"text":"impl&lt;B, Transaction&gt; Send for BasicQueue&lt;B, Transaction&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Transaction: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Extrinsic: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Header: Header + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for IncomingBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Extrinsic: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Header: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for BlockImportResult&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BlockImportError","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for BufferedLinkSender&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for BufferedLinkReceiver&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Header: Header,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["sp_consensus_aura"] = [{"text":"impl&lt;AuthorityId&gt; Send for ConsensusLog&lt;AuthorityId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AuthorityId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for InherentDataProvider","synthetic":true,"types":[]}];
implementors["sp_consensus_slots"] = [{"text":"impl&lt;Header, Id&gt; Send for EquivocationProof&lt;Header, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_core"] = [{"text":"impl Send for ChangesTrieConfiguration","synthetic":true,"types":[]},{"text":"impl&lt;Number, Hash&gt; Send for ChangesTrieConfigurationRange&lt;Number, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Blake2Hasher","synthetic":true,"types":[]},{"text":"impl Send for KeccakHasher","synthetic":true,"types":[]},{"text":"impl Send for Bytes","synthetic":true,"types":[]},{"text":"impl Send for OpaqueMetadata","synthetic":true,"types":[]},{"text":"impl Send for OpaquePeerId","synthetic":true,"types":[]},{"text":"impl Send for ExecutionContext","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for NativeOrEncoded&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NeverNativeValue","synthetic":true,"types":[]},{"text":"impl Send for LogLevel","synthetic":true,"types":[]},{"text":"impl Send for Void","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for HexDisplay&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for AccountId32","synthetic":true,"types":[]},{"text":"impl Send for Dummy","synthetic":true,"types":[]},{"text":"impl Send for KeyTypeId","synthetic":true,"types":[]},{"text":"impl Send for CryptoTypeId","synthetic":true,"types":[]},{"text":"impl Send for CryptoTypePublicPair","synthetic":true,"types":[]},{"text":"impl Send for Infallible","synthetic":true,"types":[]},{"text":"impl Send for SecretStringError","synthetic":true,"types":[]},{"text":"impl Send for DeriveJunction","synthetic":true,"types":[]},{"text":"impl Send for PublicError","synthetic":true,"types":[]},{"text":"impl Send for Ss58AddressFormat","synthetic":true,"types":[]},{"text":"impl Send for _0","synthetic":true,"types":[]},{"text":"impl Send for _1","synthetic":true,"types":[]},{"text":"impl Send for _2","synthetic":true,"types":[]},{"text":"impl Send for _3","synthetic":true,"types":[]},{"text":"impl Send for _4","synthetic":true,"types":[]},{"text":"impl Send for _5","synthetic":true,"types":[]},{"text":"impl Send for _6","synthetic":true,"types":[]},{"text":"impl Send for _7","synthetic":true,"types":[]},{"text":"impl Send for _8","synthetic":true,"types":[]},{"text":"impl Send for _9","synthetic":true,"types":[]},{"text":"impl Send for _10","synthetic":true,"types":[]},{"text":"impl Send for _11","synthetic":true,"types":[]},{"text":"impl Send for _12","synthetic":true,"types":[]},{"text":"impl Send for _13","synthetic":true,"types":[]},{"text":"impl Send for _14","synthetic":true,"types":[]},{"text":"impl Send for _15","synthetic":true,"types":[]},{"text":"impl Send for _16","synthetic":true,"types":[]},{"text":"impl Send for _17","synthetic":true,"types":[]},{"text":"impl Send for _18","synthetic":true,"types":[]},{"text":"impl Send for _19","synthetic":true,"types":[]},{"text":"impl Send for _20","synthetic":true,"types":[]},{"text":"impl Send for _21","synthetic":true,"types":[]},{"text":"impl Send for _22","synthetic":true,"types":[]},{"text":"impl Send for _23","synthetic":true,"types":[]},{"text":"impl Send for _24","synthetic":true,"types":[]},{"text":"impl Send for _25","synthetic":true,"types":[]},{"text":"impl Send for _26","synthetic":true,"types":[]},{"text":"impl Send for _27","synthetic":true,"types":[]},{"text":"impl Send for _28","synthetic":true,"types":[]},{"text":"impl Send for _29","synthetic":true,"types":[]},{"text":"impl Send for _30","synthetic":true,"types":[]},{"text":"impl Send for _31","synthetic":true,"types":[]},{"text":"impl Send for _32","synthetic":true,"types":[]},{"text":"impl Send for _33","synthetic":true,"types":[]},{"text":"impl Send for _34","synthetic":true,"types":[]},{"text":"impl Send for _35","synthetic":true,"types":[]},{"text":"impl Send for _36","synthetic":true,"types":[]},{"text":"impl Send for _37","synthetic":true,"types":[]},{"text":"impl Send for _38","synthetic":true,"types":[]},{"text":"impl Send for _39","synthetic":true,"types":[]},{"text":"impl Send for _40","synthetic":true,"types":[]},{"text":"impl Send for _41","synthetic":true,"types":[]},{"text":"impl Send for _42","synthetic":true,"types":[]},{"text":"impl Send for _43","synthetic":true,"types":[]},{"text":"impl Send for _44","synthetic":true,"types":[]},{"text":"impl Send for _45","synthetic":true,"types":[]},{"text":"impl Send for _46","synthetic":true,"types":[]},{"text":"impl Send for _47","synthetic":true,"types":[]},{"text":"impl Send for _48","synthetic":true,"types":[]},{"text":"impl Send for _49","synthetic":true,"types":[]},{"text":"impl Send for _50","synthetic":true,"types":[]},{"text":"impl Send for _51","synthetic":true,"types":[]},{"text":"impl Send for _52","synthetic":true,"types":[]},{"text":"impl Send for _53","synthetic":true,"types":[]},{"text":"impl Send for _54","synthetic":true,"types":[]},{"text":"impl Send for _55","synthetic":true,"types":[]},{"text":"impl Send for _56","synthetic":true,"types":[]},{"text":"impl Send for _57","synthetic":true,"types":[]},{"text":"impl Send for _58","synthetic":true,"types":[]},{"text":"impl Send for _59","synthetic":true,"types":[]},{"text":"impl Send for _60","synthetic":true,"types":[]},{"text":"impl Send for _61","synthetic":true,"types":[]},{"text":"impl Send for _62","synthetic":true,"types":[]},{"text":"impl Send for _63","synthetic":true,"types":[]},{"text":"impl Send for _64","synthetic":true,"types":[]},{"text":"impl Send for _65","synthetic":true,"types":[]},{"text":"impl Send for _66","synthetic":true,"types":[]},{"text":"impl Send for _67","synthetic":true,"types":[]},{"text":"impl Send for _68","synthetic":true,"types":[]},{"text":"impl Send for _69","synthetic":true,"types":[]},{"text":"impl Send for _70","synthetic":true,"types":[]},{"text":"impl Send for _71","synthetic":true,"types":[]},{"text":"impl Send for _72","synthetic":true,"types":[]},{"text":"impl Send for _73","synthetic":true,"types":[]},{"text":"impl Send for _74","synthetic":true,"types":[]},{"text":"impl Send for _75","synthetic":true,"types":[]},{"text":"impl Send for _76","synthetic":true,"types":[]},{"text":"impl Send for _77","synthetic":true,"types":[]},{"text":"impl Send for _78","synthetic":true,"types":[]},{"text":"impl Send for _79","synthetic":true,"types":[]},{"text":"impl Send for _80","synthetic":true,"types":[]},{"text":"impl Send for _81","synthetic":true,"types":[]},{"text":"impl Send for _82","synthetic":true,"types":[]},{"text":"impl Send for _83","synthetic":true,"types":[]},{"text":"impl Send for _84","synthetic":true,"types":[]},{"text":"impl Send for _85","synthetic":true,"types":[]},{"text":"impl Send for _86","synthetic":true,"types":[]},{"text":"impl Send for _87","synthetic":true,"types":[]},{"text":"impl Send for _88","synthetic":true,"types":[]},{"text":"impl Send for _89","synthetic":true,"types":[]},{"text":"impl Send for _90","synthetic":true,"types":[]},{"text":"impl Send for _91","synthetic":true,"types":[]},{"text":"impl Send for _92","synthetic":true,"types":[]},{"text":"impl Send for _93","synthetic":true,"types":[]},{"text":"impl Send for _94","synthetic":true,"types":[]},{"text":"impl Send for _95","synthetic":true,"types":[]},{"text":"impl Send for _96","synthetic":true,"types":[]},{"text":"impl Send for _97","synthetic":true,"types":[]},{"text":"impl Send for _98","synthetic":true,"types":[]},{"text":"impl Send for _99","synthetic":true,"types":[]},{"text":"impl Send for _100","synthetic":true,"types":[]},{"text":"impl Send for _112","synthetic":true,"types":[]},{"text":"impl Send for _128","synthetic":true,"types":[]},{"text":"impl Send for _160","synthetic":true,"types":[]},{"text":"impl Send for _192","synthetic":true,"types":[]},{"text":"impl Send for _224","synthetic":true,"types":[]},{"text":"impl Send for _256","synthetic":true,"types":[]},{"text":"impl Send for _384","synthetic":true,"types":[]},{"text":"impl Send for _512","synthetic":true,"types":[]},{"text":"impl Send for Public","synthetic":true,"types":[]},{"text":"impl Send for Pair","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl Send for LocalizedSignature","synthetic":true,"types":[]},{"text":"impl Send for PublicError","synthetic":true,"types":[]},{"text":"impl Send for DeriveError","synthetic":true,"types":[]},{"text":"impl Send for Public","synthetic":true,"types":[]},{"text":"impl Send for Pair","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl Send for LocalizedSignature","synthetic":true,"types":[]},{"text":"impl Send for Public","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl Send for Pair","synthetic":true,"types":[]},{"text":"impl Send for PublicError","synthetic":true,"types":[]},{"text":"impl Send for DeriveError","synthetic":true,"types":[]},{"text":"impl Send for HttpRequestId","synthetic":true,"types":[]},{"text":"impl Send for OpaqueNetworkState","synthetic":true,"types":[]},{"text":"impl Send for OpaqueMultiaddr","synthetic":true,"types":[]},{"text":"impl Send for Timestamp","synthetic":true,"types":[]},{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for Capabilities","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LimitedExternalities&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OffchainExt","synthetic":true,"types":[]},{"text":"impl Send for TransactionPoolExt","synthetic":true,"types":[]},{"text":"impl Send for StorageKind","synthetic":true,"types":[]},{"text":"impl Send for HttpError","synthetic":true,"types":[]},{"text":"impl Send for HttpRequestStatus","synthetic":true,"types":[]},{"text":"impl Send for Capability","synthetic":true,"types":[]},{"text":"impl Send for InMemOffchainStorage","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Send for OffchainOverlayedChangesIter&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Send for OffchainOverlayedChangesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; Send for OffchainOverlayedChangesDrain&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl Send for OffchainOverlayedChange","synthetic":true,"types":[]},{"text":"impl Send for OffchainOverlayedChanges","synthetic":true,"types":[]},{"text":"impl Send for PendingRequest","synthetic":true,"types":[]},{"text":"impl Send for TestPersistentOffchainDB","synthetic":true,"types":[]},{"text":"impl Send for OffchainState","synthetic":true,"types":[]},{"text":"impl Send for TestOffchainExt","synthetic":true,"types":[]},{"text":"impl Send for PoolState","synthetic":true,"types":[]},{"text":"impl Send for TestTransactionPoolExt","synthetic":true,"types":[]},{"text":"impl Send for HostError","synthetic":true,"types":[]},{"text":"impl Send for Entry","synthetic":true,"types":[]},{"text":"impl Send for EnvironmentDefinition","synthetic":true,"types":[]},{"text":"impl Send for ExternEntity","synthetic":true,"types":[]},{"text":"impl Send for KeystoreExt","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WrappedRuntimeCode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for NoneFetchRuntimeCode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RuntimeCode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CodeNotFound","synthetic":true,"types":[]},{"text":"impl Send for CallInWasmExt","synthetic":true,"types":[]},{"text":"impl Send for TaskExecutorExt","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for MissingHostFunctions","synthetic":true,"types":[]},{"text":"impl Send for KeyStore","synthetic":true,"types":[]},{"text":"impl Send for TaskExecutor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VRFTranscriptData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for VRFSignature","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VRFTranscriptValue&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["sp_database"] = [{"text":"impl&lt;H&gt; Send for MemDb&lt;H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for Transaction&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for Change&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H&gt; Send for ChangeRef&lt;'a, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DatabaseError","synthetic":true,"types":[]}];
implementors["sp_externalities"] = [{"text":"impl Send for Extensions","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["sp_finality_grandpa"] = [{"text":"impl&lt;N&gt; Send for ScheduledChange&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Send for EquivocationProof&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VersionedAuthorityList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OpaqueKeyOwnershipProof","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for ConsensusLog&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Send for Equivocation&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_finality_tracker"] = [{"text":"impl&lt;F, N&gt; Send for InherentDataProvider&lt;F, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_inherents"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for InherentData","synthetic":true,"types":[]},{"text":"impl Send for CheckInherentsResult","synthetic":true,"types":[]},{"text":"impl Send for InherentDataProviders","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for MakeFatalError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_io"] = [{"text":"impl Send for VerificationExt","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Crossing&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for EcdsaVerifyError","synthetic":true,"types":[]},{"text":"impl Send for HostFunctions","synthetic":true,"types":[]},{"text":"impl Send for HostFunctions","synthetic":true,"types":[]},{"text":"impl Send for HostFunctions","synthetic":true,"types":[]},{"text":"impl Send for HostFunctions","synthetic":true,"types":[]},{"text":"impl Send for HostFunctions","synthetic":true,"types":[]},{"text":"impl Send for HostFunctions","synthetic":true,"types":[]},{"text":"impl Send for HostFunctions","synthetic":true,"types":[]},{"text":"impl Send for HostFunctions","synthetic":true,"types":[]},{"text":"impl Send for HostFunctions","synthetic":true,"types":[]},{"text":"impl Send for HostFunctions","synthetic":true,"types":[]},{"text":"impl Send for HostFunctions","synthetic":true,"types":[]}];
implementors["sp_keyring"] = [{"text":"impl Send for KeyringIter","synthetic":true,"types":[]},{"text":"impl Send for ParseKeyringError","synthetic":true,"types":[]},{"text":"impl Send for Keyring","synthetic":true,"types":[]},{"text":"impl Send for KeyringIter","synthetic":true,"types":[]},{"text":"impl Send for Keyring","synthetic":true,"types":[]}];
implementors["sp_panic_handler"] = [{"text":"impl !Send for AbortGuard","synthetic":true,"types":[]}];
implementors["sp_rpc"] = [{"text":"impl Send for TryFromIntError","synthetic":true,"types":[]},{"text":"impl Send for NumberOrHex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ListOrValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_runtime"] = [{"text":"impl&lt;Hash&gt; Send for Digest&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ModuleId","synthetic":true,"types":[]},{"text":"impl Send for AnySignature","synthetic":true,"types":[]},{"text":"impl&lt;Info&gt; Send for DispatchErrorWithPostInfo&lt;Info&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Info: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OpaqueExtrinsic","synthetic":true,"types":[]},{"text":"impl Send for SignatureBatching","synthetic":true,"types":[]},{"text":"impl Send for RuntimeString","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; Send for DigestItem&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MultiSignature","synthetic":true,"types":[]},{"text":"impl Send for MultiSigner","synthetic":true,"types":[]},{"text":"impl Send for DispatchError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for TransactionOutcome&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PiecewiseLinear&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Address, Call, Signature, Extra&gt; Send for UncheckedExtrinsic&lt;Address, Call, Signature, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Address: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Signature: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Call, Extra&gt; Send for SignedPayload&lt;Call, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Extra as SignedExtension&gt;::AdditionalSigned: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Call, Extra&gt; Send for CheckedExtrinsic&lt;AccountId, Call, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Number, Hash&gt; Send for Header&lt;Number, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Hash as Hash&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header, Extrinsic&gt; Send for Block&lt;Header, Extrinsic&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Extrinsic: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for SignedBlock&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Era","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; Send for BlockId&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Hash&gt; Send for DigestItemRef&lt;'a, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OpaqueDigestItemId&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ChangesTrieSignal","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Request&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PendingRequest","synthetic":true,"types":[]},{"text":"impl Send for Response","synthetic":true,"types":[]},{"text":"impl Send for ResponseBody","synthetic":true,"types":[]},{"text":"impl Send for Headers","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for HeadersIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Method","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StorageValueRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Time","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for BlockAndTimeDeadline&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as BlockNumberProvider&gt;::BlockNumber: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for BlockAndTime&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Send for StorageLock&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, L&gt; Send for StorageLockGuard&lt;'a, 'b, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UintAuthorityId","synthetic":true,"types":[]},{"text":"impl Send for TestSignature","synthetic":true,"types":[]},{"text":"impl&lt;Xt&gt; Send for ExtrinsicWrapper&lt;Xt&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Xt: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Xt&gt; Send for Block&lt;Xt&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Xt: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Call, Extra&gt; Send for TestXt&lt;Call, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BadOrigin","synthetic":true,"types":[]},{"text":"impl Send for LookupError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IdentityLookup&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Identity","synthetic":true,"types":[]},{"text":"impl Send for ConvertInto","synthetic":true,"types":[]},{"text":"impl Send for BlakeTwo256","synthetic":true,"types":[]},{"text":"impl Send for Keccak256","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for AppendZerosInput&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TrailingZeroInput&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ValidTransaction","synthetic":true,"types":[]},{"text":"impl Send for ValidTransactionBuilder","synthetic":true,"types":[]},{"text":"impl Send for InvalidTransaction","synthetic":true,"types":[]},{"text":"impl Send for UnknownTransaction","synthetic":true,"types":[]},{"text":"impl Send for TransactionValidityError","synthetic":true,"types":[]},{"text":"impl Send for TransactionSource","synthetic":true,"types":[]},{"text":"impl&lt;Hashing&gt; Send for RandomNumberGenerator&lt;Hashing&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Hashing as Hash&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_runtime_interface"] = [{"text":"impl&lt;T&gt; Send for ExchangeableFunction&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RestoreImplementation&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, O&gt; Send for WrappedFFIValue&lt;T, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Codec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; Send for Inner&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Enum&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_session"] = [{"text":"impl Send for MembershipProof","synthetic":true,"types":[]}];
implementors["sp_staking"] = [{"text":"impl&lt;Reporter, Offender&gt; Send for OffenceDetails&lt;Reporter, Offender&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offender: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Reporter: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OffenceError","synthetic":true,"types":[]}];
implementors["sp_state_machine"] = [{"text":"impl&lt;H, N&gt; Send for TestExternalities&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BasicExternalities","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, B&gt; Send for ReadOnlyExternalities&lt;'a, H, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number&gt; Send for AnchorBlockId&lt;Hash, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, Number&gt; Send for State&lt;'a, H, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, Number&gt; Send for InMemoryStorage&lt;H, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Send for BuildCache&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N&gt; Send for ConfigurationRange&lt;'a, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, H&gt; Send for ProvingBackend&lt;'a, S, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, H&gt; Send for ProvingBackendRecorder&lt;'a, S, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, H, N, Exec&gt; !Send for StateMachine&lt;'a, B, H, N, Exec&gt;","synthetic":true,"types":[]},{"text":"impl Send for OverlayedChanges","synthetic":true,"types":[]},{"text":"impl&lt;Transaction, H, N&gt; Send for StorageChanges&lt;Transaction, H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Transaction: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Transaction, H, N&gt; Send for StorageTransactionCache&lt;Transaction, H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Transaction: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, H&gt; Send for TrieBackend&lt;S, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UsageInfo","synthetic":true,"types":[]},{"text":"impl Send for UsageUnit","synthetic":true,"types":[]},{"text":"impl Send for StateMachineStats","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, N, B&gt; Send for Ext&lt;'a, H, N, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&lt;H&gt;&gt;::Transaction: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; Send for CacheAction&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ExecutionError","synthetic":true,"types":[]},{"text":"impl Send for ExecutionStrategy","synthetic":true,"types":[]},{"text":"impl Send for BackendTrustLevel","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for ExecutionManager&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, H&gt; Send for BackendRuntimeCode&lt;'a, B, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_storage"] = [{"text":"impl Send for StorageKey","synthetic":true,"types":[]},{"text":"impl Send for TrackedStorageKey","synthetic":true,"types":[]},{"text":"impl Send for PrefixedStorageKey","synthetic":true,"types":[]},{"text":"impl Send for StorageData","synthetic":true,"types":[]},{"text":"impl Send for StorageChild","synthetic":true,"types":[]},{"text":"impl Send for Storage","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; Send for StorageChangeSet&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ChildTrieParentKeyId","synthetic":true,"types":[]},{"text":"impl Send for ChildInfo","synthetic":true,"types":[]},{"text":"impl Send for ChildType","synthetic":true,"types":[]}];
implementors["sp_timestamp"] = [{"text":"impl Send for InherentDataProvider","synthetic":true,"types":[]},{"text":"impl Send for InherentError","synthetic":true,"types":[]}];
implementors["sp_tracing"] = [{"text":"impl Send for WasmMetadata","synthetic":true,"types":[]},{"text":"impl Send for WasmEntryAttributes","synthetic":true,"types":[]},{"text":"impl Send for WasmValuesSet","synthetic":true,"types":[]},{"text":"impl Send for WasmFields","synthetic":true,"types":[]},{"text":"impl Send for WasmFieldName","synthetic":true,"types":[]},{"text":"impl Send for WasmValue","synthetic":true,"types":[]},{"text":"impl Send for WasmLevel","synthetic":true,"types":[]}];
implementors["sp_transaction_pool"] = [{"text":"impl Send for PoolStatus","synthetic":true,"types":[]},{"text":"impl&lt;Hash, BlockHash&gt; Send for TransactionStatus&lt;Hash, BlockHash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockHash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for ChainEvent&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["sp_trie"] = [{"text":"impl Send for TrieStream","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for NodeCodec&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StorageProof","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for Layout&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, DB, H&gt; Send for KeySpacedDB&lt;'a, DB, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, DB, H&gt; Send for KeySpacedDBMut&lt;'a, DB, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["sp_utils"] = [{"text":"impl Send for TOKIO_THREADS_TOTAL","synthetic":true,"types":[]},{"text":"impl Send for TOKIO_THREADS_ALIVE","synthetic":true,"types":[]},{"text":"impl Send for UNBOUNDED_CHANNELS_COUNTER","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TracingUnboundedSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TracingUnboundedReceiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for StatusSinks&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ReadySinkEvent&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_version"] = [{"text":"impl Send for RuntimeVersion","synthetic":true,"types":[]},{"text":"impl Send for NativeVersion","synthetic":true,"types":[]}];
implementors["sp_wasm_interface"] = [{"text":"impl&lt;T&gt; Send for Pointer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl Send for ValueType","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl Send for ReturnValue","synthetic":true,"types":[]}];
implementors["spin"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for MutexGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockUpgradeableGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for RwLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Once&lt;T&gt;","synthetic":false,"types":[]}];
implementors["statrs"] = [{"text":"impl Send for StatsError","synthetic":true,"types":[]},{"text":"impl Send for Bernoulli","synthetic":true,"types":[]},{"text":"impl Send for Beta","synthetic":true,"types":[]},{"text":"impl Send for Binomial","synthetic":true,"types":[]},{"text":"impl Send for Categorical","synthetic":true,"types":[]},{"text":"impl Send for Cauchy","synthetic":true,"types":[]},{"text":"impl Send for Chi","synthetic":true,"types":[]},{"text":"impl Send for ChiSquared","synthetic":true,"types":[]},{"text":"impl Send for Dirichlet","synthetic":true,"types":[]},{"text":"impl Send for DiscreteUniform","synthetic":true,"types":[]},{"text":"impl Send for Erlang","synthetic":true,"types":[]},{"text":"impl Send for Exponential","synthetic":true,"types":[]},{"text":"impl Send for FisherSnedecor","synthetic":true,"types":[]},{"text":"impl Send for Gamma","synthetic":true,"types":[]},{"text":"impl Send for Geometric","synthetic":true,"types":[]},{"text":"impl Send for Hypergeometric","synthetic":true,"types":[]},{"text":"impl Send for InverseGamma","synthetic":true,"types":[]},{"text":"impl Send for LogNormal","synthetic":true,"types":[]},{"text":"impl Send for Multinomial","synthetic":true,"types":[]},{"text":"impl Send for Normal","synthetic":true,"types":[]},{"text":"impl Send for Pareto","synthetic":true,"types":[]},{"text":"impl Send for Poisson","synthetic":true,"types":[]},{"text":"impl Send for StudentsT","synthetic":true,"types":[]},{"text":"impl Send for Triangular","synthetic":true,"types":[]},{"text":"impl Send for Uniform","synthetic":true,"types":[]},{"text":"impl Send for Weibull","synthetic":true,"types":[]},{"text":"impl Send for InfinitePeriodic","synthetic":true,"types":[]},{"text":"impl Send for Periodic","synthetic":true,"types":[]},{"text":"impl Send for InfiniteSinusoidal","synthetic":true,"types":[]},{"text":"impl Send for Sinusoidal","synthetic":true,"types":[]},{"text":"impl Send for InfiniteSquare","synthetic":true,"types":[]},{"text":"impl Send for Square","synthetic":true,"types":[]},{"text":"impl Send for InfiniteTriangle","synthetic":true,"types":[]},{"text":"impl Send for Triangle","synthetic":true,"types":[]},{"text":"impl Send for InfiniteSawtooth","synthetic":true,"types":[]},{"text":"impl Send for Sawtooth","synthetic":true,"types":[]},{"text":"impl Send for RankTieBreaker","synthetic":true,"types":[]}];
implementors["stream_cipher"] = [{"text":"impl Send for InvalidKeyNonceLength","synthetic":true,"types":[]},{"text":"impl Send for LoopError","synthetic":true,"types":[]},{"text":"impl Send for OverflowError","synthetic":true,"types":[]}];
implementors["string"] = [{"text":"impl&lt;T&gt; Send for String&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["strsim"] = [{"text":"impl Send for StrSimError","synthetic":true,"types":[]}];
implementors["strum"] = [{"text":"impl Send for ParseError","synthetic":true,"types":[]}];
implementors["substrate_bip39"] = [{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["substrate_frame_rpc_system"] = [{"text":"impl&lt;BlockHash, AccountId, Index&gt; Send for Client&lt;BlockHash, AccountId, Index&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockHash: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Index: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, C, B&gt; Send for FullSystem&lt;P, C, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, C, F, Block&gt; Send for LightSystem&lt;P, C, F, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["subtle"] = [{"text":"impl Send for Choice","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !Send for Attribute","synthetic":true,"types":[]},{"text":"impl !Send for MetaList","synthetic":true,"types":[]},{"text":"impl !Send for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !Send for Field","synthetic":true,"types":[]},{"text":"impl !Send for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !Send for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !Send for Variant","synthetic":true,"types":[]},{"text":"impl !Send for VisCrate","synthetic":true,"types":[]},{"text":"impl !Send for VisPublic","synthetic":true,"types":[]},{"text":"impl !Send for VisRestricted","synthetic":true,"types":[]},{"text":"impl !Send for Arm","synthetic":true,"types":[]},{"text":"impl !Send for FieldValue","synthetic":true,"types":[]},{"text":"impl !Send for Label","synthetic":true,"types":[]},{"text":"impl !Send for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl !Send for ExprArray","synthetic":true,"types":[]},{"text":"impl !Send for ExprAssign","synthetic":true,"types":[]},{"text":"impl !Send for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !Send for ExprAsync","synthetic":true,"types":[]},{"text":"impl !Send for ExprAwait","synthetic":true,"types":[]},{"text":"impl !Send for ExprBinary","synthetic":true,"types":[]},{"text":"impl !Send for ExprBlock","synthetic":true,"types":[]},{"text":"impl !Send for ExprBox","synthetic":true,"types":[]},{"text":"impl !Send for ExprBreak","synthetic":true,"types":[]},{"text":"impl !Send for ExprCall","synthetic":true,"types":[]},{"text":"impl !Send for ExprCast","synthetic":true,"types":[]},{"text":"impl !Send for ExprClosure","synthetic":true,"types":[]},{"text":"impl !Send for ExprContinue","synthetic":true,"types":[]},{"text":"impl !Send for ExprField","synthetic":true,"types":[]},{"text":"impl !Send for ExprForLoop","synthetic":true,"types":[]},{"text":"impl !Send for ExprGroup","synthetic":true,"types":[]},{"text":"impl !Send for ExprIf","synthetic":true,"types":[]},{"text":"impl !Send for ExprIndex","synthetic":true,"types":[]},{"text":"impl !Send for ExprLet","synthetic":true,"types":[]},{"text":"impl !Send for ExprLit","synthetic":true,"types":[]},{"text":"impl !Send for ExprLoop","synthetic":true,"types":[]},{"text":"impl !Send for ExprMacro","synthetic":true,"types":[]},{"text":"impl !Send for ExprMatch","synthetic":true,"types":[]},{"text":"impl !Send for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !Send for ExprParen","synthetic":true,"types":[]},{"text":"impl !Send for ExprPath","synthetic":true,"types":[]},{"text":"impl !Send for ExprRange","synthetic":true,"types":[]},{"text":"impl !Send for ExprReference","synthetic":true,"types":[]},{"text":"impl !Send for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !Send for ExprReturn","synthetic":true,"types":[]},{"text":"impl !Send for ExprStruct","synthetic":true,"types":[]},{"text":"impl !Send for ExprTry","synthetic":true,"types":[]},{"text":"impl !Send for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl !Send for ExprTuple","synthetic":true,"types":[]},{"text":"impl !Send for ExprType","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnary","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !Send for ExprWhile","synthetic":true,"types":[]},{"text":"impl !Send for ExprYield","synthetic":true,"types":[]},{"text":"impl !Send for Index","synthetic":true,"types":[]},{"text":"impl !Send for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !Send for ConstParam","synthetic":true,"types":[]},{"text":"impl !Send for Generics","synthetic":true,"types":[]},{"text":"impl !Send for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !Send for PredicateEq","synthetic":true,"types":[]},{"text":"impl !Send for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !Send for PredicateType","synthetic":true,"types":[]},{"text":"impl !Send for TraitBound","synthetic":true,"types":[]},{"text":"impl !Send for TypeParam","synthetic":true,"types":[]},{"text":"impl !Send for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemType","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemConst","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemType","synthetic":true,"types":[]},{"text":"impl !Send for ItemConst","synthetic":true,"types":[]},{"text":"impl !Send for ItemEnum","synthetic":true,"types":[]},{"text":"impl !Send for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl !Send for ItemFn","synthetic":true,"types":[]},{"text":"impl !Send for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl !Send for ItemImpl","synthetic":true,"types":[]},{"text":"impl !Send for ItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for ItemMacro2","synthetic":true,"types":[]},{"text":"impl !Send for ItemMod","synthetic":true,"types":[]},{"text":"impl !Send for ItemStatic","synthetic":true,"types":[]},{"text":"impl !Send for ItemStruct","synthetic":true,"types":[]},{"text":"impl !Send for ItemTrait","synthetic":true,"types":[]},{"text":"impl !Send for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl !Send for ItemType","synthetic":true,"types":[]},{"text":"impl !Send for ItemUnion","synthetic":true,"types":[]},{"text":"impl !Send for ItemUse","synthetic":true,"types":[]},{"text":"impl !Send for Receiver","synthetic":true,"types":[]},{"text":"impl !Send for Signature","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemConst","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemType","synthetic":true,"types":[]},{"text":"impl !Send for UseGlob","synthetic":true,"types":[]},{"text":"impl !Send for UseGroup","synthetic":true,"types":[]},{"text":"impl !Send for UseName","synthetic":true,"types":[]},{"text":"impl !Send for UsePath","synthetic":true,"types":[]},{"text":"impl !Send for UseRename","synthetic":true,"types":[]},{"text":"impl !Send for File","synthetic":true,"types":[]},{"text":"impl !Send for Lifetime","synthetic":true,"types":[]},{"text":"impl !Send for LitBool","synthetic":true,"types":[]},{"text":"impl !Send for LitByte","synthetic":true,"types":[]},{"text":"impl !Send for LitByteStr","synthetic":true,"types":[]},{"text":"impl !Send for LitChar","synthetic":true,"types":[]},{"text":"impl !Send for LitFloat","synthetic":true,"types":[]},{"text":"impl !Send for LitInt","synthetic":true,"types":[]},{"text":"impl !Send for LitStr","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for DataEnum","synthetic":true,"types":[]},{"text":"impl !Send for DataStruct","synthetic":true,"types":[]},{"text":"impl !Send for DataUnion","synthetic":true,"types":[]},{"text":"impl !Send for DeriveInput","synthetic":true,"types":[]},{"text":"impl !Send for Block","synthetic":true,"types":[]},{"text":"impl !Send for Local","synthetic":true,"types":[]},{"text":"impl !Send for Abi","synthetic":true,"types":[]},{"text":"impl !Send for BareFnArg","synthetic":true,"types":[]},{"text":"impl !Send for TypeArray","synthetic":true,"types":[]},{"text":"impl !Send for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !Send for TypeGroup","synthetic":true,"types":[]},{"text":"impl !Send for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !Send for TypeInfer","synthetic":true,"types":[]},{"text":"impl !Send for TypeMacro","synthetic":true,"types":[]},{"text":"impl !Send for TypeNever","synthetic":true,"types":[]},{"text":"impl !Send for TypeParen","synthetic":true,"types":[]},{"text":"impl !Send for TypePath","synthetic":true,"types":[]},{"text":"impl !Send for TypePtr","synthetic":true,"types":[]},{"text":"impl !Send for TypeReference","synthetic":true,"types":[]},{"text":"impl !Send for TypeSlice","synthetic":true,"types":[]},{"text":"impl !Send for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !Send for TypeTuple","synthetic":true,"types":[]},{"text":"impl !Send for Variadic","synthetic":true,"types":[]},{"text":"impl !Send for FieldPat","synthetic":true,"types":[]},{"text":"impl !Send for PatBox","synthetic":true,"types":[]},{"text":"impl !Send for PatIdent","synthetic":true,"types":[]},{"text":"impl !Send for PatLit","synthetic":true,"types":[]},{"text":"impl !Send for PatMacro","synthetic":true,"types":[]},{"text":"impl !Send for PatOr","synthetic":true,"types":[]},{"text":"impl !Send for PatPath","synthetic":true,"types":[]},{"text":"impl !Send for PatRange","synthetic":true,"types":[]},{"text":"impl !Send for PatReference","synthetic":true,"types":[]},{"text":"impl !Send for PatRest","synthetic":true,"types":[]},{"text":"impl !Send for PatSlice","synthetic":true,"types":[]},{"text":"impl !Send for PatStruct","synthetic":true,"types":[]},{"text":"impl !Send for PatTuple","synthetic":true,"types":[]},{"text":"impl !Send for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl !Send for PatType","synthetic":true,"types":[]},{"text":"impl !Send for PatWild","synthetic":true,"types":[]},{"text":"impl !Send for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for Binding","synthetic":true,"types":[]},{"text":"impl !Send for Constraint","synthetic":true,"types":[]},{"text":"impl !Send for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for Path","synthetic":true,"types":[]},{"text":"impl !Send for PathSegment","synthetic":true,"types":[]},{"text":"impl !Send for QSelf","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl !Send for AttrStyle","synthetic":true,"types":[]},{"text":"impl !Send for Meta","synthetic":true,"types":[]},{"text":"impl !Send for NestedMeta","synthetic":true,"types":[]},{"text":"impl !Send for Fields","synthetic":true,"types":[]},{"text":"impl !Send for Visibility","synthetic":true,"types":[]},{"text":"impl !Send for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl !Send for RangeLimits","synthetic":true,"types":[]},{"text":"impl !Send for Expr","synthetic":true,"types":[]},{"text":"impl !Send for Member","synthetic":true,"types":[]},{"text":"impl !Send for GenericParam","synthetic":true,"types":[]},{"text":"impl !Send for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !Send for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !Send for WherePredicate","synthetic":true,"types":[]},{"text":"impl !Send for FnArg","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItem","synthetic":true,"types":[]},{"text":"impl !Send for ImplItem","synthetic":true,"types":[]},{"text":"impl !Send for Item","synthetic":true,"types":[]},{"text":"impl !Send for TraitItem","synthetic":true,"types":[]},{"text":"impl !Send for UseTree","synthetic":true,"types":[]},{"text":"impl !Send for Lit","synthetic":true,"types":[]},{"text":"impl Send for StrStyle","synthetic":true,"types":[]},{"text":"impl !Send for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !Send for Data","synthetic":true,"types":[]},{"text":"impl !Send for BinOp","synthetic":true,"types":[]},{"text":"impl !Send for UnOp","synthetic":true,"types":[]},{"text":"impl !Send for Stmt","synthetic":true,"types":[]},{"text":"impl !Send for ReturnType","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for Pat","synthetic":true,"types":[]},{"text":"impl !Send for GenericArgument","synthetic":true,"types":[]},{"text":"impl !Send for PathArguments","synthetic":true,"types":[]},{"text":"impl !Send for Underscore","synthetic":true,"types":[]},{"text":"impl !Send for Abstract","synthetic":true,"types":[]},{"text":"impl !Send for As","synthetic":true,"types":[]},{"text":"impl !Send for Async","synthetic":true,"types":[]},{"text":"impl !Send for Auto","synthetic":true,"types":[]},{"text":"impl !Send for Await","synthetic":true,"types":[]},{"text":"impl !Send for Become","synthetic":true,"types":[]},{"text":"impl !Send for Box","synthetic":true,"types":[]},{"text":"impl !Send for Break","synthetic":true,"types":[]},{"text":"impl !Send for Const","synthetic":true,"types":[]},{"text":"impl !Send for Continue","synthetic":true,"types":[]},{"text":"impl !Send for Crate","synthetic":true,"types":[]},{"text":"impl !Send for Default","synthetic":true,"types":[]},{"text":"impl !Send for Do","synthetic":true,"types":[]},{"text":"impl !Send for Dyn","synthetic":true,"types":[]},{"text":"impl !Send for Else","synthetic":true,"types":[]},{"text":"impl !Send for Enum","synthetic":true,"types":[]},{"text":"impl !Send for Extern","synthetic":true,"types":[]},{"text":"impl !Send for Final","synthetic":true,"types":[]},{"text":"impl !Send for Fn","synthetic":true,"types":[]},{"text":"impl !Send for For","synthetic":true,"types":[]},{"text":"impl !Send for If","synthetic":true,"types":[]},{"text":"impl !Send for Impl","synthetic":true,"types":[]},{"text":"impl !Send for In","synthetic":true,"types":[]},{"text":"impl !Send for Let","synthetic":true,"types":[]},{"text":"impl !Send for Loop","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for Match","synthetic":true,"types":[]},{"text":"impl !Send for Mod","synthetic":true,"types":[]},{"text":"impl !Send for Move","synthetic":true,"types":[]},{"text":"impl !Send for Mut","synthetic":true,"types":[]},{"text":"impl !Send for Override","synthetic":true,"types":[]},{"text":"impl !Send for Priv","synthetic":true,"types":[]},{"text":"impl !Send for Pub","synthetic":true,"types":[]},{"text":"impl !Send for Ref","synthetic":true,"types":[]},{"text":"impl !Send for Return","synthetic":true,"types":[]},{"text":"impl !Send for SelfType","synthetic":true,"types":[]},{"text":"impl !Send for SelfValue","synthetic":true,"types":[]},{"text":"impl !Send for Static","synthetic":true,"types":[]},{"text":"impl !Send for Struct","synthetic":true,"types":[]},{"text":"impl !Send for Super","synthetic":true,"types":[]},{"text":"impl !Send for Trait","synthetic":true,"types":[]},{"text":"impl !Send for Try","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for Typeof","synthetic":true,"types":[]},{"text":"impl !Send for Union","synthetic":true,"types":[]},{"text":"impl !Send for Unsafe","synthetic":true,"types":[]},{"text":"impl !Send for Unsized","synthetic":true,"types":[]},{"text":"impl !Send for Use","synthetic":true,"types":[]},{"text":"impl !Send for Virtual","synthetic":true,"types":[]},{"text":"impl !Send for Where","synthetic":true,"types":[]},{"text":"impl !Send for While","synthetic":true,"types":[]},{"text":"impl !Send for Yield","synthetic":true,"types":[]},{"text":"impl !Send for Add","synthetic":true,"types":[]},{"text":"impl !Send for AddEq","synthetic":true,"types":[]},{"text":"impl !Send for And","synthetic":true,"types":[]},{"text":"impl !Send for AndAnd","synthetic":true,"types":[]},{"text":"impl !Send for AndEq","synthetic":true,"types":[]},{"text":"impl !Send for At","synthetic":true,"types":[]},{"text":"impl !Send for Bang","synthetic":true,"types":[]},{"text":"impl !Send for Caret","synthetic":true,"types":[]},{"text":"impl !Send for CaretEq","synthetic":true,"types":[]},{"text":"impl !Send for Colon","synthetic":true,"types":[]},{"text":"impl !Send for Colon2","synthetic":true,"types":[]},{"text":"impl !Send for Comma","synthetic":true,"types":[]},{"text":"impl !Send for Div","synthetic":true,"types":[]},{"text":"impl !Send for DivEq","synthetic":true,"types":[]},{"text":"impl !Send for Dollar","synthetic":true,"types":[]},{"text":"impl !Send for Dot","synthetic":true,"types":[]},{"text":"impl !Send for Dot2","synthetic":true,"types":[]},{"text":"impl !Send for Dot3","synthetic":true,"types":[]},{"text":"impl !Send for DotDotEq","synthetic":true,"types":[]},{"text":"impl !Send for Eq","synthetic":true,"types":[]},{"text":"impl !Send for EqEq","synthetic":true,"types":[]},{"text":"impl !Send for Ge","synthetic":true,"types":[]},{"text":"impl !Send for Gt","synthetic":true,"types":[]},{"text":"impl !Send for Le","synthetic":true,"types":[]},{"text":"impl !Send for Lt","synthetic":true,"types":[]},{"text":"impl !Send for MulEq","synthetic":true,"types":[]},{"text":"impl !Send for Ne","synthetic":true,"types":[]},{"text":"impl !Send for Or","synthetic":true,"types":[]},{"text":"impl !Send for OrEq","synthetic":true,"types":[]},{"text":"impl !Send for OrOr","synthetic":true,"types":[]},{"text":"impl !Send for Pound","synthetic":true,"types":[]},{"text":"impl !Send for Question","synthetic":true,"types":[]},{"text":"impl !Send for RArrow","synthetic":true,"types":[]},{"text":"impl !Send for LArrow","synthetic":true,"types":[]},{"text":"impl !Send for Rem","synthetic":true,"types":[]},{"text":"impl !Send for RemEq","synthetic":true,"types":[]},{"text":"impl !Send for FatArrow","synthetic":true,"types":[]},{"text":"impl !Send for Semi","synthetic":true,"types":[]},{"text":"impl !Send for Shl","synthetic":true,"types":[]},{"text":"impl !Send for ShlEq","synthetic":true,"types":[]},{"text":"impl !Send for Shr","synthetic":true,"types":[]},{"text":"impl !Send for ShrEq","synthetic":true,"types":[]},{"text":"impl !Send for Star","synthetic":true,"types":[]},{"text":"impl !Send for Sub","synthetic":true,"types":[]},{"text":"impl !Send for SubEq","synthetic":true,"types":[]},{"text":"impl !Send for Tilde","synthetic":true,"types":[]},{"text":"impl !Send for Brace","synthetic":true,"types":[]},{"text":"impl !Send for Bracket","synthetic":true,"types":[]},{"text":"impl !Send for Paren","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl !Send for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !Send for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Nothing","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; !Send for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for AddBounds","synthetic":true,"types":[]},{"text":"impl Send for BindStyle","synthetic":true,"types":[]}];
implementors["take_mut"] = [{"text":"impl&lt;'s&gt; Send for Scope&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'm, T, F&gt; !Send for Hole&lt;'c, 'm, T, F&gt;","synthetic":true,"types":[]}];
implementors["target_lexicon"] = [{"text":"impl Send for Triple","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for Aarch64Architecture","synthetic":true,"types":[]},{"text":"impl Send for Architecture","synthetic":true,"types":[]},{"text":"impl Send for ArmArchitecture","synthetic":true,"types":[]},{"text":"impl Send for BinaryFormat","synthetic":true,"types":[]},{"text":"impl Send for CustomVendor","synthetic":true,"types":[]},{"text":"impl Send for Environment","synthetic":true,"types":[]},{"text":"impl Send for OperatingSystem","synthetic":true,"types":[]},{"text":"impl Send for Vendor","synthetic":true,"types":[]},{"text":"impl Send for CallingConvention","synthetic":true,"types":[]},{"text":"impl Send for Endianness","synthetic":true,"types":[]},{"text":"impl Send for PointerWidth","synthetic":true,"types":[]}];
implementors["tempfile"] = [{"text":"impl Send for TempDir","synthetic":true,"types":[]},{"text":"impl Send for NamedTempFile","synthetic":true,"types":[]},{"text":"impl Send for PathPersistError","synthetic":true,"types":[]},{"text":"impl Send for PersistError","synthetic":true,"types":[]},{"text":"impl Send for TempPath","synthetic":true,"types":[]},{"text":"impl Send for SpooledTempFile","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Send for Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]}];
implementors["termcolor"] = [{"text":"impl Send for StandardStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for StandardStreamLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BufferedStandardStream","synthetic":true,"types":[]},{"text":"impl Send for BufferWriter","synthetic":true,"types":[]},{"text":"impl Send for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for NoColor&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Ansi&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ColorSpec","synthetic":true,"types":[]},{"text":"impl Send for ParseColorError","synthetic":true,"types":[]},{"text":"impl Send for ColorChoice","synthetic":true,"types":[]},{"text":"impl Send for Color","synthetic":true,"types":[]}];
implementors["textwrap"] = [{"text":"impl Send for HyphenSplitter","synthetic":true,"types":[]},{"text":"impl Send for NoHyphenation","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Send for Wrapper&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Send for IntoWrapIter&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'w, 'a, S&gt; Send for WrapIter&lt;'w, 'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !Send for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["threadpool"] = [{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for ThreadPool","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl Send for Timespec","synthetic":true,"types":[]},{"text":"impl Send for PreciseTime","synthetic":true,"types":[]},{"text":"impl Send for SteadyTime","synthetic":true,"types":[]},{"text":"impl Send for Tm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TmFmt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]}];
implementors["tiny_keccak"] = [{"text":"impl Send for Keccak","synthetic":true,"types":[]},{"text":"impl Send for Sha3","synthetic":true,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A&gt; Send for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A, I&gt; Send for ArrayVecSplice&lt;'p, A, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ArrayVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ArrayVecDrain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'s, T&gt; Send for SliceVec&lt;'s, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, 's, T&gt; Send for SliceVecDrain&lt;'p, 's, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A, I&gt; Send for TinyVecSplice&lt;'p, A, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Send for TinyVecDrain&lt;'p, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for TinyVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio"] = [{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for FrameTooBig","synthetic":true,"types":[]},{"text":"impl Send for LengthDelimitedCodec","synthetic":true,"types":[]},{"text":"impl Send for Spawn","synthetic":true,"types":[]},{"text":"impl !Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Runtime","synthetic":true,"types":[]},{"text":"impl Send for Shutdown","synthetic":true,"types":[]},{"text":"impl Send for TaskExecutor","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl !Send for Runtime","synthetic":true,"types":[]},{"text":"impl Send for Handle","synthetic":true,"types":[]}];
implementors["tokio_buf"] = [{"text":"impl Send for SizeHint","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Collect&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as FromBufStream&lt;&lt;T as BufStream&gt;::Item&gt;&gt;::Builder: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for CollectError&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CollectVecError","synthetic":true,"types":[]},{"text":"impl Send for CollectBytesError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LimitError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_codec"] = [{"text":"impl Send for BytesCodec","synthetic":true,"types":[]},{"text":"impl Send for LinesCodec","synthetic":true,"types":[]}];
implementors["tokio_current_thread"] = [{"text":"impl&lt;P&nbsp;=&nbsp;ParkThread&gt; !Send for CurrentThread&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl !Send for TaskExecutor","synthetic":true,"types":[]},{"text":"impl Send for Turn","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !Send for Entered&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl Send for RunError","synthetic":true,"types":[]},{"text":"impl Send for RunTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TurnError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BlockError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Handle","synthetic":true,"types":[]}];
implementors["tokio_executor"] = [{"text":"impl Send for Enter","synthetic":true,"types":[]},{"text":"impl Send for EnterError","synthetic":true,"types":[]},{"text":"impl Send for SpawnError","synthetic":true,"types":[]},{"text":"impl Send for DefaultExecutor","synthetic":true,"types":[]},{"text":"impl !Send for ParkThread","synthetic":true,"types":[]},{"text":"impl Send for ParkError","synthetic":true,"types":[]},{"text":"impl Send for UnparkThread","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Blocking&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_fs"] = [{"text":"impl&lt;P&gt; Send for CreateDirFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for CreateDirAllFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OpenOptions","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; Send for HardLinkFuture&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for MetadataFuture&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for ReadFile&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl Send for DirEntry","synthetic":true,"types":[]},{"text":"impl Send for ReadDir","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for ReadDirFuture&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for ReadLinkFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for RemoveDirFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for RemoveFileFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; Send for RenameFuture&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for SetPermissionsFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Stderr","synthetic":true,"types":[]},{"text":"impl Send for Stdin","synthetic":true,"types":[]},{"text":"impl Send for Stdout","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for SymlinkMetadataFuture&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P, C&gt; Send for WriteFile&lt;P, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CloneFuture","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for CreateFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MetadataFuture","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for OpenFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SeekFuture","synthetic":true,"types":[]},{"text":"impl Send for File","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; Send for SymlinkFuture&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_io"] = [{"text":"impl&lt;R, W&gt; Send for Copy&lt;R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Flush&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; Send for Read&lt;R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; Send for ReadExact&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ReadToEnd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ReadUntil&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Shutdown&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; Send for WriteAll&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Lines&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReadHalf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WriteHalf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_reactor"] = [{"text":"impl Send for Background","synthetic":true,"types":[]},{"text":"impl Send for Shutdown","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for PollEvented&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Reactor","synthetic":true,"types":[]},{"text":"impl Send for Handle","synthetic":true,"types":[]},{"text":"impl Send for Turn","synthetic":true,"types":[]},{"text":"impl Send for SetFallbackError","synthetic":true,"types":[]},{"text":"impl Send for DefaultGuard","synthetic":true,"types":[]},{"text":"impl Send for Registration","synthetic":false,"types":[]}];
implementors["tokio_rustls"] = [{"text":"impl Send for TlsConnector","synthetic":true,"types":[]},{"text":"impl Send for TlsAcceptor","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Send for Connect&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Send for Accept&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Send for FailableConnect&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Send for FailableAccept&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TlsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Send for TlsStream&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Send for TlsStream&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_sync"] = [{"text":"impl Send for Barrier","synthetic":true,"types":[]},{"text":"impl Send for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for MutexGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedReceiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl Send for UnboundedSendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedTrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UnboundedRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl Send for Permit","synthetic":true,"types":[]},{"text":"impl Send for AcquireError","synthetic":true,"types":[]},{"text":"impl Send for TryAcquireError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Mutex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Send for Semaphore","synthetic":false,"types":[]},{"text":"impl Send for AtomicWaker","synthetic":false,"types":[]}];
implementors["tokio_tcp"] = [{"text":"impl Send for Incoming","synthetic":true,"types":[]},{"text":"impl Send for TcpListener","synthetic":true,"types":[]},{"text":"impl Send for ConnectFuture","synthetic":true,"types":[]},{"text":"impl Send for TcpStream","synthetic":true,"types":[]}];
implementors["tokio_threadpool"] = [{"text":"impl Send for BlockingError","synthetic":true,"types":[]},{"text":"impl !Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Sender","synthetic":true,"types":[]},{"text":"impl Send for Shutdown","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for SpawnHandle&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ThreadPool","synthetic":true,"types":[]},{"text":"impl !Send for Worker","synthetic":true,"types":[]},{"text":"impl Send for WorkerId","synthetic":true,"types":[]},{"text":"impl Send for DefaultPark","synthetic":true,"types":[]},{"text":"impl Send for DefaultUnpark","synthetic":true,"types":[]},{"text":"impl Send for ParkError","synthetic":true,"types":[]}];
implementors["tokio_timer"] = [{"text":"impl Send for Delay","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DelayQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Interval","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Timeout&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Clock","synthetic":true,"types":[]},{"text":"impl Send for DefaultGuard","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Expired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Throttle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ThrottleError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DefaultGuard","synthetic":true,"types":[]},{"text":"impl Send for Handle","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; Send for Timer&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Turn","synthetic":true,"types":[]}];
implementors["tokio_udp"] = [{"text":"impl&lt;C&gt; Send for UdpFramed&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RecvDgram&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendDgram&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UdpSocket","synthetic":true,"types":[]}];
implementors["tokio_uds"] = [{"text":"impl Send for UnixDatagram","synthetic":true,"types":[]},{"text":"impl&lt;A, C&gt; Send for UnixDatagramFramed&lt;A, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Incoming","synthetic":true,"types":[]},{"text":"impl Send for UnixListener","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RecvDgram&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for SendDgram&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ConnectFuture","synthetic":true,"types":[]},{"text":"impl Send for UnixStream","synthetic":true,"types":[]},{"text":"impl Send for UCred","synthetic":true,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Send for BytesCodec","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for FramedParts&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; Send for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for LinesCodec","synthetic":true,"types":[]},{"text":"impl Send for LinesCodecError","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for LengthDelimitedCodecError","synthetic":true,"types":[]},{"text":"impl Send for LengthDelimitedCodec","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;K, V&gt; Send for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Deserializer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tracing"] = [{"text":"impl Send for Span","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WithDispatch&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Instrumented&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Entered&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tracing_core"] = [{"text":"impl Send for Dispatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Field","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Identifier","synthetic":true,"types":[]},{"text":"impl Send for DefaultGuard","synthetic":true,"types":[]},{"text":"impl Send for SetGlobalDefaultError","synthetic":true,"types":[]},{"text":"impl Send for Empty","synthetic":true,"types":[]},{"text":"impl Send for FieldSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ValueSet&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Iter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DisplayValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Kind","synthetic":true,"types":[]},{"text":"impl Send for ParseLevelFilterError","synthetic":true,"types":[]},{"text":"impl Send for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Send for Id","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Current","synthetic":true,"types":[]},{"text":"impl Send for Interest","synthetic":true,"types":[]}];
implementors["tracing_futures"] = [{"text":"impl&lt;T&gt; Send for Instrumented&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tracing_log"] = [{"text":"impl Send for LogTracer","synthetic":true,"types":[]},{"text":"impl Send for TraceLogger","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]}];
implementors["tracing_serde"] = [{"text":"impl Send for SerializeField","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SerializeFieldSet&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SerializeLevel&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SerializeId&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SerializeMetadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for SerializeEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for SerializeAttributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for SerializeRecord&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SerdeMapVisitor&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as SerializeMap&gt;::Error: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SerdeStructVisitor&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as SerializeStruct&gt;::Error: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for SerializeFieldMap&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tracing_subscriber"] = [{"text":"impl Send for EnvFilter","synthetic":true,"types":[]},{"text":"impl Send for Registry","synthetic":true,"types":[]},{"text":"impl Send for CurrentSpan","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for Alt&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, V&gt; Send for Delimited&lt;D, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, V&gt; Send for VisitDelimited&lt;D, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for Messages&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Directive","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for BadName","synthetic":true,"types":[]},{"text":"impl Send for FromEnvError","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, N&gt; Send for FmtContext&lt;'a, S, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for FormattedFields&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, N, E, W&gt; Send for Layer&lt;S, N, E, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TestWriter","synthetic":true,"types":[]},{"text":"impl&lt;N, E, F, W&gt; Send for Subscriber&lt;N, E, F, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, E, F, W&gt; Send for SubscriberBuilder&lt;N, E, F, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Json","synthetic":true,"types":[]},{"text":"impl Send for JsonFields","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for JsonVisitor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Pretty","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for PrettyVisitor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for FieldFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; !Send for FieldFnVisitor&lt;'a, F&gt;","synthetic":true,"types":[]},{"text":"impl Send for Compact","synthetic":true,"types":[]},{"text":"impl Send for Full","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; Send for Format&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DefaultFields","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for DefaultVisitor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FmtSpan","synthetic":true,"types":[]},{"text":"impl Send for SystemTime","synthetic":true,"types":[]},{"text":"impl Send for Uptime","synthetic":true,"types":[]},{"text":"impl Send for ChronoUtc","synthetic":true,"types":[]},{"text":"impl Send for ChronoLocal","synthetic":true,"types":[]},{"text":"impl Send for BoxMakeWriter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Send for Context&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, I, S&gt; Send for Layered&lt;L, I, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Identity","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Send for Scope&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;L as LookupSpan&lt;'a&gt;&gt;::Data: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Extensions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ExtensionsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Data&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for SpanRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as LookupSpan&lt;'a&gt;&gt;::Data: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for Parents&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for FromRoot&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as LookupSpan&lt;'a&gt;&gt;::Data: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, S&gt; Send for Layer&lt;L, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, S&gt; Send for Handle&lt;L, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for TryInitError","synthetic":true,"types":[]}];
implementors["trie_db"] = [{"text":"impl&lt;'db, L&gt; !Send for FatDB&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; !Send for FatDBIterator&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; Send for FatDBMut&lt;'db, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;L as TrieLayout&gt;::Hash: Hasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, L, Q&gt; !Send for Lookup&lt;'a, L, Q&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for NibbleSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for NibbleVec","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, HO, V, DB&gt; Send for TrieBuilder&lt;'a, H, HO, V, DB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, HO&gt; Send for TrieRoot&lt;H, HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for TrieRootUnhashed&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; !Send for TrieDBNodeIterator&lt;'a, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, HO&gt; Send for TrieRootPrint&lt;H, HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; Send for TrieFactory&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for TrieError&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TrieSpec","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; !Send for TrieKinds&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl Send for NibbleSlicePlan","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for OwnedNode&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for NodeHandle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Node&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for NodeHandlePlan","synthetic":true,"types":[]},{"text":"impl Send for NodePlan","synthetic":true,"types":[]},{"text":"impl&lt;HO, CE&gt; Send for Error&lt;HO, CE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CE: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; !Send for TrieDB&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; !Send for TrieDBIterator&lt;'a, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Send for TrieDBMut&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;L as TrieLayout&gt;::Hash: Hasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;HO&gt; Send for ChildReference&lt;HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; !Send for SecTrieDB&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; Send for SecTrieDBMut&lt;'db, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;L as TrieLayout&gt;::Hash: Hasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;HO&gt; Send for Record&lt;HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;HO&gt; Send for Recorder&lt;HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["try_lock"] = [{"text":"impl&lt;'a, T&gt; Send for Locked&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for TryLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["twox_hash"] = [{"text":"impl Send for RandomXxHashBuilder64","synthetic":true,"types":[]},{"text":"impl Send for RandomXxHashBuilder32","synthetic":true,"types":[]},{"text":"impl Send for RandomHashBuilder128","synthetic":true,"types":[]},{"text":"impl Send for RandomHashBuilder64","synthetic":true,"types":[]},{"text":"impl Send for XxHash64","synthetic":true,"types":[]},{"text":"impl Send for XxHash32","synthetic":true,"types":[]},{"text":"impl Send for Hash64","synthetic":true,"types":[]},{"text":"impl Send for Hash128","synthetic":true,"types":[]}];
implementors["typenum"] = [{"text":"impl Send for Greater","synthetic":true,"types":[]},{"text":"impl Send for Less","synthetic":true,"types":[]},{"text":"impl Send for Equal","synthetic":true,"types":[]},{"text":"impl Send for B0","synthetic":true,"types":[]},{"text":"impl Send for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Send for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Send for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Z0","synthetic":true,"types":[]},{"text":"impl Send for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Send for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Send for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["uint"] = [{"text":"impl Send for FromDecStrErr","synthetic":true,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S&gt; Send for UniCase&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Ascii&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Send for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Send for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Send for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl Send for BidiClass","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; Send for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IsNormalized","synthetic":true,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Send for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GraphemeCursor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UWordBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UWordBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UnicodeWords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for USentenceBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for USentenceBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UnicodeSentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GraphemeIncomplete","synthetic":true,"types":[]}];
implementors["universal_hash"] = [{"text":"impl&lt;U&gt; Send for Output&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as UniversalHash&gt;::BlockSize: ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["unsigned_varint"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Uvi&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UviBytes&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["untrusted"] = [{"text":"impl&lt;'a&gt; Send for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Reader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Mark","synthetic":true,"types":[]},{"text":"impl Send for EndOfInput","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl Send for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for HostAndPort&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SocketAddrs","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Origin","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Serializer&lt;T&gt;","synthetic":true,"types":[]}];
implementors["vec_arena"] = [{"text":"impl&lt;T&gt; Send for Arena&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; Send for VecMap&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for VacantEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for OccupiedEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Iter&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for IterMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Keys&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Values&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for ValuesMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for IntoIter&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Drain&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Entry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["void"] = [{"text":"impl Send for Void","synthetic":true,"types":[]}];
implementors["want"] = [{"text":"impl Send for Giver","synthetic":true,"types":[]},{"text":"impl Send for Taker","synthetic":true,"types":[]},{"text":"impl Send for SharedGiver","synthetic":true,"types":[]},{"text":"impl Send for Closed","synthetic":true,"types":[]}];
implementors["wasm_bindgen"] = [{"text":"impl !Send for JsValue","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for JsStatic&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Clamped&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for WasmOptionalI32","synthetic":true,"types":[]},{"text":"impl Send for WasmOptionalU32","synthetic":true,"types":[]},{"text":"impl Send for WasmOptionalF32","synthetic":true,"types":[]},{"text":"impl Send for WasmOptionalF64","synthetic":true,"types":[]},{"text":"impl Send for Wasm64","synthetic":true,"types":[]},{"text":"impl Send for WasmOptional64","synthetic":true,"types":[]},{"text":"impl Send for WasmSlice","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Closure&lt;T&gt;","synthetic":true,"types":[]}];
implementors["wasm_bindgen_backend"] = [{"text":"impl !Send for Diagnostic","synthetic":true,"types":[]},{"text":"impl !Send for Program","synthetic":true,"types":[]},{"text":"impl !Send for Export","synthetic":true,"types":[]},{"text":"impl !Send for Import","synthetic":true,"types":[]},{"text":"impl !Send for ImportFunction","synthetic":true,"types":[]},{"text":"impl !Send for Operation","synthetic":true,"types":[]},{"text":"impl !Send for ImportStatic","synthetic":true,"types":[]},{"text":"impl !Send for ImportType","synthetic":true,"types":[]},{"text":"impl !Send for ImportEnum","synthetic":true,"types":[]},{"text":"impl !Send for Function","synthetic":true,"types":[]},{"text":"impl !Send for Struct","synthetic":true,"types":[]},{"text":"impl !Send for StructField","synthetic":true,"types":[]},{"text":"impl !Send for Enum","synthetic":true,"types":[]},{"text":"impl !Send for Variant","synthetic":true,"types":[]},{"text":"impl Send for MethodSelf","synthetic":true,"types":[]},{"text":"impl !Send for ImportModule","synthetic":true,"types":[]},{"text":"impl !Send for ImportKind","synthetic":true,"types":[]},{"text":"impl !Send for ImportFunctionKind","synthetic":true,"types":[]},{"text":"impl !Send for MethodKind","synthetic":true,"types":[]},{"text":"impl !Send for OperationKind","synthetic":true,"types":[]},{"text":"impl Send for TypeKind","synthetic":true,"types":[]},{"text":"impl Send for TypeLocation","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ShortHash&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["wasm_bindgen_futures"] = [{"text":"impl !Send for JsFuture","synthetic":true,"types":[]}];
implementors["wasm_bindgen_macro_support"] = [{"text":"impl !Send for BindgenAttrs","synthetic":true,"types":[]}];
implementors["wasm_timer"] = [{"text":"impl Send for Timer","synthetic":true,"types":[]},{"text":"impl Send for TimerHandle","synthetic":true,"types":[]},{"text":"impl Send for Delay","synthetic":true,"types":[]},{"text":"impl Send for Interval","synthetic":true,"types":[]},{"text":"impl Send for SetDefaultError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Timeout&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for TimeoutStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["wasmi"] = [{"text":"impl Send for Trap","synthetic":true,"types":[]},{"text":"impl !Send for FuncInstance","synthetic":true,"types":[]},{"text":"impl&lt;'args&gt; !Send for FuncInvocation&lt;'args&gt;","synthetic":true,"types":[]},{"text":"impl !Send for FuncRef","synthetic":true,"types":[]},{"text":"impl Send for GlobalInstance","synthetic":true,"types":[]},{"text":"impl !Send for GlobalRef","synthetic":true,"types":[]},{"text":"impl Send for NopExternals","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RuntimeArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ImportsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for MemoryInstance","synthetic":true,"types":[]},{"text":"impl !Send for MemoryRef","synthetic":true,"types":[]},{"text":"impl !Send for ModuleInstance","synthetic":true,"types":[]},{"text":"impl !Send for ModuleRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for NotStartedModuleRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for StackRecycler","synthetic":true,"types":[]},{"text":"impl !Send for TableInstance","synthetic":true,"types":[]},{"text":"impl !Send for TableRef","synthetic":true,"types":[]},{"text":"impl Send for GlobalDescriptor","synthetic":true,"types":[]},{"text":"impl Send for MemoryDescriptor","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl Send for TableDescriptor","synthetic":true,"types":[]},{"text":"impl Send for Module","synthetic":true,"types":[]},{"text":"impl Send for TrapKind","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ResumableError","synthetic":true,"types":[]},{"text":"impl !Send for ExternVal","synthetic":true,"types":[]},{"text":"impl Send for ValueType","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RuntimeValue","synthetic":true,"types":[]},{"text":"impl Send for F32","synthetic":true,"types":[]},{"text":"impl Send for F64","synthetic":true,"types":[]}];
implementors["wasmi_validation"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for PlainValidator","synthetic":true,"types":[]},{"text":"impl Send for PlainFuncValidator","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for StackWithLimit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ModuleContext","synthetic":true,"types":[]},{"text":"impl Send for ModuleContextBuilder","synthetic":true,"types":[]},{"text":"impl Send for BlockFrame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FunctionValidationContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for StartedWith","synthetic":true,"types":[]},{"text":"impl Send for StackValueType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Locals&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["wasmparser"] = [{"text":"impl&lt;'a&gt; Send for BinaryReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Range","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LocalName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Parser&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for RelocEntry","synthetic":true,"types":[]},{"text":"impl Send for BinaryReaderError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BrTable&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FuncType","synthetic":true,"types":[]},{"text":"impl Send for GlobalType","synthetic":true,"types":[]},{"text":"impl Send for Ieee32","synthetic":true,"types":[]},{"text":"impl Send for Ieee64","synthetic":true,"types":[]},{"text":"impl Send for MemoryImmediate","synthetic":true,"types":[]},{"text":"impl Send for MemoryType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Naming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ResizableLimits","synthetic":true,"types":[]},{"text":"impl Send for TableType","synthetic":true,"types":[]},{"text":"impl Send for V128","synthetic":true,"types":[]},{"text":"impl&lt;'b&gt; Send for ValidatingOperatorParser&lt;'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ValidatingParser&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ValidatingParserConfig","synthetic":true,"types":[]},{"text":"impl Send for OperatorValidatorConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CodeSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Data&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DataSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Element&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ElementItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ElementItemsReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ElementSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Export&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ExportSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FunctionBody&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FunctionSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Global&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for GlobalSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Import&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ImportSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for InitExpr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LinkingSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LocalsReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MemorySectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ModuleReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for NameSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for NamingReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OperatorsReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ProducersField&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ProducersFieldValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ProducersFieldValuesReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ProducersSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Reloc","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RelocSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Section&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for SectionIterator&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for SectionIteratorLimited&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TableSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TypeSectionReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ElemSectionEntryTable","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for NameEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParserInput","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ParserState&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CustomSectionKind","synthetic":true,"types":[]},{"text":"impl Send for ExternalKind","synthetic":true,"types":[]},{"text":"impl Send for ImportSectionEntryType","synthetic":true,"types":[]},{"text":"impl Send for LinkingType","synthetic":true,"types":[]},{"text":"impl Send for NameType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Operator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for RelocType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SectionCode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for TypeOrFuncType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CustomSectionContent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DataKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ElementItem","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ElementKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SectionContent&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["wasmtime"] = [{"text":"impl !Send for Global","synthetic":true,"types":[]},{"text":"impl !Send for Table","synthetic":true,"types":[]},{"text":"impl !Send for Memory","synthetic":true,"types":[]},{"text":"impl&lt;'instance&gt; !Send for Export&lt;'instance&gt;","synthetic":true,"types":[]},{"text":"impl Send for FrameInfo","synthetic":true,"types":[]},{"text":"impl !Send for Func","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Caller&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Instance","synthetic":true,"types":[]},{"text":"impl !Send for Linker","synthetic":true,"types":[]},{"text":"impl Send for Module","synthetic":true,"types":[]},{"text":"impl !Send for ExternRef","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Engine","synthetic":true,"types":[]},{"text":"impl !Send for Store","synthetic":true,"types":[]},{"text":"impl Send for InterruptHandle","synthetic":true,"types":[]},{"text":"impl Send for Trap","synthetic":true,"types":[]},{"text":"impl Send for Limits","synthetic":true,"types":[]},{"text":"impl Send for FuncType","synthetic":true,"types":[]},{"text":"impl Send for GlobalType","synthetic":true,"types":[]},{"text":"impl Send for TableType","synthetic":true,"types":[]},{"text":"impl Send for MemoryType","synthetic":true,"types":[]},{"text":"impl&lt;'module&gt; Send for ImportType&lt;'module&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'module&gt; Send for ExportType&lt;'module&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Extern","synthetic":true,"types":[]},{"text":"impl Send for Strategy","synthetic":true,"types":[]},{"text":"impl Send for OptLevel","synthetic":true,"types":[]},{"text":"impl Send for ProfilingStrategy","synthetic":true,"types":[]},{"text":"impl Send for Mutability","synthetic":true,"types":[]},{"text":"impl Send for ValType","synthetic":true,"types":[]},{"text":"impl Send for ExternType","synthetic":true,"types":[]},{"text":"impl !Send for Val","synthetic":true,"types":[]}];
implementors["wasmtime_debug"] = [{"text":"impl&lt;'a&gt; Send for DebugInfoData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for WasmFileInfo","synthetic":true,"types":[]},{"text":"impl Send for DwarfSection","synthetic":true,"types":[]},{"text":"impl Send for DwarfSectionRelocTarget","synthetic":true,"types":[]}];
implementors["wasmtime_environ"] = [{"text":"impl Send for FunctionAddressMap","synthetic":true,"types":[]},{"text":"impl Send for InstructionAddressMap","synthetic":true,"types":[]},{"text":"impl Send for ModuleVmctxInfo","synthetic":true,"types":[]},{"text":"impl Send for CacheConfig","synthetic":true,"types":[]},{"text":"impl Send for Compilation","synthetic":true,"types":[]},{"text":"impl Send for CompiledFunction","synthetic":true,"types":[]},{"text":"impl Send for Relocation","synthetic":true,"types":[]},{"text":"impl Send for StackMapInformation","synthetic":true,"types":[]},{"text":"impl Send for TrapInformation","synthetic":true,"types":[]},{"text":"impl Send for BuiltinFunctionIndex","synthetic":true,"types":[]},{"text":"impl Send for MemoryPlan","synthetic":true,"types":[]},{"text":"impl Send for Module","synthetic":true,"types":[]},{"text":"impl Send for ModuleLocal","synthetic":true,"types":[]},{"text":"impl Send for TableElements","synthetic":true,"types":[]},{"text":"impl Send for TablePlan","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for DataInitializer&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Send for DataInitializerLocation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FunctionBodyData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for ModuleEnvironment&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for ModuleTranslation&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Send for Tunables","synthetic":true,"types":[]},{"text":"impl Send for TargetSharedSignatureIndex","synthetic":true,"types":[]},{"text":"impl Send for VMOffsets","synthetic":true,"types":[]},{"text":"impl Send for ModuleMemoryOffset","synthetic":true,"types":[]},{"text":"impl Send for CompileError","synthetic":true,"types":[]},{"text":"impl Send for RelocationTarget","synthetic":true,"types":[]},{"text":"impl Send for EntityIndex","synthetic":true,"types":[]},{"text":"impl Send for MemoryStyle","synthetic":true,"types":[]},{"text":"impl Send for TableStyle","synthetic":true,"types":[]},{"text":"impl Send for RelocSink","synthetic":true,"types":[]},{"text":"impl Send for TrapSink","synthetic":true,"types":[]},{"text":"impl Send for Cranelift","synthetic":true,"types":[]}];
implementors["wasmtime_jit"] = [{"text":"impl Send for CodeMemory","synthetic":true,"types":[]},{"text":"impl Send for Compilation","synthetic":true,"types":[]},{"text":"impl Send for Compiler","synthetic":true,"types":[]},{"text":"impl Send for CompiledModule","synthetic":true,"types":[]},{"text":"impl Send for NullResolver","synthetic":true,"types":[]},{"text":"impl Send for CompilationStrategy","synthetic":true,"types":[]},{"text":"impl Send for SetupError","synthetic":true,"types":[]},{"text":"impl Send for TrampolineRelocSink","synthetic":true,"types":[]}];
implementors["wasmtime_obj"] = [{"text":"impl&lt;'a&gt; Send for ObjectBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ObjectBuilderTarget","synthetic":true,"types":[]}];
implementors["wasmtime_profiling"] = [{"text":"impl Send for JitDumpAgent","synthetic":true,"types":[]},{"text":"impl Send for VTuneAgent","synthetic":true,"types":[]},{"text":"impl Send for NullProfilerAgent","synthetic":true,"types":[]}];
implementors["wasmtime_runtime"] = [{"text":"impl !Send for ExportFunction","synthetic":true,"types":[]},{"text":"impl !Send for ExportTable","synthetic":true,"types":[]},{"text":"impl !Send for ExportMemory","synthetic":true,"types":[]},{"text":"impl !Send for ExportGlobal","synthetic":true,"types":[]},{"text":"impl !Send for VMExternRef","synthetic":true,"types":[]},{"text":"impl !Send for VMExternRefActivationsTable","synthetic":true,"types":[]},{"text":"impl !Send for StackMapRegistry","synthetic":true,"types":[]},{"text":"impl !Send for Imports","synthetic":true,"types":[]},{"text":"impl !Send for InstanceHandle","synthetic":true,"types":[]},{"text":"impl Send for LinkError","synthetic":true,"types":[]},{"text":"impl Send for Mmap","synthetic":true,"types":[]},{"text":"impl Send for SignatureRegistry","synthetic":true,"types":[]},{"text":"impl !Send for Table","synthetic":true,"types":[]},{"text":"impl !Send for VMCallerCheckedAnyfunc","synthetic":true,"types":[]},{"text":"impl Send for VMContext","synthetic":true,"types":[]},{"text":"impl Send for VMFunctionBody","synthetic":true,"types":[]},{"text":"impl !Send for VMFunctionImport","synthetic":true,"types":[]},{"text":"impl Send for VMGlobalDefinition","synthetic":true,"types":[]},{"text":"impl !Send for VMGlobalImport","synthetic":true,"types":[]},{"text":"impl Send for VMInterrupts","synthetic":true,"types":[]},{"text":"impl Send for VMInvokeArgument","synthetic":true,"types":[]},{"text":"impl !Send for VMMemoryDefinition","synthetic":true,"types":[]},{"text":"impl !Send for VMMemoryImport","synthetic":true,"types":[]},{"text":"impl Send for VMSharedSignatureIndex","synthetic":true,"types":[]},{"text":"impl !Send for VMTableDefinition","synthetic":true,"types":[]},{"text":"impl !Send for VMTableImport","synthetic":true,"types":[]},{"text":"impl !Send for Export","synthetic":true,"types":[]},{"text":"impl Send for InstantiationError","synthetic":true,"types":[]},{"text":"impl !Send for TableElement","synthetic":true,"types":[]},{"text":"impl Send for Trap","synthetic":true,"types":[]},{"text":"impl Send for GdbJitImageRegistration","synthetic":false,"types":[]}];
implementors["wast"] = [{"text":"impl Send for Span","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Id&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for NameAnnotation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Float32","synthetic":true,"types":[]},{"text":"impl Send for Float64","synthetic":true,"types":[]},{"text":"impl Send for LParen","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Alias&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Custom&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Export&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for InlineExport&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Expression&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BlockType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FuncBindType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LetType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BrTableIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for LaneArg","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MemArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CallIndirect&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TableInit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TableCopy&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TableArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MemoryArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MemoryInit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MemoryCopy&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StructAccess&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StructNarrow&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for I8x16Shuffle","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SelectTypes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BrOnExn&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BrOnCast&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RTTSub&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RefTest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Func&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Local&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Global&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Import&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ItemSig&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for InlineImport&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Instance&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Memory&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Data&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Names&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Wat&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Module&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for NestedModule&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Table&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Elem&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RefType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for GlobalType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Limits","synthetic":true,"types":[]},{"text":"impl Send for Limits64","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TableType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FunctionType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FunctionTypeNoNames&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StructType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StructField&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ArrayType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ModuleType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for InstanceType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ExportType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Type&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for TypeUse&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Wast&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WastInvoke&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Index&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for AssertExpression&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for NanPattern&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for V128Pattern","synthetic":true,"types":[]},{"text":"impl Send for CustomPlace","synthetic":true,"types":[]},{"text":"impl Send for CustomPlaceAnchor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EventType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ExportKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Instruction&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for V128Const","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FuncKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for GlobalKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ItemKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for InstanceKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MemoryKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DataKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ModuleKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ModuleField&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for NestedModuleKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TableKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ElemKind&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ElemPayload&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ValType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for HeapType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StorageType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for MemoryType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TypeDef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WastDirective&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WastExecute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for QuoteModule&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for after","synthetic":true,"types":[]},{"text":"impl Send for alias","synthetic":true,"types":[]},{"text":"impl Send for any","synthetic":true,"types":[]},{"text":"impl Send for anyfunc","synthetic":true,"types":[]},{"text":"impl Send for anyref","synthetic":true,"types":[]},{"text":"impl Send for array","synthetic":true,"types":[]},{"text":"impl Send for assert_exhaustion","synthetic":true,"types":[]},{"text":"impl Send for assert_invalid","synthetic":true,"types":[]},{"text":"impl Send for assert_malformed","synthetic":true,"types":[]},{"text":"impl Send for assert_return","synthetic":true,"types":[]},{"text":"impl Send for assert_return_arithmetic_nan","synthetic":true,"types":[]},{"text":"impl Send for assert_return_arithmetic_nan_f32x4","synthetic":true,"types":[]},{"text":"impl Send for assert_return_arithmetic_nan_f64x2","synthetic":true,"types":[]},{"text":"impl Send for assert_return_canonical_nan","synthetic":true,"types":[]},{"text":"impl Send for assert_return_canonical_nan_f32x4","synthetic":true,"types":[]},{"text":"impl Send for assert_return_canonical_nan_f64x2","synthetic":true,"types":[]},{"text":"impl Send for assert_return_func","synthetic":true,"types":[]},{"text":"impl Send for assert_trap","synthetic":true,"types":[]},{"text":"impl Send for assert_unlinkable","synthetic":true,"types":[]},{"text":"impl Send for before","synthetic":true,"types":[]},{"text":"impl Send for binary","synthetic":true,"types":[]},{"text":"impl Send for block","synthetic":true,"types":[]},{"text":"impl Send for catch","synthetic":true,"types":[]},{"text":"impl Send for code","synthetic":true,"types":[]},{"text":"impl Send for data","synthetic":true,"types":[]},{"text":"impl Send for declare","synthetic":true,"types":[]},{"text":"impl Send for do","synthetic":true,"types":[]},{"text":"impl Send for elem","synthetic":true,"types":[]},{"text":"impl Send for end","synthetic":true,"types":[]},{"text":"impl Send for event","synthetic":true,"types":[]},{"text":"impl Send for exn","synthetic":true,"types":[]},{"text":"impl Send for exnref","synthetic":true,"types":[]},{"text":"impl Send for export","synthetic":true,"types":[]},{"text":"impl Send for extern","synthetic":true,"types":[]},{"text":"impl Send for externref","synthetic":true,"types":[]},{"text":"impl Send for eq","synthetic":true,"types":[]},{"text":"impl Send for eqref","synthetic":true,"types":[]},{"text":"impl Send for f32","synthetic":true,"types":[]},{"text":"impl Send for f32x4","synthetic":true,"types":[]},{"text":"impl Send for f64","synthetic":true,"types":[]},{"text":"impl Send for f64x2","synthetic":true,"types":[]},{"text":"impl Send for field","synthetic":true,"types":[]},{"text":"impl Send for first","synthetic":true,"types":[]},{"text":"impl Send for func","synthetic":true,"types":[]},{"text":"impl Send for funcref","synthetic":true,"types":[]},{"text":"impl Send for get","synthetic":true,"types":[]},{"text":"impl Send for global","synthetic":true,"types":[]},{"text":"impl Send for i16","synthetic":true,"types":[]},{"text":"impl Send for i16x8","synthetic":true,"types":[]},{"text":"impl Send for i31","synthetic":true,"types":[]},{"text":"impl Send for i31ref","synthetic":true,"types":[]},{"text":"impl Send for i32","synthetic":true,"types":[]},{"text":"impl Send for i32x4","synthetic":true,"types":[]},{"text":"impl Send for i64","synthetic":true,"types":[]},{"text":"impl Send for i64x2","synthetic":true,"types":[]},{"text":"impl Send for i8","synthetic":true,"types":[]},{"text":"impl Send for i8x16","synthetic":true,"types":[]},{"text":"impl Send for import","synthetic":true,"types":[]},{"text":"impl Send for instance","synthetic":true,"types":[]},{"text":"impl Send for instantiate","synthetic":true,"types":[]},{"text":"impl Send for invoke","synthetic":true,"types":[]},{"text":"impl Send for item","synthetic":true,"types":[]},{"text":"impl Send for last","synthetic":true,"types":[]},{"text":"impl Send for local","synthetic":true,"types":[]},{"text":"impl Send for memory","synthetic":true,"types":[]},{"text":"impl Send for module","synthetic":true,"types":[]},{"text":"impl Send for modulecode","synthetic":true,"types":[]},{"text":"impl Send for nan_arithmetic","synthetic":true,"types":[]},{"text":"impl Send for nan_canonical","synthetic":true,"types":[]},{"text":"impl Send for null","synthetic":true,"types":[]},{"text":"impl Send for nullref","synthetic":true,"types":[]},{"text":"impl Send for offset","synthetic":true,"types":[]},{"text":"impl Send for param","synthetic":true,"types":[]},{"text":"impl Send for parent","synthetic":true,"types":[]},{"text":"impl Send for passive","synthetic":true,"types":[]},{"text":"impl Send for quote","synthetic":true,"types":[]},{"text":"impl Send for else","synthetic":true,"types":[]},{"text":"impl Send for if","synthetic":true,"types":[]},{"text":"impl Send for loop","synthetic":true,"types":[]},{"text":"impl Send for mut","synthetic":true,"types":[]},{"text":"impl Send for type","synthetic":true,"types":[]},{"text":"impl Send for ref","synthetic":true,"types":[]},{"text":"impl Send for ref_func","synthetic":true,"types":[]},{"text":"impl Send for ref_null","synthetic":true,"types":[]},{"text":"impl Send for register","synthetic":true,"types":[]},{"text":"impl Send for result","synthetic":true,"types":[]},{"text":"impl Send for rtt","synthetic":true,"types":[]},{"text":"impl Send for shared","synthetic":true,"types":[]},{"text":"impl Send for start","synthetic":true,"types":[]},{"text":"impl Send for struct","synthetic":true,"types":[]},{"text":"impl Send for table","synthetic":true,"types":[]},{"text":"impl Send for then","synthetic":true,"types":[]},{"text":"impl Send for try","synthetic":true,"types":[]},{"text":"impl Send for v128","synthetic":true,"types":[]},{"text":"impl Send for custom","synthetic":true,"types":[]},{"text":"impl Send for name","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Lexer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Integer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Float&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WasmString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Token&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for LexError","synthetic":true,"types":[]},{"text":"impl Send for SignToken","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FloatVal&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Parser&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Cursor&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["wat"] = [{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["webpki"] = [{"text":"impl&lt;'a&gt; Send for DNSNameRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for InvalidDNSNameError","synthetic":true,"types":[]},{"text":"impl Send for DNSName","synthetic":true,"types":[]},{"text":"impl Send for SignatureAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for Time","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EndEntityCert&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TrustAnchor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TLSServerTrustAnchors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TLSClientTrustAnchors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["x25519_dalek"] = [{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl Send for EphemeralSecret","synthetic":true,"types":[]},{"text":"impl Send for StaticSecret","synthetic":true,"types":[]},{"text":"impl Send for SharedSecret","synthetic":true,"types":[]}];
implementors["yamux"] = [{"text":"impl&lt;T&gt; Send for Connection&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Control","synthetic":true,"types":[]},{"text":"impl Send for Packet","synthetic":true,"types":[]},{"text":"impl Send for Stream","synthetic":true,"types":[]},{"text":"impl Send for StreamId","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Mode","synthetic":true,"types":[]},{"text":"impl Send for ConnectionError","synthetic":true,"types":[]},{"text":"impl Send for FrameDecodeError","synthetic":true,"types":[]},{"text":"impl Send for HeaderDecodeError","synthetic":true,"types":[]},{"text":"impl Send for WindowUpdateMode","synthetic":true,"types":[]}];
implementors["zeroize"] = [{"text":"impl&lt;Z&gt; Send for Zeroizing&lt;Z&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Z: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["zstd"] = [{"text":"impl Send for Compressor","synthetic":true,"types":[]},{"text":"impl Send for Decompressor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EncoderDictionary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DecoderDictionary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Encoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Decoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; !Send for AutoFinishEncoder&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, D&gt; Send for Reader&lt;R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, D&gt; Send for Writer&lt;W, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NoOp","synthetic":true,"types":[]},{"text":"impl Send for Status","synthetic":true,"types":[]},{"text":"impl Send for Decoder","synthetic":true,"types":[]},{"text":"impl Send for Encoder","synthetic":true,"types":[]}];
implementors["zstd_safe"] = [{"text":"impl&lt;'a&gt; Send for InBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OutBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FrameFormat","synthetic":true,"types":[]},{"text":"impl Send for CParameter","synthetic":true,"types":[]},{"text":"impl Send for DParameter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CCtx&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Send for DCtx&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for CDict&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for DDict&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["zstd_sys"] = [{"text":"impl Send for ZSTD_CCtx_s","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_DCtx_s","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_bounds","synthetic":true,"types":[]},{"text":"impl !Send for ZSTD_inBuffer_s","synthetic":true,"types":[]},{"text":"impl !Send for ZSTD_outBuffer_s","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_CDict_s","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_DDict_s","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_CCtx_params_s","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_Sequence","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_compressionParameters","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_frameParameters","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_parameters","synthetic":true,"types":[]},{"text":"impl !Send for ZSTD_customMem","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_frameProgression","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_frameHeader","synthetic":true,"types":[]},{"text":"impl Send for ZDICT_params_t","synthetic":true,"types":[]},{"text":"impl Send for ZSTDMT_CCtx_s","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_strategy","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_cParameter","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_ResetDirective","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_dParameter","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_EndDirective","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_dictContentType_e","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_dictLoadMethod_e","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_format_e","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_dictAttachPref_e","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_literalCompressionMode_e","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_frameType_e","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_nextInputType_e","synthetic":true,"types":[]},{"text":"impl Send for ZSTDMT_parameter","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()