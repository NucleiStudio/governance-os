(function() {var implementors = {};
implementors["libp2p_core"] = [];
implementors["libp2p_deflate"] = [{"text":"impl&lt;C&gt; InboundUpgrade&lt;C&gt; for DeflateConfig <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: AsyncRead + AsyncWrite,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libp2p_floodsub"] = [{"text":"impl&lt;TSocket&gt; InboundUpgrade&lt;TSocket&gt; for FloodsubProtocol <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSocket: AsyncRead + AsyncWrite + Send + Unpin + 'static,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libp2p_gossipsub"] = [{"text":"impl&lt;TSocket&gt; InboundUpgrade&lt;TSocket&gt; for ProtocolConfig <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSocket: AsyncRead + AsyncWrite + Unpin + Send + 'static,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libp2p_kad"] = [{"text":"impl&lt;C&gt; InboundUpgrade&lt;C&gt; for KademliaProtocolConfig <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: AsyncRead + AsyncWrite + Unpin,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libp2p_mplex"] = [{"text":"impl&lt;C&gt; InboundUpgrade&lt;C&gt; for MplexConfig <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: AsyncRead + AsyncWrite + Unpin,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libp2p_noise"] = [{"text":"impl&lt;T, C&gt; InboundUpgrade&lt;T&gt; for NoiseConfig&lt;IX, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NoiseConfig&lt;IX, C&gt;: UpgradeInfo,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Unpin + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Protocol&lt;C&gt; + AsRef&lt;[u8]&gt; + Zeroize + Send + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, C&gt; InboundUpgrade&lt;T&gt; for NoiseConfig&lt;XX, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NoiseConfig&lt;XX, C&gt;: UpgradeInfo,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Unpin + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Protocol&lt;C&gt; + AsRef&lt;[u8]&gt; + Zeroize + Send + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, C, R&gt; InboundUpgrade&lt;T&gt; for NoiseConfig&lt;IK, C, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NoiseConfig&lt;IK, C, R&gt;: UpgradeInfo,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Unpin + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Protocol&lt;C&gt; + AsRef&lt;[u8]&gt; + Zeroize + Send + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, P, C, R&gt; InboundUpgrade&lt;T&gt; for NoiseAuthenticated&lt;P, C, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NoiseConfig&lt;P, C, R&gt;: UpgradeInfo + InboundUpgrade&lt;T, Output = (RemoteIdentity&lt;C&gt;, NoiseOutput&lt;T&gt;), Error = NoiseError&gt; + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;NoiseConfig&lt;P, C, R&gt; as InboundUpgrade&lt;T&gt;&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Protocol&lt;C&gt; + AsRef&lt;[u8]&gt; + Zeroize + Send + 'static,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libp2p_ping"] = [{"text":"impl InboundUpgrade&lt;Negotiated&lt;SubstreamRef&lt;Arc&lt;StreamMuxerBox&gt;&gt;&gt;&gt; for Ping","synthetic":false,"types":[]}];
implementors["libp2p_plaintext"] = [{"text":"impl&lt;C&gt; InboundUpgrade&lt;C&gt; for PlainText1Config","synthetic":false,"types":[]},{"text":"impl&lt;C&gt; InboundUpgrade&lt;C&gt; for PlainText2Config <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: AsyncRead + AsyncWrite + Send + Unpin + 'static,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libp2p_request_response"] = [{"text":"impl&lt;TCodec&gt; InboundUpgrade&lt;Negotiated&lt;SubstreamRef&lt;Arc&lt;StreamMuxerBox&gt;&gt;&gt;&gt; for ResponseProtocol&lt;TCodec&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TCodec: RequestResponseCodec + Send + 'static,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libp2p_yamux"] = [{"text":"impl&lt;C&gt; InboundUpgrade&lt;C&gt; for Config <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: AsyncRead + AsyncWrite + Send + Unpin + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;C&gt; InboundUpgrade&lt;C&gt; for LocalConfig <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: AsyncRead + AsyncWrite + Unpin + 'static,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()