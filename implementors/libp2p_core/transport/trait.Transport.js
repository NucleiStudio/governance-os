(function() {var implementors = {};
implementors["libp2p_core"] = [];
implementors["libp2p_dns"] = [{"text":"impl&lt;T&gt; Transport for DnsConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Transport + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Dial: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libp2p_tcp"] = [{"text":"impl Transport for TcpConfig","synthetic":false,"types":[]}];
implementors["libp2p_uds"] = [{"text":"impl Transport for UdsConfig","synthetic":false,"types":[]}];
implementors["libp2p_wasm_ext"] = [{"text":"impl Transport for ExtTransport","synthetic":false,"types":[]}];
implementors["libp2p_websocket"] = [{"text":"impl&lt;T&gt; Transport for WsConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Transport + Send + Clone + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Error: Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Dial: Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Listener: Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::ListenerUpgrade: Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Output: AsyncRead + AsyncWrite + Unpin + Send + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Transport for WsConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Transport + Send + Clone + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Error: Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Dial: Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Listener: Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::ListenerUpgrade: Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Output: AsyncRead + AsyncWrite + Unpin + Send + 'static,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()