(function() {var implementors = {};
implementors["sp_runtime"] = [{"text":"impl&lt;Address:&nbsp;Encode, Signature:&nbsp;Encode, Call:&nbsp;Encode, Extra:&nbsp;SignedExtension&gt; Serialize for UncheckedExtrinsic&lt;Address, Call, Signature, Extra&gt;","synthetic":false,"types":[]},{"text":"impl Serialize for Era","synthetic":false,"types":[]},{"text":"impl&lt;Number:&nbsp;Copy + Into&lt;U256&gt; + TryFrom&lt;U256&gt;, Hash:&nbsp;HashT&gt; Serialize for Header&lt;Number, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash::Output: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash::Output: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash::Output: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Block:&nbsp;BlockT&gt; Serialize for BlockId&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;Block::Hash: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Header, Extrinsic:&nbsp;MaybeSerialize&gt; Serialize for Block&lt;Header, Extrinsic&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extrinsic: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Block&gt; Serialize for SignedBlock&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Hash&gt; Serialize for Digest&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Codec,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Hash:&nbsp;Encode&gt; Serialize for DigestItem&lt;Hash&gt;","synthetic":false,"types":[]},{"text":"impl Serialize for UintAuthorityId","synthetic":false,"types":[]},{"text":"impl Serialize for TestSignature","synthetic":false,"types":[]},{"text":"impl&lt;Xt:&nbsp;Encode&gt; Serialize for ExtrinsicWrapper&lt;Xt&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Xt&gt; Serialize for Block&lt;Xt&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Xt: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Call, Extra&gt; Serialize for TestXt&lt;Call, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TestXt&lt;Call, Extra&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for BlakeTwo256","synthetic":false,"types":[]},{"text":"impl Serialize for Keccak256","synthetic":false,"types":[]},{"text":"impl Serialize for InvalidTransaction","synthetic":false,"types":[]},{"text":"impl Serialize for UnknownTransaction","synthetic":false,"types":[]},{"text":"impl Serialize for TransactionValidityError","synthetic":false,"types":[]},{"text":"impl Serialize for RuntimeString","synthetic":false,"types":[]},{"text":"impl Serialize for MultiSignature","synthetic":false,"types":[]},{"text":"impl Serialize for MultiSigner","synthetic":false,"types":[]},{"text":"impl Serialize for AnySignature","synthetic":false,"types":[]},{"text":"impl Serialize for DispatchError","synthetic":false,"types":[]},{"text":"impl Serialize for OpaqueExtrinsic","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()