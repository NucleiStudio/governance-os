(function() {var implementors = {};
implementors["async_io"] = [{"text":"impl&lt;T:&nbsp;Read&gt; AsyncRead for Async&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, '_&gt; AsyncRead for &amp;'_ Async&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;'a T: Read,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["async_tls"] = [{"text":"impl&lt;IO&gt; AsyncRead for TlsStream&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: AsyncRead + AsyncWrite + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;IO&gt; AsyncRead for TlsStream&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: AsyncRead + AsyncWrite + Unpin,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["blocking"] = [{"text":"impl&lt;T:&nbsp;Read + Send + 'static&gt; AsyncRead for Unblock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures_lite"] = [{"text":"impl&lt;T:&nbsp;Read&gt; AsyncRead for AssertAsync&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;AsyncRead&gt; AsyncRead for BufReader&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; AsyncRead for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsRef&lt;[u8]&gt; + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl AsyncRead for Empty","synthetic":false,"types":[]},{"text":"impl AsyncRead for Repeat","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;AsyncRead&gt; AsyncRead for Take&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;AsyncRead&gt; AsyncRead for Bytes&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R1:&nbsp;AsyncRead, R2:&nbsp;AsyncRead&gt; AsyncRead for Chain&lt;R1, R2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;AsyncRead + Unpin&gt; AsyncRead for ReadHalf&lt;T&gt;","synthetic":false,"types":[]}];
implementors["libp2p"] = [{"text":"impl&lt;TInner:&nbsp;AsyncRead&gt; AsyncRead for BandwidthConnecLogging&lt;TInner&gt;","synthetic":false,"types":[]}];
implementors["libp2p_core"] = [{"text":"impl&lt;A, B&gt; AsyncRead for EitherOutput&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: AsyncRead,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AsyncRead,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P&gt; AsyncRead for SubstreamRef&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Deref,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Target: StreamMuxer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl AsyncRead for DummyStream","synthetic":false,"types":[]}];
implementors["libp2p_deflate"] = [{"text":"impl&lt;S&gt; AsyncRead for DeflateOutput&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: AsyncRead + Unpin,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libp2p_noise"] = [{"text":"impl&lt;T:&nbsp;AsyncRead + Unpin&gt; AsyncRead for NoiseOutput&lt;T&gt;","synthetic":false,"types":[]}];
implementors["libp2p_plaintext"] = [{"text":"impl&lt;S:&nbsp;AsyncRead + AsyncWrite + Unpin&gt; AsyncRead for PlainTextOutput&lt;S&gt;","synthetic":false,"types":[]}];
implementors["libp2p_pnet"] = [{"text":"impl&lt;S:&nbsp;AsyncRead + AsyncWrite&gt; AsyncRead for PnetOutput&lt;S&gt;","synthetic":false,"types":[]}];
implementors["libp2p_tcp"] = [{"text":"impl AsyncRead for TcpTransStream","synthetic":false,"types":[]}];
implementors["libp2p_wasm_ext"] = [{"text":"impl AsyncRead for Connection","synthetic":false,"types":[]}];
implementors["multistream_select"] = [{"text":"impl&lt;TInner&gt; AsyncRead for Negotiated&lt;TInner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInner: AsyncRead + AsyncWrite + Unpin,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["rw_stream_sink"] = [{"text":"impl&lt;S&gt; AsyncRead for RwStreamSink&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: TryStream&lt;Error = Error&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as TryStream&gt;::Ok: AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["yamux"] = [{"text":"impl AsyncRead for Stream","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()