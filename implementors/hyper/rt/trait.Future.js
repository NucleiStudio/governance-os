(function() {var implementors = {};
implementors["hyper"] = [{"text":"impl&lt;T, B&gt; Future for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Payload + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, B&gt; Future for Handshake&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Payload + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Future for ResponseFuture","synthetic":false,"types":[]},{"text":"impl Future for GaiFuture","synthetic":false,"types":[]},{"text":"impl Future for TokioThreadpoolGaiFuture","synthetic":false,"types":[]},{"text":"impl Future for ResponseFuture","synthetic":false,"types":[]},{"text":"impl&lt;I, B, S, E&gt; Future for Connection&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Service&lt;ReqBody = Body, ResBody = B&gt; + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Error: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: AsyncRead + AsyncWrite + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Payload + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: H2Exec&lt;S::Future, B&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I, F, E, S, B&gt; Future for Connecting&lt;I, F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: AsyncRead + AsyncWrite,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Future&lt;Item = S&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Service&lt;ReqBody = Body, ResBody = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Payload,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: H2Exec&lt;S::Future, B&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I, S, B, E&gt; Future for Server&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: AsyncRead + AsyncWrite + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: MakeServiceRef&lt;I::Item, ReqBody = Body, ResBody = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Error: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Service: 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Payload,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: H2Exec&lt;&lt;S::Service as Service&gt;::Future, B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: NewSvcExec&lt;I::Item, S::Future, S::Service, E, NoopWatcher&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Future for OnUpgrade","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()