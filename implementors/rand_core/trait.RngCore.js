(function() {var implementors = {};
implementors["merlin"] = [{"text":"impl RngCore for TranscriptRng","synthetic":false,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl RngCore for ChaCha20Rng","synthetic":false,"types":[]},{"text":"impl RngCore for ChaCha12Rng","synthetic":false,"types":[]},{"text":"impl RngCore for ChaCha8Rng","synthetic":false,"types":[]}];
implementors["rand_core"] = [];
implementors["rand_hc"] = [{"text":"impl RngCore for Hc128Rng","synthetic":false,"types":[]}];
implementors["rand_isaac"] = [{"text":"impl RngCore for IsaacRng","synthetic":false,"types":[]},{"text":"impl RngCore for Isaac64Rng","synthetic":false,"types":[]}];
implementors["rand_jitter"] = [{"text":"impl RngCore for JitterRng","synthetic":false,"types":[]}];
implementors["rand_os"] = [{"text":"impl RngCore for OsRng","synthetic":false,"types":[]}];
implementors["rand_pcg"] = [{"text":"impl RngCore for Lcg64Xsh32","synthetic":false,"types":[]},{"text":"impl RngCore for Lcg128Xsl64","synthetic":false,"types":[]},{"text":"impl RngCore for Mcg128Xsl64","synthetic":false,"types":[]}];
implementors["rand_xorshift"] = [{"text":"impl RngCore for XorShiftRng","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()