(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;T:&nbsp;Any&gt; Error for CapacityError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["asn1_der"] = [{"text":"impl Error for Asn1DerError","synthetic":false,"types":[]}];
implementors["async_channel"] = [{"text":"impl&lt;T&gt; Error for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Error for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for RecvError","synthetic":false,"types":[]},{"text":"impl Error for TryRecvError","synthetic":false,"types":[]}];
implementors["async_std"] = [{"text":"impl Error for AccessError","synthetic":false,"types":[]},{"text":"impl Error for TimeoutError","synthetic":false,"types":[]},{"text":"impl Error for TimeoutError","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Error for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for TryRecvError","synthetic":false,"types":[]},{"text":"impl Error for RecvError","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl Error for DecodeError","synthetic":false,"types":[]}];
implementors["bincode"] = [{"text":"impl Error for ErrorKind","synthetic":false,"types":[]}];
implementors["bs58"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["bstr"] = [{"text":"impl Error for FromUtf8Error","synthetic":false,"types":[]},{"text":"impl Error for Utf8Error","synthetic":false,"types":[]}];
implementors["byte_slice_cast"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]},{"text":"impl Error for RoundingError","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["concurrent_queue"] = [{"text":"impl Error for PopError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for PushError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["cranelift_codegen"] = [{"text":"impl Error for RegisterMappingError","synthetic":false,"types":[]},{"text":"impl Error for LookupError","synthetic":false,"types":[]},{"text":"impl Error for SetError","synthetic":false,"types":[]},{"text":"impl Error for VerifierError","synthetic":false,"types":[]},{"text":"impl Error for VerifierErrors","synthetic":false,"types":[]},{"text":"impl Error for CodegenError","synthetic":false,"types":[]}];
implementors["cranelift_wasm"] = [{"text":"impl Error for WasmError","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T:&nbsp;Send&gt; Error for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Error for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Error for SendTimeoutError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for RecvError","synthetic":false,"types":[]},{"text":"impl Error for TryRecvError","synthetic":false,"types":[]},{"text":"impl Error for RecvTimeoutError","synthetic":false,"types":[]},{"text":"impl Error for TrySelectError","synthetic":false,"types":[]},{"text":"impl Error for SelectTimeoutError","synthetic":false,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Error for MacError","synthetic":false,"types":[]},{"text":"impl Error for InvalidKeyLength","synthetic":false,"types":[]}];
implementors["data_encoding"] = [{"text":"impl Error for DecodeError","synthetic":false,"types":[]},{"text":"impl Error for SpecificationError","synthetic":false,"types":[]}];
implementors["digest"] = [{"text":"impl Error for InvalidOutputSize","synthetic":false,"types":[]}];
implementors["dns_parser"] = [{"text":"impl Error for ResponseCode","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Error for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Error,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Error,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["erased_serde"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["errno"] = [{"text":"impl Error for Errno","synthetic":false,"types":[]}];
implementors["failure"] = [{"text":"impl&lt;E:&nbsp;Display + Debug&gt; Error for Compat&lt;E&gt;","synthetic":false,"types":[]}];
implementors["finality_grandpa"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["flate2"] = [{"text":"impl Error for DecompressError","synthetic":false,"types":[]},{"text":"impl Error for CompressError","synthetic":false,"types":[]}];
implementors["fork_tree"] = [{"text":"impl&lt;E:&nbsp;Error&gt; Error for Error&lt;E&gt;","synthetic":false,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;E&gt; Error for SharedError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Error,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for ReuniteError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for Canceled","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for SendError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl Error for SendError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for TryRecvError","synthetic":false,"types":[]},{"text":"impl Error for Canceled","synthetic":false,"types":[]}];
implementors["futures_core"] = [{"text":"impl Error for SpawnError","synthetic":false,"types":[]}];
implementors["futures_executor"] = [{"text":"impl Error for EnterError","synthetic":false,"types":[]}];
implementors["futures_task"] = [{"text":"impl Error for SpawnError","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl Error for Aborted","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any, Item&gt; Error for ReuniteError&lt;T, Item&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for ReuniteError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for ReuniteError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["gimli"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for ConvertError","synthetic":false,"types":[]}];
implementors["globset"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["h2"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["hex"] = [{"text":"impl Error for FromHexError","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl Error for InvalidHeaderName","synthetic":false,"types":[]},{"text":"impl Error for InvalidHeaderNameBytes","synthetic":false,"types":[]},{"text":"impl Error for InvalidHeaderValue","synthetic":false,"types":[]},{"text":"impl Error for InvalidHeaderValueBytes","synthetic":false,"types":[]},{"text":"impl Error for ToStrError","synthetic":false,"types":[]},{"text":"impl Error for InvalidMethod","synthetic":false,"types":[]},{"text":"impl Error for InvalidStatusCode","synthetic":false,"types":[]},{"text":"impl Error for InvalidUri","synthetic":false,"types":[]},{"text":"impl Error for InvalidUriBytes","synthetic":false,"types":[]},{"text":"impl Error for InvalidUriParts","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["httparse"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["httpdate"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["humantime"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl Error for InvalidNameError","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["ip_network"] = [{"text":"impl Error for IpNetworkError","synthetic":false,"types":[]},{"text":"impl Error for IpNetworkParseError","synthetic":false,"types":[]}];
implementors["ipnet"] = [{"text":"impl Error for PrefixLenError","synthetic":false,"types":[]},{"text":"impl Error for AddrParseError","synthetic":false,"types":[]}];
implementors["jsonrpc_core"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["jsonrpc_ws_server"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["leb128"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["libp2p_core"] = [{"text":"impl&lt;THandlerErr&gt; Error for ConnectionError&lt;THandlerErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;THandlerErr: Error + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;TTransErr&gt; Error for PendingConnectionError&lt;TTransErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TTransErr: Error + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Error for ConnectionLimit","synthetic":false,"types":[]},{"text":"impl&lt;A, B&gt; Error for EitherError&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Error,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Error,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Error for DecodingError","synthetic":false,"types":[]},{"text":"impl Error for SigningError","synthetic":false,"types":[]},{"text":"impl Error for MemoryTransportError","synthetic":false,"types":[]},{"text":"impl&lt;TErr&gt; Error for TransportTimeoutError&lt;TErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TErr: Error + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, U&gt; Error for TransportUpgradeError&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Error + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Error + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;TErr&gt; Error for TransportError&lt;TErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TErr: Error + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Error for UpgradeError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Error + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Error for ReadOneError","synthetic":false,"types":[]}];
implementors["libp2p_dns"] = [{"text":"impl&lt;TErr&gt; Error for DnsErr&lt;TErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TErr: Error + 'static,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libp2p_floodsub"] = [{"text":"impl Error for FloodsubDecodeError","synthetic":false,"types":[]}];
implementors["libp2p_kad"] = [{"text":"impl Error for KademliaHandlerQueryErr","synthetic":false,"types":[]}];
implementors["libp2p_mdns"] = [{"text":"impl Error for MdnsResponseError","synthetic":false,"types":[]}];
implementors["libp2p_noise"] = [{"text":"impl Error for NoiseError","synthetic":false,"types":[]}];
implementors["libp2p_ping"] = [{"text":"impl Error for PingFailure","synthetic":false,"types":[]}];
implementors["libp2p_pnet"] = [{"text":"impl Error for KeyParseError","synthetic":false,"types":[]},{"text":"impl Error for PnetError","synthetic":false,"types":[]}];
implementors["libp2p_swarm"] = [{"text":"impl&lt;TErr&gt; Error for NodeHandlerWrapperError&lt;TErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TErr: Error + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Error for DuplicateProtonameError","synthetic":false,"types":[]},{"text":"impl&lt;TUpgrErr&gt; Error for ProtocolsHandlerUpgrErr&lt;TUpgrErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUpgrErr: Error + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Error for DialError","synthetic":false,"types":[]}];
implementors["libp2p_wasm_ext"] = [{"text":"impl Error for JsErr","synthetic":false,"types":[]}];
implementors["libp2p_websocket"] = [{"text":"impl&lt;E:&nbsp;Error + 'static&gt; Error for Error&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["libp2p_yamux"] = [{"text":"impl Error for YamuxError","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for SetLoggerError","synthetic":false,"types":[]},{"text":"impl Error for ParseLevelError","synthetic":false,"types":[]}];
implementors["minicbor"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;Error + 'static&gt; Error for Error&lt;W&gt;","synthetic":false,"types":[]}];
implementors["mio_extras"] = [{"text":"impl&lt;T:&nbsp;Any&gt; Error for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for TrySendError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["multihash"] = [{"text":"impl Error for EncodeError","synthetic":false,"types":[]},{"text":"impl Error for DecodeError","synthetic":false,"types":[]},{"text":"impl Error for DecodeOwnedError","synthetic":false,"types":[]}];
implementors["multistream_select"] = [{"text":"impl Error for NegotiationError","synthetic":false,"types":[]},{"text":"impl Error for ProtocolError","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Error for Errno","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Error for ParseBigIntError","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl Error for ParseRatioError","synthetic":false,"types":[]}];
implementors["object"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["parity_multiaddr"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for FromUrlErr","synthetic":false,"types":[]}];
implementors["parity_scale_codec"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["parity_wasm"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["parity_ws"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Error for LexError","synthetic":false,"types":[]}];
implementors["prometheus"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["prost"] = [{"text":"impl Error for DecodeError","synthetic":false,"types":[]},{"text":"impl Error for EncodeError","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Error for BernoulliError","synthetic":false,"types":[]},{"text":"impl Error for WeightedError","synthetic":false,"types":[]},{"text":"impl Error for ReadError","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["rand_jitter"] = [{"text":"impl Error for TimerError","synthetic":false,"types":[]}];
implementors["rayon_core"] = [{"text":"impl Error for ThreadPoolBuildError","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["regex_automata"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for CaseFoldError","synthetic":false,"types":[]},{"text":"impl Error for UnicodeWordError","synthetic":false,"types":[]}];
implementors["region"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["ring"] = [{"text":"impl Error for Unspecified","synthetic":false,"types":[]},{"text":"impl Error for KeyRejected","synthetic":false,"types":[]}];
implementors["rocksdb"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["rustc_hex"] = [{"text":"impl Error for FromHexError","synthetic":false,"types":[]}];
implementors["rustls"] = [{"text":"impl Error for TLSError","synthetic":false,"types":[]}];
implementors["sc_cli"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["sc_executor_common"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["sc_keystore"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["sc_network"] = [{"text":"impl Error for RequestFailure","synthetic":false,"types":[]},{"text":"impl Error for ParseErr","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["sc_rpc_api"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["sc_service"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["sc_transaction_pool"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["scroll"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["secp256k1"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["signature"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["slog"] = [{"text":"impl&lt;D&gt; Error for MutexDrainError&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Drain,<br>&nbsp;&nbsp;&nbsp;&nbsp;D::Err: Debug + Display + Error,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["snow"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["soketto"] = [{"text":"impl Error for UnknownOpCode","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for SliceTooLarge","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["sp_allocator"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["sp_blockchain"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["sp_consensus"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["sp_database"] = [{"text":"impl Error for DatabaseError","synthetic":false,"types":[]}];
implementors["sp_transaction_pool"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["sp_trie"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["statrs"] = [{"text":"impl Error for StatsError","synthetic":false,"types":[]}];
implementors["strum"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["tempfile"] = [{"text":"impl Error for PathPersistError","synthetic":false,"types":[]},{"text":"impl Error for PersistError","synthetic":false,"types":[]}];
implementors["termcolor"] = [{"text":"impl Error for ParseColorError","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Error for OutOfRangeError","synthetic":false,"types":[]},{"text":"impl Error for ParseError","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl Error for FrameTooBig","synthetic":false,"types":[]}];
implementors["tokio_buf"] = [{"text":"impl Error for CollectVecError","synthetic":false,"types":[]},{"text":"impl Error for CollectBytesError","synthetic":false,"types":[]}];
implementors["tokio_current_thread"] = [{"text":"impl Error for RunError","synthetic":false,"types":[]},{"text":"impl Error for RunTimeoutError","synthetic":false,"types":[]},{"text":"impl Error for TurnError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for BlockError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tokio_executor"] = [{"text":"impl Error for EnterError","synthetic":false,"types":[]},{"text":"impl Error for SpawnError","synthetic":false,"types":[]}];
implementors["tokio_reactor"] = [{"text":"impl Error for SetFallbackError","synthetic":false,"types":[]}];
implementors["tokio_sync"] = [{"text":"impl Error for SendError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for RecvError","synthetic":false,"types":[]},{"text":"impl Error for UnboundedSendError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for UnboundedTrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for UnboundedRecvError","synthetic":false,"types":[]},{"text":"impl Error for RecvError","synthetic":false,"types":[]},{"text":"impl Error for TryRecvError","synthetic":false,"types":[]},{"text":"impl Error for AcquireError","synthetic":false,"types":[]},{"text":"impl Error for TryAcquireError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for SendError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tokio_threadpool"] = [{"text":"impl Error for BlockingError","synthetic":false,"types":[]},{"text":"impl Error for ParkError","synthetic":false,"types":[]}];
implementors["tokio_timer"] = [{"text":"impl&lt;T:&nbsp;StdError + 'static&gt; Error for ThrottleError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Error&gt; Error for Error&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Error for LengthDelimitedCodecError","synthetic":false,"types":[]},{"text":"impl Error for LinesCodecError","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["tracing_core"] = [{"text":"impl Error for SetGlobalDefaultError","synthetic":false,"types":[]},{"text":"impl Error for ParseLevelError","synthetic":false,"types":[]},{"text":"impl Error for ParseLevelFilterError","synthetic":false,"types":[]}];
implementors["tracing_subscriber"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]},{"text":"impl Error for BadName","synthetic":false,"types":[]},{"text":"impl Error for FromEnvError","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for TryInitError","synthetic":false,"types":[]}];
implementors["trie_db"] = [{"text":"impl&lt;HO:&nbsp;Debug, CE:&nbsp;Error + 'static&gt; Error for Error&lt;HO, CE&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, E&gt; Error for TrieError&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Error,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["uint"] = [{"text":"impl Error for FromDecStrErr","synthetic":false,"types":[]}];
implementors["unsigned_varint"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for ReadError","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]}];
implementors["void"] = [{"text":"impl Error for Void","synthetic":false,"types":[]}];
implementors["wasmi"] = [{"text":"impl Error for Trap","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["wasmi_validation"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["wasmparser"] = [{"text":"impl Error for BinaryReaderError","synthetic":false,"types":[]}];
implementors["wasmtime"] = [{"text":"impl Error for Trap","synthetic":false,"types":[]}];
implementors["wasmtime_environ"] = [{"text":"impl Error for CompileError","synthetic":false,"types":[]}];
implementors["wasmtime_jit"] = [{"text":"impl Error for SetupError","synthetic":false,"types":[]}];
implementors["wasmtime_runtime"] = [{"text":"impl Error for LinkError","synthetic":false,"types":[]},{"text":"impl Error for InstantiationError","synthetic":false,"types":[]}];
implementors["wast"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["wat"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["webpki"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for InvalidDNSNameError","synthetic":false,"types":[]}];
implementors["yamux"] = [{"text":"impl Error for ConnectionError","synthetic":false,"types":[]},{"text":"impl Error for HeaderDecodeError","synthetic":false,"types":[]},{"text":"impl Error for FrameDecodeError","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()