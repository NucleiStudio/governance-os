initSidebarItems({"constant":[["NUM_REG_CLASSES","The number of register classes that exist. N.B.: must be <= 7 (fit into 3 bits) for 32-bit VReg/RReg packed format!"]],"enum":[["Algorithm",""],["AlgorithmWithDefaults","A choice of register allocation algorithm to run."],["AnalysisError",""],["BlockIx",""],["CheckerError","A single error detected by the regalloc checker."],["InstIx",""],["RegAllocError","An error from the register allocator."],["RegClass",""],["SpillSlot",""]],"fn":[["allocate_registers","Allocate registers for a function's code, given a universe of real registers that we are allowed to use."],["allocate_registers_with_opts","Allocate registers for a function's code, given a universe of real registers that we are allowed to use.  Optionally, stackmap support may be requested."]],"struct":[["BacktrackingOptions",""],["CheckerErrors","A set of errors detected by the regalloc checker."],["IRSnapshot",""],["LinearScanOptions",""],["Options","Tweakable options shared by all the allocators."],["Range",""],["RealReg",""],["RealRegUniverse",""],["Reg",""],["RegAllocResult","The result of register allocation.  Note that allocation can fail!"],["RegClassInfo","Information about a single register class in the `RealRegUniverse`."],["RegUsageCollector",""],["Set",""],["StackmapRequestInfo","A structure with which callers can request stackmap information."],["TypedIxVec",""],["VirtualReg",""],["Writable","A \"writable register\". This is a zero-cost wrapper that can be used to create a distinction, at the Rust type level, between a plain \"register\" and a \"writable register\"."]],"trait":[["Function","A trait defined by the regalloc client to provide access to its machine-instruction / CFG representation."],["RegUsageMapper","A trait for providing mapping results for a given instruction."]],"type":[["Map",""]]});